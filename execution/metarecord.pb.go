// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metarecord.proto

package execution

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MetaRecord struct {
	// Types that are valid to be assigned to Value:
	//	*MetaRecord_Watermark
	Value                isMetaRecord_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MetaRecord) Reset()         { *m = MetaRecord{} }
func (m *MetaRecord) String() string { return proto.CompactTextString(m) }
func (*MetaRecord) ProtoMessage()    {}
func (*MetaRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_02852e519d0ed6bd, []int{0}
}

func (m *MetaRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaRecord.Unmarshal(m, b)
}
func (m *MetaRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaRecord.Marshal(b, m, deterministic)
}
func (m *MetaRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaRecord.Merge(m, src)
}
func (m *MetaRecord) XXX_Size() int {
	return xxx_messageInfo_MetaRecord.Size(m)
}
func (m *MetaRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MetaRecord proto.InternalMessageInfo

type isMetaRecord_Value interface {
	isMetaRecord_Value()
}

type MetaRecord_Watermark struct {
	Watermark *Watermark `protobuf:"bytes,1,opt,name=watermark,proto3,oneof"`
}

func (*MetaRecord_Watermark) isMetaRecord_Value() {}

func (m *MetaRecord) GetValue() isMetaRecord_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MetaRecord) GetWatermark() *Watermark {
	if x, ok := m.GetValue().(*MetaRecord_Watermark); ok {
		return x.Watermark
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MetaRecord) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MetaRecord_Watermark)(nil),
	}
}

type Watermark struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Watermark) Reset()         { *m = Watermark{} }
func (m *Watermark) String() string { return proto.CompactTextString(m) }
func (*Watermark) ProtoMessage()    {}
func (*Watermark) Descriptor() ([]byte, []int) {
	return fileDescriptor_02852e519d0ed6bd, []int{1}
}

func (m *Watermark) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Watermark.Unmarshal(m, b)
}
func (m *Watermark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Watermark.Marshal(b, m, deterministic)
}
func (m *Watermark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Watermark.Merge(m, src)
}
func (m *Watermark) XXX_Size() int {
	return xxx_messageInfo_Watermark.Size(m)
}
func (m *Watermark) XXX_DiscardUnknown() {
	xxx_messageInfo_Watermark.DiscardUnknown(m)
}

var xxx_messageInfo_Watermark proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MetaRecord)(nil), "metarecord.MetaRecord")
	proto.RegisterType((*Watermark)(nil), "metarecord.Watermark")
}

func init() { proto.RegisterFile("metarecord.proto", fileDescriptor_02852e519d0ed6bd) }

var fileDescriptor_02852e519d0ed6bd = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x4d, 0x2d, 0x49,
	0x2c, 0x4a, 0x4d, 0xce, 0x2f, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x48, 0xc9, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x83, 0x65, 0x92, 0x4a, 0xd3, 0xf4, 0x4b,
	0x32, 0x73, 0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b, 0x20, 0x8a, 0xa5, 0xe4, 0xd0, 0x15, 0xa4, 0x94,
	0x16, 0x25, 0x96, 0x64, 0xe6, 0xe7, 0x41, 0xe4, 0x95, 0x7c, 0xb8, 0xb8, 0x7c, 0x53, 0x4b, 0x12,
	0x83, 0xc0, 0xc6, 0x09, 0x99, 0x72, 0x71, 0x96, 0x27, 0x96, 0xa4, 0x16, 0xe5, 0x26, 0x16, 0x65,
	0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x89, 0xea, 0x21, 0x39, 0x20, 0x1c, 0x26, 0xe9, 0xc1,
	0x10, 0x84, 0x50, 0xe9, 0xc4, 0xce, 0xc5, 0x5a, 0x96, 0x98, 0x53, 0x9a, 0xaa, 0xc4, 0xcd, 0xc5,
	0x09, 0x57, 0xe2, 0xa4, 0x1e, 0xa5, 0x9a, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f,
	0xab, 0x9f, 0x5c, 0x9a, 0x94, 0x6a, 0x64, 0x64, 0x64, 0xa4, 0x9f, 0x9f, 0x5c, 0x92, 0x5f, 0x5c,
	0x98, 0xa3, 0x9f, 0x5a, 0x91, 0x9a, 0x5c, 0x0a, 0x72, 0x49, 0x12, 0x1b, 0xd8, 0x29, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0xd9, 0xbf, 0xe1, 0xeb, 0x00, 0x00, 0x00,
}
