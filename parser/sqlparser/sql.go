// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:24
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:24

func setParseTree(yylex interface{}, stmt *Program) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:59
type yySymType struct {
	yys                              int
	tableValuedFunctionArguments     TableValuedFunctionArguments
	tableValuedFunctionArgument      *TableValuedFunctionArgument
	tableValuedFunctionArgumentValue TableValuedFunctionArgumentValue
	empty                            struct{}
	statement                        Statement
	selStmt                          SelectStatement
	ddl                              *DDL
	ins                              *Insert
	byt                              byte
	bytes                            []byte
	bytes2                           [][]byte
	str                              string
	strs                             []string
	selectExprs                      SelectExprs
	selectExpr                       SelectExpr
	columns                          Columns
	partitions                       Partitions
	colName                          *ColName
	tableExprs                       TableExprs
	tableExpr                        TableExpr
	joinCondition                    JoinCondition
	tableName                        TableName
	tableNames                       TableNames
	indexHints                       *IndexHints
	expr                             Expr
	exprs                            Exprs
	boolVal                          BoolVal
	sqlVal                           *SQLVal
	colTuple                         ColTuple
	values                           Values
	valTuple                         ValTuple
	subquery                         *Subquery
	whens                            []*When
	when                             *When
	orderBy                          OrderBy
	order                            *Order
	limit                            *Limit
	triggers                         []Trigger
	trigger                          Trigger
	updateExprs                      UpdateExprs
	setExprs                         SetExprs
	updateExpr                       *UpdateExpr
	setExpr                          *SetExpr
	colIdent                         ColIdent
	tableIdent                       TableIdent
	convertType                      *ConvertType
	aliasedTableName                 *AliasedTableExpr
	TableSpec                        *TableSpec
	columnType                       ColumnType
	colKeyOpt                        ColumnKeyOption
	optVal                           Expr
	LengthScaleOption                LengthScaleOption
	columnDefinition                 *ColumnDefinition
	indexDefinition                  *IndexDefinition
	indexInfo                        *IndexInfo
	indexOption                      *IndexOption
	indexOptions                     []*IndexOption
	indexColumn                      *IndexColumn
	indexColumns                     []*IndexColumn
	constraintDefinition             *ConstraintDefinition
	constraintInfo                   ConstraintInfo
	ReferenceAction                  ReferenceAction
	partDefs                         []*PartitionDefinition
	partDef                          *PartitionDefinition
	partSpec                         *PartitionSpec
	vindexParam                      VindexParam
	vindexParams                     []VindexParam
	showFilter                       *ShowFilter
	optLike                          *OptLike
	pprogram                         Program
	optionsSpecs                     OptionsSpecs
	optionsSpecsEntry                []OptionsSpecsEntry
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const WATERMARK = 57362
const DELAY = 57363
const COUNTING = 57364
const AFTER = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const KEY = 57374
const DEFAULT = 57375
const SET = 57376
const LOCK = 57377
const UNLOCK = 57378
const KEYS = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const INTEGRAL = 57403
const FLOAT = 57404
const HEXNUM = 57405
const VALUE_ARG = 57406
const LIST_ARG = 57407
const COMMENT = 57408
const COMMENT_KEYWORD = 57409
const BIT_LITERAL = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const OFF = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const RIGHTARROW = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const UNDERSCORE_BINARY = 57440
const UNDERSCORE_UTF8MB4 = 57441
const INTERVAL = 57442
const JSON_EXTRACT_OP = 57443
const JSON_UNQUOTE_EXTRACT_OP = 57444
const CREATE = 57445
const ALTER = 57446
const DROP = 57447
const RENAME = 57448
const ANALYZE = 57449
const ADD = 57450
const FLUSH = 57451
const OPTIONS = 57452
const SCHEMA = 57453
const DATASOURCE = 57454
const OF = 57455
const TYPE = 57456
const TABLE = 57457
const DESCRIPTOR = 57458
const INDEX = 57459
const VIEW = 57460
const TO = 57461
const IGNORE = 57462
const IF = 57463
const UNIQUE = 57464
const PRIMARY = 57465
const COLUMN = 57466
const SPATIAL = 57467
const FULLTEXT = 57468
const KEY_BLOCK_SIZE = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const BEGIN = 57497
const START = 57498
const TRANSACTION = 57499
const COMMIT = 57500
const ROLLBACK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const TIME = 57515
const TIMESTAMP = 57516
const DATETIME = 57517
const YEAR = 57518
const CHAR = 57519
const VARCHAR = 57520
const BOOL = 57521
const CHARACTER = 57522
const VARBINARY = 57523
const NCHAR = 57524
const TEXT = 57525
const TINYTEXT = 57526
const MEDIUMTEXT = 57527
const LONGTEXT = 57528
const BLOB = 57529
const TINYBLOB = 57530
const MEDIUMBLOB = 57531
const LONGBLOB = 57532
const JSON = 57533
const ENUM = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const COLLATION = 57549
const DATABASES = 57550
const SCHEMAS = 57551
const TABLES = 57552
const VITESS_KEYSPACES = 57553
const VITESS_SHARDS = 57554
const VITESS_TABLETS = 57555
const VSCHEMA = 57556
const VSCHEMA_TABLES = 57557
const VITESS_TARGET = 57558
const FULL = 57559
const PROCESSLIST = 57560
const COLUMNS = 57561
const FIELDS = 57562
const ENGINES = 57563
const PLUGINS = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"WATERMARK",
	"DELAY",
	"COUNTING",
	"AFTER",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"RIGHTARROW",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"OPTIONS",
	"SCHEMA",
	"DATASOURCE",
	"OF",
	"TYPE",
	"TABLE",
	"DESCRIPTOR",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	5, 29,
	-2, 4,
	-1, 38,
	169, 304,
	170, 304,
	-2, 294,
	-1, 279,
	117, 660,
	-2, 656,
	-1, 280,
	117, 661,
	-2, 657,
	-1, 348,
	86, 842,
	-2, 63,
	-1, 349,
	86, 796,
	-2, 64,
	-1, 354,
	86, 772,
	-2, 622,
	-1, 356,
	86, 817,
	-2, 624,
	-1, 628,
	1, 356,
	5, 356,
	12, 356,
	13, 356,
	14, 356,
	15, 356,
	17, 356,
	19, 356,
	34, 356,
	35, 356,
	46, 356,
	47, 356,
	48, 356,
	49, 356,
	50, 356,
	52, 356,
	53, 356,
	56, 356,
	57, 356,
	59, 356,
	60, 356,
	166, 356,
	279, 356,
	-2, 383,
	-1, 632,
	57, 44,
	59, 44,
	-2, 48,
	-1, 778,
	117, 663,
	-2, 659,
	-1, 1007,
	5, 30,
	-2, 450,
	-1, 1037,
	5, 29,
	-2, 596,
	-1, 1289,
	5, 30,
	-2, 597,
	-1, 1348,
	5, 29,
	-2, 599,
	-1, 1437,
	5, 30,
	-2, 600,
}

const yyPrivate = 57344

const yyLast = 13835

var yyAct = [...]int{

	280, 1486, 1450, 1252, 1136, 1476, 1423, 284, 1040, 584,
	892, 1363, 1329, 1062, 624, 1187, 1315, 297, 860, 888,
	1224, 1060, 1041, 901, 310, 865, 1184, 1188, 862, 972,
	1194, 935, 57, 82, 891, 258, 1200, 217, 1159, 729,
	217, 813, 810, 803, 248, 1089, 1106, 645, 999, 1116,
	1068, 743, 905, 867, 831, 780, 516, 522, 851, 931,
	455, 311, 52, 583, 4, 644, 353, 217, 82, 844,
	625, 528, 217, 347, 217, 217, 536, 267, 339, 282,
	344, 342, 634, 56, 599, 1479, 1456, 1474, 1435, 1471,
	249, 250, 251, 252, 1253, 322, 255, 328, 329, 326,
	327, 325, 324, 323, 1455, 271, 1434, 1176, 1281, 461,
	1218, 330, 331, 489, 52, 598, 256, 646, 52, 647,
	4, 263, 212, 921, 1077, 882, 208, 1076, 209, 210,
	1078, 286, 510, 61, 1219, 1220, 883, 884, 254, 253,
	1097, 1393, 273, 549, 548, 558, 559, 551, 552, 553,
	554, 555, 556, 557, 550, 914, 1318, 560, 506, 922,
	63, 64, 65, 66, 67, 1335, 507, 504, 505, 204,
	1272, 206, 1270, 247, 499, 500, 718, 1139, 1138, 716,
	1429, 1473, 1468, 1424, 491, 1135, 845, 493, 1490, 1413,
	906, 509, 549, 548, 558, 559, 551, 552, 553, 554,
	555, 556, 557, 550, 485, 217, 560, 1494, 217, 474,
	1372, 717, 475, 463, 217, 1364, 206, 490, 492, 1140,
	908, 217, 722, 955, 82, 709, 82, 82, 1366, 82,
	82, 1213, 82, 1160, 82, 1212, 1211, 458, 1063, 1065,
	1132, 954, 908, 82, 719, 487, 1134, 908, 211, 1090,
	1000, 466, 940, 549, 548, 558, 559, 551, 552, 553,
	554, 555, 556, 557, 550, 205, 220, 560, 207, 959,
	708, 572, 573, 1400, 82, 1162, 456, 1292, 953, 1146,
	1073, 915, 1246, 966, 1026, 486, 965, 486, 486, 993,
	486, 486, 471, 486, 524, 486, 752, 640, 512, 513,
	1488, 922, 1365, 1489, 486, 1487, 488, 540, 1164, 481,
	1168, 889, 1163, 350, 1161, 1236, 560, 1373, 1371, 1166,
	1394, 1064, 907, 878, 1210, 52, 1433, 525, 1165, 950,
	947, 948, 550, 946, 749, 560, 974, 217, 217, 217,
	569, 1167, 1169, 571, 907, 1016, 82, 744, 1133, 907,
	1131, 836, 82, 535, 904, 902, 468, 903, 469, 1411,
	1383, 470, 900, 906, 70, 1198, 623, 1237, 456, 957,
	960, 582, 1013, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 648, 597, 600, 600, 600, 606, 600, 600,
	606, 600, 614, 615, 616, 617, 618, 619, 526, 629,
	71, 454, 519, 523, 1178, 952, 1012, 832, 602, 604,
	911, 608, 610, 570, 613, 711, 912, 633, 973, 541,
	477, 478, 479, 638, 1095, 530, 642, 951, 1416, 1441,
	494, 495, 745, 496, 497, 787, 498, 1324, 501, 601,
	603, 605, 607, 609, 611, 612, 832, 511, 1023, 785,
	786, 784, 572, 573, 585, 217, 534, 533, 533, 1495,
	82, 1323, 277, 596, 515, 1110, 217, 217, 82, 628,
	1109, 956, 217, 535, 535, 217, 1098, 55, 217, 572,
	573, 804, 217, 805, 82, 82, 958, 783, 1443, 82,
	82, 82, 217, 82, 82, 1011, 1412, 1010, 1496, 1342,
	82, 82, 549, 548, 558, 559, 551, 552, 553, 554,
	555, 556, 557, 550, 534, 533, 560, 462, 755, 756,
	1321, 486, 553, 554, 555, 556, 557, 550, 82, 486,
	560, 535, 217, 770, 772, 773, 1143, 1107, 82, 771,
	534, 533, 1458, 751, 203, 486, 486, 1180, 731, 1444,
	486, 486, 486, 723, 486, 486, 1079, 535, 1080, 1421,
	757, 486, 486, 990, 991, 992, 534, 533, 781, 558,
	559, 551, 552, 553, 554, 555, 556, 557, 550, 1409,
	776, 560, 82, 535, 750, 1380, 309, 1369, 1472, 534,
	533, 350, 1446, 515, 515, 464, 465, 1369, 1427, 822,
	825, 534, 533, 1255, 759, 833, 535, 778, 514, 336,
	337, 1419, 1420, 1378, 774, 82, 82, 1090, 535, 80,
	1369, 515, 217, 1369, 1401, 1369, 1368, 1313, 1312, 1377,
	217, 1085, 217, 52, 806, 217, 217, 728, 727, 217,
	217, 217, 82, 1294, 515, 1291, 515, 1233, 586, 712,
	817, 746, 807, 808, 352, 82, 1243, 1242, 1239, 1240,
	841, 1239, 1238, 873, 707, 710, 829, 875, 1005, 515,
	812, 706, 715, 483, 1123, 782, 767, 768, 848, 515,
	551, 552, 553, 554, 555, 556, 557, 550, 732, 733,
	560, 863, 864, 734, 735, 736, 629, 738, 739, 476,
	629, 636, 871, 1121, 740, 741, 25, 731, 25, 880,
	217, 82, 909, 82, 1462, 879, 896, 82, 82, 217,
	217, 876, 217, 217, 815, 515, 217, 82, 1069, 585,
	655, 654, 820, 821, 1035, 1197, 1185, 937, 1036, 1197,
	1347, 815, 872, 217, 635, 217, 217, 637, 217, 639,
	574, 575, 576, 577, 578, 579, 580, 581, 55, 1149,
	55, 628, 933, 934, 1287, 1382, 628, 848, 1241, 1209,
	628, 23, 486, 58, 486, 848, 1122, 847, 25, 1069,
	1081, 1127, 1124, 1117, 1125, 1120, 777, 881, 486, 1118,
	1119, 887, 981, 923, 924, 925, 300, 299, 302, 303,
	304, 305, 848, 1126, 1029, 301, 306, 1005, 636, 781,
	352, 982, 352, 352, 983, 352, 352, 1005, 352, 778,
	352, 853, 856, 857, 858, 854, 1197, 855, 859, 352,
	55, 262, 1028, 1005, 264, 515, 635, 641, 753, 994,
	995, 853, 856, 857, 858, 854, 721, 855, 859, 217,
	217, 217, 217, 217, 637, 1042, 635, 55, 1457, 1331,
	538, 217, 1326, 1043, 217, 82, 1046, 916, 1299, 217,
	1453, 1452, 936, 217, 1229, 1201, 1202, 758, 1084, 932,
	927, 926, 1137, 939, 765, 1022, 55, 350, 1481, 1477,
	1231, 1204, 82, 979, 980, 2, 523, 1185, 1111, 747,
	893, 1070, 1082, 725, 1451, 1207, 1038, 1039, 1037, 1206,
	629, 629, 629, 629, 629, 942, 782, 944, 1055, 1049,
	1044, 1045, 1067, 1047, 1071, 863, 1072, 817, 1066, 1074,
	1048, 970, 352, 1466, 629, 814, 816, 1454, 650, 1145,
	82, 1101, 82, 1103, 1104, 1105, 917, 918, 919, 920,
	1052, 1091, 257, 978, 1050, 1053, 1087, 1088, 1006, 1051,
	268, 269, 928, 929, 930, 1054, 1460, 857, 858, 988,
	82, 529, 987, 517, 1108, 1024, 1102, 653, 484, 1418,
	628, 628, 628, 628, 628, 217, 527, 1285, 1094, 518,
	1115, 1417, 1345, 1092, 82, 628, 1086, 1128, 777, 1327,
	943, 724, 861, 486, 628, 779, 265, 266, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 1142, 529, 1464, 1463, 986, 259, 1387,
	260, 486, 58, 1386, 1333, 985, 1069, 1152, 508, 82,
	82, 1099, 1100, 1042, 1186, 1153, 352, 1158, 1483, 1482,
	62, 1171, 1017, 1177, 352, 1170, 1014, 742, 531, 1483,
	1397, 1189, 1319, 837, 748, 60, 981, 82, 1, 1379,
	352, 352, 1245, 1475, 1254, 352, 352, 352, 1328, 352,
	352, 949, 82, 1205, 82, 82, 352, 352, 1422, 1362,
	1223, 1196, 899, 778, 1222, 890, 69, 1214, 1190, 453,
	52, 1215, 1191, 68, 1410, 898, 897, 1370, 1317, 1226,
	910, 1096, 217, 913, 761, 1230, 1221, 1144, 1093, 1234,
	1235, 1217, 1415, 661, 538, 659, 660, 352, 658, 663,
	217, 662, 657, 1227, 1228, 232, 82, 893, 345, 82,
	82, 217, 649, 938, 532, 72, 1114, 82, 1130, 1129,
	217, 945, 502, 853, 856, 857, 858, 854, 1002, 855,
	859, 1247, 1003, 1201, 1202, 503, 1179, 234, 809, 1007,
	1008, 1009, 1259, 1248, 1141, 1250, 1015, 568, 1261, 1018,
	1019, 984, 1075, 351, 834, 1025, 1192, 1449, 1428, 1027,
	754, 521, 1030, 1031, 1032, 1033, 1268, 1385, 1332, 1260,
	1021, 838, 839, 595, 830, 1042, 285, 769, 298, 295,
	82, 629, 1216, 1286, 1057, 296, 760, 1034, 542, 283,
	1296, 275, 82, 627, 620, 852, 850, 1301, 352, 1295,
	82, 1302, 1082, 849, 340, 1203, 1199, 1303, 1279, 1151,
	1058, 352, 1059, 626, 1148, 82, 1280, 1392, 996, 997,
	998, 1311, 764, 27, 82, 59, 270, 20, 818, 819,
	19, 18, 824, 827, 828, 21, 17, 16, 15, 472,
	31, 22, 1181, 1307, 1308, 1309, 14, 13, 12, 11,
	10, 628, 9, 8, 7, 6, 5, 840, 261, 842,
	843, 24, 82, 82, 3, 82, 0, 352, 0, 352,
	82, 0, 217, 961, 962, 0, 486, 0, 82, 82,
	82, 217, 1189, 352, 82, 1346, 1354, 0, 0, 0,
	0, 0, 0, 1282, 1358, 1359, 1360, 893, 0, 893,
	0, 1353, 82, 585, 1367, 0, 1361, 1374, 0, 352,
	1375, 1297, 1376, 0, 1298, 0, 0, 1300, 1384, 1190,
	0, 0, 1349, 1304, 1348, 0, 1157, 217, 0, 0,
	0, 0, 1320, 1398, 1322, 1403, 0, 1356, 1357, 0,
	82, 1402, 1189, 0, 1408, 1407, 0, 0, 0, 0,
	0, 0, 0, 82, 82, 0, 0, 0, 0, 1381,
	1334, 0, 1151, 0, 1426, 1425, 0, 1431, 0, 0,
	0, 82, 0, 1113, 0, 1042, 1436, 0, 0, 1190,
	1208, 52, 0, 1399, 217, 0, 0, 0, 629, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 1448, 0, 834, 989, 0, 0, 0, 0,
	0, 0, 1265, 1266, 0, 1267, 0, 0, 1269, 1325,
	1271, 1061, 1461, 1459, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 1155, 1156, 1469, 0, 893, 0, 0,
	0, 0, 0, 520, 1467, 0, 1172, 1173, 352, 1174,
	1175, 1480, 1004, 0, 0, 1491, 0, 0, 628, 0,
	0, 1182, 1183, 0, 0, 0, 0, 0, 0, 1330,
	1020, 0, 0, 0, 1262, 0, 0, 1314, 0, 0,
	215, 1264, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 1273, 1274, 0, 0, 1112, 0, 352, 1430,
	585, 0, 0, 0, 0, 1478, 0, 274, 0, 0,
	343, 0, 1288, 1289, 1290, 215, 1293, 215, 215, 0,
	0, 0, 0, 0, 0, 0, 352, 1232, 0, 0,
	0, 544, 0, 547, 0, 0, 1310, 631, 0, 561,
	562, 563, 564, 565, 566, 567, 0, 545, 546, 543,
	352, 549, 548, 558, 559, 551, 552, 553, 554, 555,
	556, 557, 550, 0, 0, 560, 1465, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 1470, 0, 0,
	0, 0, 0, 352, 0, 0, 0, 1263, 0, 0,
	0, 0, 834, 0, 0, 1193, 1195, 0, 1330, 893,
	0, 0, 1341, 0, 341, 0, 0, 0, 0, 457,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1195, 548, 558, 559, 551, 552, 553,
	554, 555, 556, 557, 550, 0, 0, 560, 352, 229,
	352, 1225, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 215, 0, 0, 0, 0, 0, 215, 1388, 1389,
	1390, 1391, 0, 242, 215, 1395, 1396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1404, 1405, 1406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1251, 0, 0, 1256, 1257, 0, 0, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 1336, 1337,
	1338, 1339, 1340, 0, 1432, 221, 1343, 1344, 0, 0,
	0, 1437, 224, 0, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 228, 0, 0, 0,
	0, 0, 467, 0, 1445, 473, 0, 0, 0, 0,
	0, 480, 0, 0, 834, 0, 0, 0, 482, 0,
	0, 0, 0, 0, 0, 0, 1061, 231, 0, 0,
	0, 0, 1284, 241, 0, 0, 0, 0, 352, 0,
	215, 215, 215, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 352, 0, 0, 0, 0, 1492, 1493, 0, 0,
	352, 549, 548, 558, 559, 551, 552, 553, 554, 555,
	556, 557, 550, 0, 0, 560, 235, 225, 226, 0,
	236, 237, 238, 240, 0, 239, 245, 0, 0, 0,
	227, 230, 0, 223, 244, 243, 0, 0, 1350, 1351,
	0, 1352, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 1316, 1316, 1316, 0, 0, 0,
	1225, 0, 0, 0, 622, 0, 632, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	215, 1484, 0, 0, 834, 215, 0, 0, 215, 1283,
	0, 215, 0, 0, 0, 730, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 352,
	352, 0, 0, 678, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 1438, 549, 548,
	558, 559, 551, 552, 553, 554, 555, 556, 557, 550,
	0, 0, 560, 0, 0, 215, 0, 0, 0, 0,
	0, 1447, 0, 0, 730, 0, 0, 0, 0, 0,
	0, 0, 656, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 713, 714, 0, 0, 0, 0, 720,
	0, 0, 341, 0, 1316, 726, 0, 0, 0, 0,
	0, 0, 666, 0, 0, 0, 274, 0, 0, 737,
	0, 274, 274, 0, 0, 274, 274, 274, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 274, 274, 274, 679, 215, 0, 0, 0, 766,
	0, 0, 0, 215, 0, 869, 0, 0, 215, 215,
	0, 0, 215, 877, 730, 0, 692, 695, 696, 697,
	698, 699, 700, 0, 701, 702, 703, 704, 705, 680,
	681, 682, 683, 664, 665, 693, 0, 667, 0, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 684,
	685, 686, 687, 688, 689, 690, 691, 549, 548, 558,
	559, 551, 552, 553, 554, 555, 556, 557, 550, 1277,
	0, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 846,
	0, 0, 215, 215, 0, 215, 215, 0, 0, 215,
	0, 0, 0, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 694, 0, 0, 0, 215, 0, 975, 976,
	0, 215, 0, 0, 0, 0, 730, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	25, 26, 53, 28, 29, 0, 0, 0, 549, 548,
	558, 559, 551, 552, 553, 554, 555, 556, 557, 550,
	0, 0, 560, 44, 0, 0, 0, 0, 30, 49,
	50, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 1276, 0, 0, 274, 963, 964, 39, 967,
	968, 0, 55, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 977, 0, 0, 0, 0,
	0, 835, 215, 215, 215, 215, 215, 0, 0, 0,
	0, 0, 1275, 0, 1056, 0, 0, 215, 0, 0,
	0, 0, 869, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 32, 33, 35, 34, 37, 0,
	51, 549, 548, 558, 559, 551, 552, 553, 554, 555,
	556, 557, 550, 1154, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 45, 46, 0,
	0, 47, 48, 36, 549, 548, 558, 559, 551, 552,
	553, 554, 555, 556, 557, 550, 40, 41, 560, 42,
	43, 549, 548, 558, 559, 551, 552, 553, 554, 555,
	556, 557, 550, 0, 1001, 560, 549, 548, 558, 559,
	551, 552, 553, 554, 555, 556, 557, 550, 0, 0,
	560, 0, 0, 0, 0, 549, 548, 558, 559, 551,
	552, 553, 554, 555, 556, 557, 550, 0, 215, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1249, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1355, 0, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 441, 429, 215, 400, 444,
	378, 392, 452, 393, 394, 422, 364, 408, 144, 390,
	198, 105, 101, 83, 0, 381, 359, 387, 360, 379,
	402, 107, 405, 377, 431, 411, 443, 124, 450, 126,
	416, 0, 166, 135, 0, 0, 404, 433, 406, 427,
	399, 423, 369, 415, 445, 391, 420, 446, 0, 0,
	0, 81, 0, 894, 895, 0, 0, 0, 0, 0,
	98, 0, 418, 440, 389, 419, 421, 358, 417, 0,
	362, 365, 451, 435, 384, 385, 1083, 0, 0, 0,
	0, 0, 0, 403, 407, 424, 397, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 382, 0, 414, 0,
	0, 0, 366, 363, 0, 0, 401, 0, 0, 0,
	368, 0, 383, 425, 0, 357, 113, 147, 428, 218,
	143, 182, 434, 0, 398, 219, 438, 396, 395, 442,
	152, 0, 169, 115, 123, 85, 92, 0, 114, 141,
	157, 161, 432, 380, 388, 102, 386, 159, 146, 181,
	413, 148, 158, 127, 174, 153, 439, 189, 190, 171,
	188, 197, 86, 170, 180, 99, 162, 88, 178, 168,
	133, 119, 120, 87, 0, 156, 106, 111, 104, 142,
	175, 176, 103, 201, 93, 187, 90, 94, 186, 140,
	173, 179, 134, 131, 89, 177, 132, 130, 122, 109,
	116, 150, 129, 151, 117, 137, 136, 138, 0, 361,
	0, 167, 184, 202, 96, 376, 163, 172, 191, 192,
	193, 194, 195, 196, 0, 0, 97, 112, 108, 149,
	139, 95, 118, 164, 121, 128, 155, 200, 145, 160,
	100, 183, 165, 372, 375, 370, 371, 409, 410, 447,
	448, 449, 426, 367, 0, 373, 374, 0, 430, 436,
	437, 412, 84, 91, 125, 199, 154, 110, 185, 441,
	429, 0, 400, 444, 378, 392, 452, 393, 394, 422,
	364, 408, 144, 390, 198, 105, 101, 83, 0, 381,
	359, 387, 360, 379, 402, 107, 405, 377, 431, 411,
	443, 124, 450, 126, 416, 0, 166, 135, 0, 0,
	404, 433, 406, 427, 399, 423, 369, 415, 445, 391,
	420, 446, 0, 0, 0, 81, 0, 894, 895, 0,
	0, 0, 0, 0, 98, 0, 418, 440, 389, 419,
	421, 358, 417, 0, 362, 365, 451, 435, 384, 385,
	0, 0, 0, 0, 0, 0, 0, 403, 407, 424,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	382, 0, 414, 0, 0, 0, 366, 363, 0, 0,
	401, 0, 0, 0, 368, 0, 383, 425, 0, 357,
	113, 147, 428, 218, 143, 182, 434, 0, 398, 219,
	438, 396, 395, 442, 152, 0, 169, 115, 123, 85,
	92, 0, 114, 141, 157, 161, 432, 380, 388, 102,
	386, 159, 146, 181, 413, 148, 158, 127, 174, 153,
	439, 189, 190, 171, 188, 197, 86, 170, 180, 99,
	162, 88, 178, 168, 133, 119, 120, 87, 0, 156,
	106, 111, 104, 142, 175, 176, 103, 201, 93, 187,
	90, 94, 186, 140, 173, 179, 134, 131, 89, 177,
	132, 130, 122, 109, 116, 150, 129, 151, 117, 137,
	136, 138, 0, 361, 0, 167, 184, 202, 96, 376,
	163, 172, 191, 192, 193, 194, 195, 196, 0, 0,
	97, 112, 108, 149, 139, 95, 118, 164, 121, 128,
	155, 200, 145, 160, 100, 183, 165, 372, 375, 370,
	371, 409, 410, 447, 448, 449, 426, 367, 0, 373,
	374, 0, 430, 436, 437, 412, 84, 91, 125, 199,
	154, 110, 185, 441, 429, 0, 400, 444, 378, 392,
	452, 393, 394, 422, 364, 408, 144, 390, 198, 105,
	101, 83, 0, 381, 359, 387, 360, 379, 402, 107,
	405, 377, 431, 411, 443, 124, 450, 126, 416, 0,
	166, 135, 0, 0, 404, 433, 406, 427, 399, 423,
	369, 415, 445, 391, 420, 446, 55, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	418, 440, 389, 419, 421, 358, 417, 0, 362, 365,
	451, 435, 384, 385, 0, 0, 0, 0, 0, 0,
	0, 403, 407, 424, 397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 382, 0, 414, 0, 0, 0,
	366, 363, 0, 0, 401, 0, 0, 0, 368, 0,
	383, 425, 0, 357, 113, 147, 428, 218, 143, 182,
	434, 0, 398, 219, 438, 396, 395, 442, 152, 0,
	169, 115, 123, 85, 92, 0, 114, 141, 157, 161,
	432, 380, 388, 102, 386, 159, 146, 181, 413, 148,
	158, 127, 174, 153, 439, 189, 190, 171, 188, 197,
	86, 170, 180, 99, 162, 88, 178, 168, 133, 119,
	120, 87, 0, 156, 106, 111, 104, 142, 175, 176,
	103, 201, 93, 187, 90, 94, 186, 140, 173, 179,
	134, 131, 89, 177, 132, 130, 122, 109, 116, 150,
	129, 151, 117, 137, 136, 138, 0, 361, 0, 167,
	184, 202, 96, 376, 163, 172, 191, 192, 193, 194,
	195, 196, 0, 0, 97, 112, 108, 149, 139, 95,
	118, 164, 121, 128, 155, 200, 145, 160, 100, 183,
	165, 372, 375, 370, 371, 409, 410, 447, 448, 449,
	426, 367, 0, 373, 374, 0, 430, 436, 437, 412,
	84, 91, 125, 199, 154, 110, 185, 441, 429, 0,
	400, 444, 378, 392, 452, 393, 394, 422, 364, 408,
	144, 390, 198, 105, 101, 83, 0, 381, 359, 387,
	360, 379, 402, 107, 405, 377, 431, 411, 443, 124,
	450, 126, 416, 0, 166, 135, 0, 0, 404, 433,
	406, 427, 399, 423, 369, 415, 445, 391, 420, 446,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 418, 440, 389, 419, 421, 358,
	417, 0, 362, 365, 451, 435, 384, 385, 0, 0,
	0, 0, 0, 0, 0, 403, 407, 424, 397, 0,
	0, 0, 0, 0, 0, 0, 1150, 0, 382, 0,
	414, 0, 0, 0, 366, 363, 0, 0, 401, 0,
	0, 0, 368, 0, 383, 425, 0, 357, 113, 147,
	428, 218, 143, 182, 434, 0, 398, 219, 438, 396,
	395, 442, 152, 0, 169, 115, 123, 85, 92, 0,
	114, 141, 157, 161, 432, 380, 388, 102, 386, 159,
	146, 181, 413, 148, 158, 127, 174, 153, 439, 189,
	190, 171, 188, 197, 86, 170, 180, 99, 162, 88,
	178, 168, 133, 119, 120, 87, 0, 156, 106, 111,
	104, 142, 175, 176, 103, 201, 93, 187, 90, 94,
	186, 140, 173, 179, 134, 131, 89, 177, 132, 130,
	122, 109, 116, 150, 129, 151, 117, 137, 136, 138,
	0, 361, 0, 167, 184, 202, 96, 376, 163, 172,
	191, 192, 193, 194, 195, 196, 0, 0, 97, 112,
	108, 149, 139, 95, 118, 164, 121, 128, 155, 200,
	145, 160, 100, 183, 165, 372, 375, 370, 371, 409,
	410, 447, 448, 449, 426, 367, 0, 373, 374, 0,
	430, 436, 437, 412, 84, 91, 125, 199, 154, 110,
	185, 441, 429, 0, 400, 444, 378, 392, 452, 393,
	394, 422, 364, 408, 144, 390, 198, 105, 101, 83,
	0, 381, 359, 387, 360, 379, 402, 107, 405, 377,
	431, 411, 443, 124, 450, 126, 416, 0, 166, 135,
	0, 0, 404, 433, 406, 427, 399, 423, 369, 415,
	445, 391, 420, 446, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 418, 440,
	389, 419, 421, 358, 417, 0, 362, 365, 451, 435,
	384, 385, 0, 0, 0, 0, 0, 0, 0, 403,
	407, 424, 397, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 382, 0, 414, 0, 0, 0, 366, 363,
	0, 0, 401, 0, 0, 0, 368, 0, 383, 425,
	0, 357, 113, 147, 428, 218, 143, 182, 434, 0,
	398, 219, 438, 396, 395, 442, 152, 0, 169, 115,
	123, 85, 92, 0, 114, 141, 157, 161, 432, 380,
	388, 102, 386, 159, 146, 181, 413, 148, 158, 127,
	174, 153, 439, 189, 190, 171, 188, 197, 86, 170,
	180, 99, 162, 88, 178, 168, 133, 119, 120, 87,
	0, 156, 106, 111, 104, 142, 175, 176, 103, 201,
	93, 187, 90, 94, 186, 140, 173, 179, 134, 131,
	89, 177, 132, 130, 122, 109, 116, 150, 129, 151,
	117, 137, 136, 138, 0, 361, 0, 167, 184, 202,
	96, 376, 163, 172, 191, 192, 193, 194, 195, 196,
	0, 0, 97, 112, 108, 149, 139, 95, 118, 164,
	121, 128, 155, 200, 145, 160, 100, 183, 165, 372,
	375, 370, 371, 409, 410, 447, 448, 449, 426, 367,
	0, 373, 374, 0, 430, 436, 437, 412, 84, 91,
	125, 199, 154, 110, 185, 441, 429, 0, 400, 444,
	378, 392, 452, 393, 394, 422, 364, 408, 144, 390,
	198, 105, 101, 83, 0, 381, 359, 387, 360, 379,
	402, 107, 405, 377, 431, 411, 443, 124, 450, 126,
	416, 0, 166, 135, 0, 0, 404, 433, 406, 427,
	399, 423, 369, 415, 445, 391, 420, 446, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 418, 440, 389, 419, 421, 358, 417, 0,
	362, 365, 451, 435, 384, 385, 0, 0, 0, 0,
	0, 0, 0, 403, 407, 424, 397, 0, 0, 0,
	0, 0, 0, 0, 775, 0, 382, 0, 414, 0,
	0, 0, 366, 363, 0, 0, 401, 0, 0, 0,
	368, 0, 383, 425, 0, 357, 113, 147, 428, 218,
	143, 182, 434, 0, 398, 219, 438, 396, 395, 442,
	152, 0, 169, 115, 123, 85, 92, 0, 114, 141,
	157, 161, 432, 380, 388, 102, 386, 159, 146, 181,
	413, 148, 158, 127, 174, 153, 439, 189, 190, 171,
	188, 197, 86, 170, 180, 99, 162, 88, 178, 168,
	133, 119, 120, 87, 0, 156, 106, 111, 104, 142,
	175, 176, 103, 201, 93, 187, 90, 94, 186, 140,
	173, 179, 134, 131, 89, 177, 132, 130, 122, 109,
	116, 150, 129, 151, 117, 137, 136, 138, 0, 361,
	0, 167, 184, 202, 96, 376, 163, 172, 191, 192,
	193, 194, 195, 196, 0, 0, 97, 112, 108, 149,
	139, 95, 118, 164, 121, 128, 155, 200, 145, 160,
	100, 183, 165, 372, 375, 370, 371, 409, 410, 447,
	448, 449, 426, 367, 0, 373, 374, 0, 430, 436,
	437, 412, 84, 91, 125, 199, 154, 110, 185, 441,
	429, 0, 400, 444, 378, 392, 452, 393, 394, 422,
	364, 408, 144, 390, 198, 105, 101, 83, 0, 381,
	359, 387, 360, 379, 402, 107, 405, 377, 431, 411,
	443, 124, 450, 126, 416, 0, 166, 135, 0, 0,
	404, 433, 406, 427, 399, 423, 369, 415, 445, 391,
	420, 446, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 418, 440, 389, 419,
	421, 358, 417, 0, 362, 365, 451, 435, 384, 385,
	0, 0, 0, 0, 0, 0, 0, 403, 407, 424,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	382, 0, 414, 0, 0, 0, 366, 363, 0, 0,
	401, 0, 0, 0, 368, 0, 383, 425, 0, 357,
	113, 147, 428, 218, 143, 182, 434, 0, 398, 219,
	438, 396, 395, 442, 152, 0, 169, 115, 123, 85,
	92, 0, 114, 141, 157, 161, 432, 380, 388, 102,
	386, 159, 146, 181, 413, 148, 158, 127, 174, 153,
	439, 189, 190, 171, 188, 197, 86, 170, 180, 99,
	162, 88, 178, 168, 133, 119, 120, 87, 0, 156,
	106, 111, 104, 142, 175, 176, 103, 201, 93, 187,
	90, 94, 186, 140, 173, 179, 134, 131, 89, 177,
	132, 130, 122, 109, 116, 150, 129, 151, 117, 137,
	136, 138, 0, 361, 0, 167, 184, 202, 96, 376,
	163, 172, 191, 192, 193, 194, 195, 196, 0, 0,
	97, 112, 108, 149, 139, 95, 118, 164, 121, 128,
	155, 200, 145, 160, 100, 183, 165, 372, 375, 370,
	371, 409, 410, 447, 448, 449, 426, 367, 0, 373,
	374, 0, 430, 436, 437, 412, 84, 91, 125, 199,
	154, 110, 185, 441, 429, 0, 400, 444, 378, 392,
	452, 393, 394, 422, 364, 408, 144, 390, 198, 105,
	101, 83, 0, 381, 359, 387, 360, 379, 402, 107,
	405, 377, 431, 411, 443, 124, 450, 126, 416, 0,
	166, 135, 0, 0, 404, 433, 406, 427, 399, 423,
	369, 415, 445, 391, 420, 446, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	418, 440, 389, 419, 421, 358, 417, 0, 362, 365,
	451, 435, 384, 385, 0, 0, 0, 0, 0, 0,
	0, 403, 407, 424, 397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 382, 0, 414, 0, 0, 0,
	366, 363, 0, 0, 401, 0, 0, 0, 368, 0,
	383, 425, 0, 357, 113, 147, 428, 218, 143, 182,
	434, 0, 398, 219, 438, 396, 395, 442, 152, 0,
	169, 115, 123, 85, 92, 0, 114, 141, 157, 161,
	432, 380, 388, 102, 386, 159, 146, 181, 413, 148,
	158, 127, 174, 153, 439, 189, 190, 171, 188, 197,
	86, 170, 180, 99, 162, 88, 178, 168, 133, 119,
	120, 87, 0, 156, 106, 111, 104, 142, 175, 176,
	103, 201, 93, 187, 90, 94, 186, 140, 173, 179,
	134, 131, 89, 177, 132, 130, 122, 109, 116, 150,
	129, 151, 117, 137, 136, 138, 0, 361, 0, 167,
	184, 202, 96, 376, 163, 172, 191, 192, 193, 194,
	195, 196, 0, 0, 97, 112, 108, 149, 139, 95,
	118, 164, 121, 128, 155, 200, 145, 160, 100, 183,
	165, 372, 375, 370, 371, 409, 410, 447, 448, 449,
	426, 367, 0, 373, 374, 0, 430, 436, 437, 412,
	84, 91, 125, 199, 154, 110, 185, 441, 429, 0,
	400, 444, 378, 392, 452, 393, 394, 422, 364, 408,
	144, 390, 198, 105, 101, 83, 0, 381, 359, 387,
	360, 379, 402, 107, 405, 377, 431, 411, 443, 124,
	450, 126, 416, 0, 166, 135, 0, 0, 404, 433,
	406, 427, 399, 423, 369, 415, 445, 391, 420, 446,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 418, 440, 389, 419, 421, 358,
	417, 0, 362, 365, 451, 435, 384, 385, 0, 0,
	0, 0, 0, 0, 0, 403, 407, 424, 397, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 382, 0,
	414, 0, 0, 0, 366, 363, 0, 0, 401, 0,
	0, 0, 368, 0, 383, 425, 0, 357, 113, 147,
	428, 218, 143, 182, 434, 0, 398, 219, 438, 396,
	395, 442, 152, 0, 169, 115, 123, 85, 92, 0,
	114, 141, 157, 161, 432, 380, 388, 102, 386, 159,
	146, 181, 413, 148, 158, 127, 174, 153, 439, 189,
	190, 171, 188, 197, 86, 170, 180, 99, 162, 88,
	178, 168, 133, 119, 120, 87, 0, 156, 106, 111,
	104, 142, 175, 176, 103, 201, 93, 187, 90, 355,
	186, 140, 173, 179, 134, 131, 89, 177, 132, 130,
	122, 109, 116, 150, 129, 151, 117, 137, 136, 138,
	0, 361, 0, 167, 184, 202, 96, 376, 163, 172,
	191, 192, 193, 194, 195, 196, 0, 0, 97, 112,
	108, 149, 356, 354, 118, 164, 121, 128, 155, 200,
	145, 160, 100, 183, 165, 372, 375, 370, 371, 409,
	410, 447, 448, 449, 426, 367, 0, 373, 374, 0,
	430, 436, 437, 412, 84, 91, 125, 199, 154, 110,
	185, 441, 429, 0, 400, 444, 378, 392, 452, 393,
	394, 422, 364, 408, 144, 390, 198, 105, 101, 83,
	0, 381, 359, 387, 360, 379, 402, 107, 405, 377,
	431, 411, 443, 124, 450, 126, 416, 0, 166, 135,
	0, 0, 404, 433, 406, 427, 399, 423, 369, 415,
	445, 391, 420, 446, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 418, 440,
	389, 419, 421, 358, 417, 0, 362, 365, 451, 435,
	384, 385, 0, 0, 0, 0, 0, 0, 0, 403,
	407, 424, 397, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 382, 0, 414, 0, 0, 0, 366, 363,
	0, 0, 401, 0, 0, 0, 368, 0, 383, 425,
	0, 357, 113, 147, 428, 218, 143, 182, 434, 0,
	398, 219, 438, 396, 395, 442, 152, 0, 169, 115,
	123, 85, 92, 0, 114, 141, 157, 161, 432, 380,
	388, 102, 386, 159, 146, 181, 413, 148, 158, 127,
	174, 153, 439, 189, 190, 171, 188, 197, 86, 170,
	180, 99, 162, 88, 178, 168, 133, 119, 120, 87,
	0, 156, 106, 111, 104, 142, 175, 176, 103, 201,
	93, 187, 90, 94, 186, 140, 173, 179, 134, 131,
	89, 177, 132, 130, 122, 109, 116, 150, 129, 151,
	117, 137, 136, 138, 0, 361, 0, 167, 184, 202,
	96, 376, 163, 172, 191, 192, 193, 194, 195, 196,
	0, 0, 97, 112, 108, 149, 139, 95, 118, 164,
	121, 128, 155, 200, 145, 160, 100, 183, 165, 372,
	375, 370, 371, 409, 410, 447, 448, 449, 426, 367,
	0, 373, 374, 0, 430, 436, 437, 412, 84, 91,
	125, 199, 154, 110, 185, 441, 429, 0, 400, 444,
	378, 392, 452, 393, 394, 422, 364, 408, 144, 390,
	198, 105, 101, 83, 0, 381, 359, 387, 360, 379,
	402, 107, 405, 377, 431, 411, 443, 124, 450, 126,
	416, 0, 166, 135, 0, 0, 404, 433, 406, 427,
	399, 423, 369, 415, 445, 391, 420, 446, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 418, 440, 389, 419, 421, 358, 417, 0,
	362, 365, 451, 435, 384, 385, 0, 0, 0, 0,
	0, 0, 0, 403, 407, 424, 397, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 382, 0, 414, 0,
	0, 0, 366, 363, 0, 0, 401, 0, 0, 0,
	368, 0, 383, 425, 0, 357, 113, 147, 428, 218,
	143, 182, 434, 0, 398, 219, 438, 396, 395, 442,
	152, 0, 169, 115, 123, 85, 92, 0, 114, 141,
	157, 161, 432, 380, 388, 102, 386, 159, 146, 181,
	413, 148, 158, 127, 174, 153, 439, 189, 190, 171,
	188, 197, 86, 170, 643, 99, 162, 88, 178, 168,
	133, 119, 120, 87, 0, 156, 106, 111, 104, 142,
	175, 176, 103, 201, 93, 187, 90, 355, 186, 140,
	173, 179, 134, 131, 89, 177, 132, 130, 122, 109,
	116, 150, 129, 151, 117, 137, 136, 138, 0, 361,
	0, 167, 184, 202, 96, 376, 163, 172, 191, 192,
	193, 194, 195, 196, 0, 0, 97, 112, 108, 149,
	356, 354, 118, 164, 121, 128, 155, 200, 145, 160,
	100, 183, 165, 372, 375, 370, 371, 409, 410, 447,
	448, 449, 426, 367, 0, 373, 374, 0, 430, 436,
	437, 412, 84, 91, 125, 199, 154, 110, 185, 441,
	429, 0, 400, 444, 378, 392, 452, 393, 394, 422,
	364, 408, 144, 390, 198, 105, 101, 83, 0, 381,
	359, 387, 360, 379, 402, 107, 405, 377, 431, 411,
	443, 124, 450, 126, 416, 0, 166, 135, 0, 0,
	404, 433, 406, 427, 399, 423, 369, 415, 445, 391,
	420, 446, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 418, 440, 389, 419,
	421, 358, 417, 0, 362, 365, 451, 435, 384, 385,
	0, 0, 0, 0, 0, 0, 0, 403, 407, 424,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	382, 0, 414, 0, 0, 0, 366, 363, 0, 0,
	401, 0, 0, 0, 368, 0, 383, 425, 0, 357,
	113, 147, 428, 218, 143, 182, 434, 0, 398, 219,
	438, 396, 395, 442, 152, 0, 169, 115, 123, 85,
	92, 0, 114, 141, 157, 161, 432, 380, 388, 102,
	386, 159, 146, 181, 413, 148, 158, 127, 174, 153,
	439, 189, 190, 171, 188, 197, 86, 170, 346, 99,
	162, 88, 178, 168, 133, 119, 120, 87, 0, 156,
	106, 111, 104, 142, 175, 176, 103, 201, 93, 187,
	90, 355, 186, 140, 173, 179, 134, 131, 89, 177,
	132, 130, 122, 109, 116, 150, 129, 151, 117, 137,
	136, 138, 0, 361, 0, 167, 184, 202, 96, 376,
	163, 172, 191, 192, 193, 194, 195, 196, 0, 0,
	97, 112, 108, 149, 356, 354, 349, 348, 121, 128,
	155, 200, 145, 160, 100, 183, 165, 372, 375, 370,
	371, 409, 410, 447, 448, 449, 426, 367, 0, 373,
	374, 0, 430, 436, 437, 412, 84, 91, 125, 199,
	154, 110, 185, 144, 0, 198, 105, 101, 83, 0,
	0, 0, 281, 0, 0, 0, 107, 0, 278, 0,
	0, 0, 124, 321, 126, 0, 0, 166, 135, 0,
	0, 0, 0, 312, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 279, 300, 299, 302,
	303, 304, 305, 0, 0, 98, 301, 306, 307, 308,
	0, 0, 0, 276, 293, 0, 320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 334, 0, 292, 0, 0, 287, 288,
	289, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 147, 0, 218, 143, 182, 1305, 1306, 0,
	219, 0, 0, 332, 0, 152, 0, 169, 115, 123,
	85, 92, 0, 114, 141, 157, 161, 0, 0, 0,
	102, 0, 159, 146, 181, 0, 148, 158, 127, 174,
	153, 0, 189, 190, 171, 188, 197, 86, 170, 180,
	99, 162, 88, 178, 168, 133, 119, 120, 87, 0,
	156, 106, 111, 104, 142, 175, 176, 103, 201, 93,
	187, 90, 94, 186, 140, 173, 179, 134, 131, 89,
	177, 132, 130, 122, 109, 116, 150, 129, 151, 117,
	137, 136, 138, 0, 0, 0, 167, 184, 202, 96,
	0, 163, 172, 191, 192, 193, 194, 195, 196, 0,
	0, 97, 112, 108, 149, 139, 95, 118, 164, 121,
	128, 155, 200, 145, 160, 100, 183, 165, 322, 333,
	328, 329, 326, 327, 325, 324, 323, 335, 314, 315,
	316, 317, 319, 0, 330, 331, 318, 84, 91, 125,
	199, 154, 110, 185, 144, 0, 198, 105, 101, 83,
	0, 0, 0, 281, 0, 0, 0, 107, 0, 278,
	0, 0, 0, 124, 321, 126, 0, 0, 166, 135,
	0, 0, 0, 0, 312, 313, 0, 0, 0, 0,
	0, 0, 885, 0, 55, 0, 0, 279, 300, 299,
	302, 303, 304, 305, 0, 0, 98, 301, 306, 307,
	308, 886, 0, 0, 276, 293, 0, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 291,
	0, 0, 0, 0, 334, 0, 292, 0, 0, 287,
	288, 289, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 147, 0, 218, 143, 182, 0, 0,
	0, 219, 0, 0, 332, 0, 152, 0, 169, 115,
	123, 85, 92, 0, 114, 141, 157, 161, 0, 0,
	0, 102, 0, 159, 146, 181, 0, 148, 158, 127,
	174, 153, 0, 189, 190, 171, 188, 197, 86, 170,
	180, 99, 162, 88, 178, 168, 133, 119, 120, 87,
	0, 156, 106, 111, 104, 142, 175, 176, 103, 201,
	93, 187, 90, 94, 186, 140, 173, 179, 134, 131,
	89, 177, 132, 130, 122, 109, 116, 150, 129, 151,
	117, 137, 136, 138, 0, 0, 0, 167, 184, 202,
	96, 0, 163, 172, 191, 192, 193, 194, 195, 196,
	0, 0, 97, 112, 108, 149, 139, 95, 118, 164,
	121, 128, 155, 200, 145, 160, 100, 183, 165, 322,
	333, 328, 329, 326, 327, 325, 324, 323, 335, 314,
	315, 316, 317, 319, 0, 330, 331, 318, 84, 91,
	125, 199, 154, 110, 185, 144, 0, 198, 105, 101,
	83, 0, 811, 0, 281, 0, 0, 0, 107, 0,
	278, 0, 0, 0, 124, 321, 126, 0, 0, 166,
	135, 0, 0, 0, 0, 312, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 279, 300,
	299, 302, 303, 304, 305, 0, 0, 98, 301, 306,
	307, 308, 0, 0, 0, 276, 293, 0, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	291, 272, 0, 0, 0, 334, 0, 292, 0, 0,
	287, 288, 289, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 147, 0, 218, 143, 182, 0,
	0, 0, 219, 0, 0, 332, 0, 152, 0, 169,
	115, 123, 85, 92, 0, 114, 141, 157, 161, 0,
	0, 0, 102, 0, 159, 146, 181, 0, 148, 158,
	127, 174, 153, 0, 189, 190, 171, 188, 197, 86,
	170, 180, 99, 162, 88, 178, 168, 133, 119, 120,
	87, 0, 156, 106, 111, 104, 142, 175, 176, 103,
	201, 93, 187, 90, 94, 186, 140, 173, 179, 134,
	131, 89, 177, 132, 130, 122, 109, 116, 150, 129,
	151, 117, 137, 136, 138, 0, 0, 0, 167, 184,
	202, 96, 0, 163, 172, 191, 192, 193, 194, 195,
	196, 0, 0, 97, 112, 108, 149, 139, 95, 118,
	164, 121, 128, 155, 200, 145, 160, 100, 183, 165,
	322, 333, 328, 329, 326, 327, 325, 324, 323, 335,
	314, 315, 316, 317, 319, 0, 330, 331, 318, 84,
	91, 125, 199, 154, 110, 185, 144, 0, 198, 105,
	101, 83, 0, 0, 0, 281, 0, 0, 0, 107,
	0, 278, 0, 0, 0, 124, 321, 126, 0, 0,
	166, 135, 0, 0, 0, 0, 312, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 515, 279,
	300, 299, 302, 303, 304, 305, 0, 0, 98, 301,
	306, 307, 308, 0, 0, 0, 276, 293, 0, 320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	290, 291, 0, 0, 0, 0, 334, 0, 292, 0,
	0, 287, 288, 289, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 147, 0, 218, 143, 182,
	0, 0, 0, 219, 0, 0, 332, 0, 152, 0,
	169, 115, 123, 85, 92, 0, 114, 141, 157, 161,
	0, 0, 0, 102, 0, 159, 146, 181, 0, 148,
	158, 127, 174, 153, 0, 189, 190, 171, 188, 197,
	86, 170, 180, 99, 162, 88, 178, 168, 133, 119,
	120, 87, 0, 156, 106, 111, 104, 142, 175, 176,
	103, 201, 93, 187, 90, 94, 186, 140, 173, 179,
	134, 131, 89, 177, 132, 130, 122, 109, 116, 150,
	129, 151, 117, 137, 136, 138, 0, 0, 0, 167,
	184, 202, 96, 0, 163, 172, 191, 192, 193, 194,
	195, 196, 0, 0, 97, 112, 108, 149, 139, 95,
	118, 164, 121, 128, 155, 200, 145, 160, 100, 183,
	165, 322, 333, 328, 329, 326, 327, 325, 324, 323,
	335, 314, 315, 316, 317, 319, 0, 330, 331, 318,
	84, 91, 125, 199, 154, 110, 185, 144, 0, 198,
	105, 101, 83, 0, 0, 0, 281, 0, 0, 0,
	107, 0, 278, 0, 0, 0, 124, 321, 126, 0,
	0, 166, 135, 0, 0, 0, 0, 312, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	279, 300, 299, 302, 303, 304, 305, 0, 0, 98,
	301, 306, 307, 308, 0, 0, 0, 276, 293, 0,
	320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 291, 272, 0, 0, 0, 334, 0, 292,
	0, 0, 287, 288, 289, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 147, 0, 218, 143,
	182, 0, 0, 0, 219, 0, 0, 332, 0, 152,
	0, 169, 115, 123, 85, 92, 0, 114, 141, 157,
	161, 0, 0, 0, 102, 0, 159, 146, 181, 0,
	148, 158, 127, 174, 153, 0, 189, 190, 171, 188,
	197, 86, 170, 180, 99, 162, 88, 178, 168, 133,
	119, 120, 87, 0, 156, 106, 111, 104, 142, 175,
	176, 103, 201, 93, 187, 90, 94, 186, 140, 173,
	179, 134, 131, 89, 177, 132, 130, 122, 109, 116,
	150, 129, 151, 117, 137, 136, 138, 0, 0, 0,
	167, 184, 202, 96, 0, 163, 172, 191, 192, 193,
	194, 195, 196, 0, 0, 97, 112, 108, 149, 139,
	95, 118, 164, 121, 128, 155, 200, 145, 160, 100,
	183, 165, 322, 333, 328, 329, 326, 327, 325, 324,
	323, 335, 314, 315, 316, 317, 319, 0, 330, 331,
	318, 84, 91, 125, 199, 154, 110, 185, 144, 0,
	198, 105, 101, 83, 0, 0, 0, 281, 0, 0,
	0, 107, 0, 278, 0, 0, 0, 124, 321, 126,
	0, 0, 166, 135, 0, 0, 0, 0, 312, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 279, 300, 826, 302, 303, 304, 305, 0, 0,
	98, 301, 306, 307, 308, 0, 0, 0, 276, 293,
	0, 320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 272, 0, 0, 0, 334, 0,
	292, 0, 0, 287, 288, 289, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 147, 0, 218,
	143, 182, 0, 0, 0, 219, 0, 0, 332, 0,
	152, 0, 169, 115, 123, 85, 92, 0, 114, 141,
	157, 161, 0, 0, 0, 102, 0, 159, 146, 181,
	0, 148, 158, 127, 174, 153, 0, 189, 190, 171,
	188, 197, 86, 170, 180, 99, 162, 88, 178, 168,
	133, 119, 120, 87, 0, 156, 106, 111, 104, 142,
	175, 176, 103, 201, 93, 187, 90, 94, 186, 140,
	173, 179, 134, 131, 89, 177, 132, 130, 122, 109,
	116, 150, 129, 151, 117, 137, 136, 138, 0, 0,
	0, 167, 184, 202, 96, 0, 163, 172, 191, 192,
	193, 194, 195, 196, 0, 0, 97, 112, 108, 149,
	139, 95, 118, 164, 121, 128, 155, 200, 145, 160,
	100, 183, 165, 322, 333, 328, 329, 326, 327, 325,
	324, 323, 335, 314, 315, 316, 317, 319, 0, 330,
	331, 318, 84, 91, 125, 199, 154, 110, 185, 144,
	0, 198, 105, 101, 83, 0, 0, 0, 281, 0,
	0, 0, 107, 0, 278, 0, 0, 0, 124, 321,
	126, 0, 0, 166, 135, 0, 0, 0, 0, 312,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 279, 300, 823, 302, 303, 304, 305, 0,
	0, 98, 301, 306, 307, 308, 0, 0, 0, 276,
	293, 0, 320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 291, 272, 0, 0, 0, 334,
	0, 292, 0, 0, 287, 288, 289, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 147, 0,
	218, 143, 182, 0, 0, 0, 219, 0, 0, 332,
	0, 152, 0, 169, 115, 123, 85, 92, 0, 114,
	141, 157, 161, 0, 0, 0, 102, 0, 159, 146,
	181, 0, 148, 158, 127, 174, 153, 0, 189, 190,
	171, 188, 197, 86, 170, 180, 99, 162, 88, 178,
	168, 133, 119, 120, 87, 0, 156, 106, 111, 104,
	142, 175, 176, 103, 201, 93, 187, 90, 94, 186,
	140, 173, 179, 134, 131, 89, 177, 132, 130, 122,
	109, 116, 150, 129, 151, 117, 137, 136, 138, 0,
	0, 0, 167, 184, 202, 96, 0, 163, 172, 191,
	192, 193, 194, 195, 196, 0, 0, 97, 112, 108,
	149, 139, 95, 118, 164, 121, 128, 155, 200, 145,
	160, 100, 183, 165, 322, 333, 328, 329, 326, 327,
	325, 324, 323, 335, 314, 315, 316, 317, 319, 25,
	330, 331, 318, 84, 91, 125, 199, 154, 110, 185,
	0, 144, 0, 198, 105, 101, 83, 0, 0, 0,
	281, 0, 0, 0, 107, 0, 278, 0, 0, 0,
	124, 321, 126, 0, 0, 166, 135, 0, 0, 0,
	0, 312, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 279, 300, 299, 302, 303, 304,
	305, 0, 0, 98, 301, 306, 307, 308, 0, 0,
	0, 276, 293, 0, 320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 291, 0, 0, 0,
	0, 334, 0, 292, 0, 0, 287, 288, 289, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	147, 0, 218, 143, 182, 0, 0, 0, 219, 0,
	0, 332, 0, 152, 0, 169, 115, 123, 85, 92,
	0, 114, 141, 157, 161, 0, 0, 0, 102, 0,
	159, 146, 181, 0, 148, 158, 127, 174, 153, 0,
	189, 190, 171, 188, 197, 86, 170, 180, 99, 162,
	88, 178, 168, 133, 119, 120, 87, 0, 156, 106,
	111, 104, 142, 175, 176, 103, 201, 93, 187, 90,
	94, 186, 140, 173, 179, 134, 131, 89, 177, 132,
	130, 122, 109, 116, 150, 129, 151, 117, 137, 136,
	138, 0, 0, 0, 167, 184, 202, 96, 0, 163,
	172, 191, 192, 193, 194, 195, 196, 0, 0, 97,
	112, 108, 149, 139, 95, 118, 164, 121, 128, 155,
	200, 145, 160, 100, 183, 165, 322, 333, 328, 329,
	326, 327, 325, 324, 323, 335, 314, 315, 316, 317,
	319, 0, 330, 331, 318, 84, 91, 125, 199, 154,
	110, 185, 144, 0, 198, 105, 101, 83, 0, 0,
	0, 281, 0, 0, 0, 107, 0, 278, 0, 0,
	0, 124, 321, 126, 0, 0, 166, 135, 0, 0,
	0, 0, 312, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 279, 300, 299, 302, 303,
	304, 305, 0, 0, 98, 301, 306, 307, 308, 0,
	0, 0, 276, 293, 0, 320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 290, 291, 0, 0,
	0, 0, 334, 0, 292, 0, 0, 287, 288, 289,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 147, 0, 218, 143, 182, 0, 0, 0, 219,
	0, 0, 332, 0, 152, 0, 169, 115, 123, 85,
	92, 0, 114, 141, 157, 161, 0, 0, 0, 102,
	0, 159, 146, 181, 0, 148, 158, 127, 174, 153,
	0, 189, 190, 171, 188, 197, 86, 170, 180, 99,
	162, 88, 178, 168, 133, 119, 120, 87, 0, 156,
	106, 111, 104, 142, 175, 176, 103, 201, 93, 187,
	90, 94, 186, 140, 173, 179, 134, 131, 89, 177,
	132, 130, 122, 109, 116, 150, 129, 151, 117, 137,
	136, 138, 0, 0, 0, 167, 184, 202, 96, 0,
	163, 172, 191, 192, 193, 194, 195, 196, 0, 0,
	97, 112, 108, 149, 139, 95, 118, 164, 121, 128,
	155, 200, 145, 160, 100, 183, 165, 322, 333, 328,
	329, 326, 327, 325, 324, 323, 335, 314, 315, 316,
	317, 319, 0, 330, 331, 318, 84, 91, 125, 199,
	154, 110, 185, 144, 0, 198, 105, 101, 83, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 124, 321, 126, 0, 0, 166, 135, 0,
	0, 0, 0, 312, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 279, 300, 299, 302,
	303, 304, 305, 0, 0, 98, 301, 306, 307, 308,
	0, 0, 0, 0, 293, 0, 320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 334, 0, 292, 0, 0, 287, 288,
	289, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 147, 0, 218, 143, 182, 0, 0, 0,
	219, 0, 0, 332, 0, 152, 0, 169, 115, 123,
	85, 92, 0, 114, 141, 157, 161, 0, 0, 0,
	102, 0, 159, 146, 181, 1485, 148, 158, 127, 174,
	153, 0, 189, 190, 171, 188, 197, 86, 170, 180,
	99, 162, 88, 178, 168, 133, 119, 120, 87, 0,
	156, 106, 111, 104, 142, 175, 176, 103, 201, 93,
	187, 90, 94, 186, 140, 173, 179, 134, 131, 89,
	177, 132, 130, 122, 109, 116, 150, 129, 151, 117,
	137, 136, 138, 0, 0, 0, 167, 184, 202, 96,
	0, 163, 172, 191, 192, 193, 194, 195, 196, 0,
	0, 97, 112, 108, 149, 139, 95, 118, 164, 121,
	128, 155, 200, 145, 160, 100, 183, 165, 322, 333,
	328, 329, 326, 327, 325, 324, 323, 335, 314, 315,
	316, 317, 319, 0, 330, 331, 318, 84, 91, 125,
	199, 154, 110, 185, 144, 0, 198, 105, 101, 83,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 124, 321, 126, 0, 0, 166, 135,
	0, 0, 0, 0, 312, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 515, 279, 300, 299,
	302, 303, 304, 305, 0, 0, 98, 301, 306, 307,
	308, 0, 0, 0, 0, 293, 0, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 291,
	0, 0, 0, 0, 334, 0, 292, 0, 0, 287,
	288, 289, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 147, 0, 218, 143, 182, 0, 0,
	0, 219, 0, 0, 332, 0, 152, 0, 169, 115,
	123, 85, 92, 0, 114, 141, 157, 161, 0, 0,
	0, 102, 0, 159, 146, 181, 0, 148, 158, 127,
	174, 153, 0, 189, 190, 171, 188, 197, 86, 170,
	180, 99, 162, 88, 178, 168, 133, 119, 120, 87,
	0, 156, 106, 111, 104, 142, 175, 176, 103, 201,
	93, 187, 90, 94, 186, 140, 173, 179, 134, 131,
	89, 177, 132, 130, 122, 109, 116, 150, 129, 151,
	117, 137, 136, 138, 0, 0, 0, 167, 184, 202,
	96, 0, 163, 172, 191, 192, 193, 194, 195, 196,
	0, 0, 97, 112, 108, 149, 139, 95, 118, 164,
	121, 128, 155, 200, 145, 160, 100, 183, 165, 322,
	333, 328, 329, 326, 327, 325, 324, 323, 335, 314,
	315, 316, 317, 319, 0, 330, 331, 318, 84, 91,
	125, 199, 154, 110, 185, 144, 0, 198, 105, 101,
	83, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 124, 321, 126, 0, 0, 166,
	135, 0, 0, 0, 0, 312, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 279, 300,
	299, 302, 303, 304, 305, 0, 0, 98, 301, 306,
	307, 308, 0, 0, 0, 0, 293, 0, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 334, 0, 292, 0, 0,
	287, 288, 289, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 147, 0, 218, 143, 182, 0,
	0, 0, 219, 0, 0, 332, 0, 152, 0, 169,
	115, 123, 85, 92, 0, 114, 141, 157, 161, 0,
	0, 0, 102, 0, 159, 146, 181, 0, 148, 158,
	127, 174, 153, 0, 189, 190, 171, 188, 197, 86,
	170, 180, 99, 162, 88, 178, 168, 133, 119, 120,
	87, 0, 156, 106, 111, 104, 142, 175, 176, 103,
	201, 93, 187, 90, 94, 186, 140, 173, 179, 134,
	131, 89, 177, 132, 130, 122, 109, 116, 150, 129,
	151, 117, 137, 136, 138, 0, 0, 0, 167, 184,
	202, 96, 0, 163, 172, 191, 192, 193, 194, 195,
	196, 0, 0, 97, 112, 108, 149, 139, 95, 118,
	164, 121, 128, 155, 200, 145, 160, 100, 183, 165,
	322, 333, 328, 329, 326, 327, 325, 324, 323, 335,
	314, 315, 316, 317, 319, 0, 330, 331, 318, 84,
	91, 125, 199, 154, 110, 185, 144, 0, 198, 105,
	101, 83, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 124, 0, 126, 0, 0,
	166, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 548, 558, 559,
	551, 552, 553, 554, 555, 556, 557, 550, 0, 0,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 147, 0, 218, 143, 182,
	0, 0, 0, 219, 0, 0, 0, 0, 152, 0,
	169, 115, 123, 85, 92, 0, 114, 141, 157, 161,
	0, 0, 0, 102, 0, 159, 146, 181, 0, 148,
	158, 127, 174, 153, 0, 189, 190, 171, 188, 197,
	86, 170, 180, 99, 162, 88, 178, 168, 133, 119,
	120, 87, 0, 156, 106, 111, 104, 142, 175, 176,
	103, 201, 93, 187, 90, 94, 186, 140, 173, 179,
	134, 131, 89, 177, 132, 130, 122, 109, 116, 150,
	129, 151, 117, 137, 136, 138, 0, 0, 0, 167,
	184, 202, 96, 0, 163, 172, 191, 192, 193, 194,
	195, 196, 0, 0, 97, 112, 108, 149, 139, 95,
	118, 164, 121, 128, 155, 200, 145, 160, 100, 183,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 91, 125, 199, 154, 110, 185, 144, 0, 198,
	105, 101, 83, 0, 0, 537, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 124, 0, 126, 0,
	0, 166, 135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 539, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 147, 0, 218, 143,
	182, 0, 0, 0, 219, 0, 0, 0, 0, 152,
	0, 169, 115, 123, 85, 92, 0, 114, 141, 157,
	161, 0, 0, 0, 102, 0, 159, 146, 181, 0,
	148, 158, 127, 174, 153, 0, 189, 190, 171, 188,
	197, 86, 170, 180, 99, 162, 88, 178, 168, 133,
	119, 120, 87, 0, 156, 106, 111, 104, 142, 175,
	176, 103, 201, 93, 187, 90, 94, 186, 140, 173,
	179, 134, 131, 89, 177, 132, 130, 122, 109, 116,
	150, 129, 151, 117, 137, 136, 138, 0, 0, 0,
	167, 184, 202, 96, 0, 163, 172, 191, 192, 193,
	194, 195, 196, 0, 0, 97, 112, 108, 149, 139,
	95, 118, 164, 121, 128, 155, 200, 145, 160, 100,
	183, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 198, 105, 101,
	83, 84, 91, 125, 199, 154, 110, 185, 107, 0,
	0, 0, 0, 0, 124, 0, 126, 0, 0, 166,
	135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 147, 77, 74, 143, 182, 78,
	0, 0, 73, 0, 0, 0, 79, 152, 0, 169,
	115, 123, 85, 92, 0, 114, 141, 157, 161, 0,
	0, 0, 102, 0, 159, 146, 181, 0, 148, 158,
	127, 174, 153, 0, 189, 190, 171, 188, 197, 86,
	170, 180, 99, 162, 88, 178, 168, 133, 119, 120,
	87, 0, 156, 106, 111, 104, 142, 175, 176, 103,
	201, 93, 187, 90, 94, 186, 140, 173, 179, 134,
	131, 89, 177, 132, 130, 122, 109, 116, 150, 129,
	151, 117, 137, 136, 138, 0, 0, 0, 167, 184,
	202, 96, 0, 163, 172, 191, 192, 193, 194, 195,
	196, 0, 0, 97, 112, 108, 149, 139, 95, 118,
	164, 121, 128, 155, 200, 145, 160, 100, 183, 165,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	91, 125, 199, 154, 110, 185, 144, 0, 198, 105,
	101, 83, 0, 0, 868, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 124, 0, 126, 0, 0,
	166, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 870, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 147, 0, 218, 143, 182,
	0, 0, 0, 219, 0, 0, 0, 0, 152, 0,
	169, 115, 123, 85, 92, 0, 114, 141, 157, 161,
	0, 0, 0, 102, 0, 159, 146, 181, 0, 148,
	158, 127, 174, 153, 0, 189, 190, 171, 188, 197,
	86, 170, 180, 99, 162, 88, 178, 168, 133, 119,
	120, 87, 0, 156, 106, 111, 104, 142, 175, 176,
	103, 201, 93, 187, 90, 94, 186, 140, 173, 179,
	134, 131, 89, 177, 132, 130, 122, 109, 116, 150,
	129, 151, 117, 137, 136, 138, 0, 0, 0, 167,
	184, 202, 96, 0, 163, 172, 191, 192, 193, 194,
	195, 196, 0, 0, 97, 112, 108, 149, 139, 95,
	118, 164, 121, 128, 155, 200, 145, 160, 100, 183,
	165, 0, 25, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 198, 105, 101, 83,
	84, 91, 125, 199, 154, 110, 185, 107, 0, 0,
	0, 0, 0, 124, 0, 126, 0, 0, 166, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 147, 0, 218, 143, 182, 0, 0,
	0, 219, 0, 0, 0, 0, 152, 0, 169, 115,
	123, 85, 92, 0, 114, 141, 157, 161, 0, 0,
	0, 102, 0, 159, 146, 181, 0, 148, 158, 127,
	174, 153, 0, 189, 190, 171, 188, 197, 86, 170,
	180, 99, 162, 88, 178, 168, 133, 119, 120, 87,
	0, 156, 106, 111, 104, 142, 175, 176, 103, 201,
	93, 187, 90, 94, 186, 140, 173, 179, 134, 131,
	89, 177, 132, 130, 122, 109, 116, 150, 129, 151,
	117, 137, 136, 138, 0, 0, 0, 167, 184, 202,
	96, 0, 163, 172, 191, 192, 193, 194, 195, 196,
	0, 0, 97, 112, 108, 149, 139, 95, 118, 164,
	121, 128, 155, 200, 145, 160, 100, 183, 165, 0,
	25, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 198, 105, 101, 83, 84, 91,
	125, 199, 154, 110, 185, 107, 0, 0, 0, 0,
	0, 124, 0, 126, 0, 0, 166, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 630, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 147, 0, 218, 143, 182, 0, 0, 0, 219,
	0, 0, 0, 0, 152, 0, 169, 115, 123, 85,
	92, 0, 114, 141, 157, 161, 0, 0, 0, 102,
	0, 159, 146, 181, 0, 148, 158, 127, 174, 153,
	0, 189, 190, 171, 188, 197, 86, 170, 180, 99,
	162, 88, 178, 168, 133, 119, 120, 87, 0, 156,
	106, 111, 104, 142, 175, 176, 103, 201, 93, 187,
	90, 94, 186, 140, 173, 179, 134, 131, 89, 177,
	132, 130, 122, 109, 116, 150, 129, 151, 117, 137,
	136, 138, 0, 0, 0, 167, 184, 202, 96, 0,
	163, 172, 191, 192, 193, 194, 195, 196, 0, 0,
	97, 112, 108, 149, 139, 95, 118, 164, 121, 128,
	155, 200, 145, 160, 100, 183, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 91, 125, 199,
	154, 110, 185, 144, 0, 198, 105, 101, 83, 0,
	0, 868, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 124, 0, 126, 0, 0, 166, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 870, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 147, 0, 218, 143, 182, 0, 0, 0,
	219, 0, 0, 0, 0, 152, 0, 169, 115, 123,
	85, 92, 0, 114, 141, 157, 161, 0, 0, 0,
	102, 0, 159, 146, 181, 0, 866, 158, 127, 174,
	153, 0, 189, 190, 171, 188, 197, 86, 170, 180,
	99, 162, 88, 178, 168, 133, 119, 120, 87, 0,
	156, 106, 111, 104, 142, 175, 176, 103, 201, 93,
	187, 90, 94, 186, 140, 173, 179, 134, 131, 89,
	177, 132, 130, 122, 109, 116, 150, 129, 151, 117,
	137, 136, 138, 0, 0, 0, 167, 184, 202, 96,
	0, 163, 172, 191, 192, 193, 194, 195, 196, 0,
	0, 97, 112, 108, 149, 139, 95, 118, 164, 121,
	128, 155, 200, 145, 160, 100, 183, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 198, 105, 101, 83, 84, 91, 125,
	199, 154, 110, 185, 107, 0, 0, 0, 0, 0,
	124, 0, 126, 0, 0, 166, 135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 762, 0, 0,
	763, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	147, 0, 218, 143, 182, 0, 0, 0, 219, 0,
	0, 0, 0, 152, 0, 169, 115, 123, 85, 92,
	0, 114, 141, 157, 161, 0, 0, 0, 102, 0,
	159, 146, 181, 0, 148, 158, 127, 174, 153, 0,
	189, 190, 171, 188, 197, 86, 170, 180, 99, 162,
	88, 178, 168, 133, 119, 120, 87, 0, 156, 106,
	111, 104, 142, 175, 176, 103, 201, 93, 187, 90,
	94, 186, 140, 173, 179, 134, 131, 89, 177, 132,
	130, 122, 109, 116, 150, 129, 151, 117, 137, 136,
	138, 0, 0, 0, 167, 184, 202, 96, 0, 163,
	172, 191, 192, 193, 194, 195, 196, 0, 0, 97,
	112, 108, 149, 139, 95, 118, 164, 121, 128, 155,
	200, 145, 160, 100, 183, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 198, 105, 101, 83, 84, 91, 125, 199, 154,
	110, 185, 107, 0, 652, 0, 0, 0, 124, 0,
	126, 0, 0, 166, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 651, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 147, 0,
	218, 143, 182, 0, 0, 0, 219, 0, 0, 0,
	0, 152, 0, 169, 115, 123, 85, 92, 0, 114,
	141, 157, 161, 0, 0, 0, 102, 0, 159, 146,
	181, 0, 148, 158, 127, 174, 153, 0, 189, 190,
	171, 188, 197, 86, 170, 180, 99, 162, 88, 178,
	168, 133, 119, 120, 87, 0, 156, 106, 111, 104,
	142, 175, 176, 103, 201, 93, 187, 90, 94, 186,
	140, 173, 179, 134, 131, 89, 177, 132, 130, 122,
	109, 116, 150, 129, 151, 117, 137, 136, 138, 0,
	0, 0, 167, 184, 202, 96, 0, 163, 172, 191,
	192, 193, 194, 195, 196, 0, 0, 97, 112, 108,
	149, 139, 95, 118, 164, 121, 128, 155, 200, 145,
	160, 100, 183, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 198,
	105, 101, 83, 84, 91, 125, 199, 154, 110, 185,
	107, 0, 0, 0, 0, 0, 124, 0, 126, 0,
	0, 166, 135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	630, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 147, 0, 218, 143,
	182, 0, 0, 0, 219, 0, 0, 0, 0, 152,
	0, 169, 115, 123, 85, 92, 0, 114, 141, 157,
	161, 0, 0, 0, 102, 0, 159, 146, 181, 0,
	148, 158, 127, 174, 153, 0, 189, 190, 171, 188,
	197, 86, 170, 180, 99, 162, 88, 178, 168, 133,
	119, 120, 87, 0, 156, 106, 111, 104, 142, 175,
	176, 103, 201, 93, 187, 90, 94, 186, 140, 173,
	179, 134, 131, 89, 177, 132, 130, 122, 109, 116,
	150, 129, 151, 117, 137, 136, 138, 0, 0, 0,
	167, 184, 202, 96, 0, 163, 172, 191, 192, 193,
	194, 195, 196, 0, 0, 97, 112, 108, 149, 139,
	95, 118, 164, 121, 128, 155, 200, 145, 160, 100,
	183, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 198, 105, 101,
	83, 84, 91, 125, 199, 154, 110, 185, 107, 0,
	0, 0, 0, 0, 124, 0, 126, 0, 0, 166,
	135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	870, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 147, 0, 218, 143, 182, 0,
	0, 0, 219, 0, 0, 0, 0, 152, 0, 169,
	115, 123, 85, 92, 0, 114, 141, 157, 161, 0,
	0, 0, 102, 0, 159, 146, 181, 0, 148, 158,
	127, 174, 153, 0, 189, 190, 171, 188, 197, 86,
	170, 180, 99, 162, 88, 178, 168, 133, 119, 120,
	87, 0, 156, 106, 111, 104, 142, 175, 176, 103,
	201, 93, 187, 90, 94, 186, 140, 173, 179, 134,
	131, 89, 177, 132, 130, 122, 109, 116, 150, 129,
	151, 117, 137, 136, 138, 0, 0, 0, 167, 184,
	202, 96, 0, 163, 172, 191, 192, 193, 194, 195,
	196, 0, 0, 97, 112, 108, 149, 139, 95, 118,
	164, 121, 128, 155, 200, 145, 160, 100, 183, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 198, 105, 101, 83, 84,
	91, 125, 199, 154, 110, 185, 107, 0, 0, 0,
	0, 0, 124, 0, 126, 0, 0, 166, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 539, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 147, 0, 218, 143, 182, 0, 0, 0,
	219, 0, 0, 0, 0, 152, 0, 169, 115, 123,
	85, 92, 0, 114, 141, 157, 161, 0, 0, 0,
	102, 0, 159, 146, 181, 0, 148, 158, 127, 174,
	153, 0, 189, 190, 171, 188, 197, 86, 170, 180,
	99, 162, 88, 178, 168, 133, 119, 120, 87, 0,
	156, 106, 111, 104, 142, 175, 176, 103, 201, 93,
	187, 90, 94, 186, 140, 173, 179, 134, 131, 89,
	177, 132, 130, 122, 109, 116, 150, 129, 151, 117,
	137, 136, 138, 0, 0, 0, 167, 184, 202, 96,
	0, 163, 172, 191, 192, 193, 194, 195, 196, 0,
	0, 97, 112, 108, 149, 139, 95, 118, 164, 121,
	128, 155, 200, 145, 160, 100, 183, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 91, 125,
	199, 154, 110, 185, 144, 0, 198, 105, 101, 83,
	0, 0, 0, 0, 0, 0, 621, 107, 0, 0,
	0, 0, 0, 124, 0, 126, 0, 0, 166, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 147, 0, 218, 143, 182, 0, 0,
	0, 219, 0, 0, 0, 0, 152, 0, 169, 115,
	123, 85, 92, 0, 114, 141, 157, 161, 0, 0,
	0, 102, 0, 159, 146, 181, 0, 148, 158, 127,
	174, 153, 0, 189, 190, 171, 188, 197, 86, 170,
	180, 99, 162, 88, 178, 168, 133, 119, 120, 87,
	0, 156, 106, 111, 104, 142, 175, 176, 103, 201,
	93, 187, 90, 94, 186, 140, 173, 179, 134, 131,
	89, 177, 132, 130, 122, 109, 116, 150, 129, 151,
	117, 137, 136, 138, 0, 0, 0, 167, 184, 202,
	96, 0, 163, 172, 191, 192, 193, 194, 195, 196,
	0, 0, 97, 112, 108, 149, 139, 95, 118, 164,
	121, 128, 155, 200, 145, 160, 100, 183, 165, 0,
	0, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	0, 0, 144, 0, 198, 105, 101, 83, 84, 91,
	125, 199, 154, 110, 185, 107, 0, 0, 0, 0,
	0, 124, 0, 126, 0, 0, 166, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 147, 0, 218, 143, 182, 0, 0, 0, 219,
	0, 0, 0, 0, 152, 0, 169, 115, 123, 85,
	92, 0, 114, 141, 157, 161, 0, 0, 0, 102,
	0, 159, 146, 181, 0, 148, 158, 127, 174, 153,
	0, 189, 190, 171, 188, 197, 86, 170, 180, 99,
	162, 88, 178, 168, 133, 119, 120, 87, 0, 156,
	106, 111, 104, 142, 175, 176, 103, 201, 93, 187,
	90, 94, 186, 140, 173, 179, 134, 131, 89, 177,
	132, 130, 122, 109, 116, 150, 129, 151, 117, 137,
	136, 138, 0, 0, 0, 167, 184, 202, 96, 0,
	163, 172, 191, 192, 193, 194, 195, 196, 0, 0,
	97, 112, 108, 149, 139, 95, 118, 164, 121, 128,
	155, 200, 145, 160, 100, 183, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 198, 105, 101, 83, 84, 91, 125, 199,
	154, 110, 185, 107, 0, 0, 0, 0, 0, 124,
	0, 126, 0, 0, 166, 135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 147,
	0, 218, 143, 182, 213, 0, 0, 219, 0, 0,
	0, 0, 152, 0, 169, 115, 123, 85, 92, 0,
	114, 141, 157, 161, 0, 0, 0, 102, 0, 159,
	146, 181, 0, 148, 158, 127, 174, 153, 0, 189,
	190, 171, 188, 197, 86, 170, 180, 99, 162, 88,
	178, 168, 133, 119, 120, 87, 0, 156, 106, 111,
	104, 142, 175, 176, 103, 201, 93, 187, 90, 94,
	186, 140, 173, 179, 134, 131, 89, 177, 132, 130,
	122, 109, 116, 150, 129, 151, 117, 137, 136, 138,
	0, 0, 0, 167, 184, 202, 96, 0, 163, 172,
	191, 192, 193, 194, 195, 196, 0, 0, 97, 112,
	108, 149, 139, 95, 118, 164, 121, 128, 155, 200,
	145, 160, 100, 183, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	198, 105, 101, 83, 84, 91, 125, 199, 154, 110,
	185, 107, 0, 0, 0, 0, 0, 124, 0, 126,
	0, 0, 166, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 147, 0, 218,
	143, 182, 0, 0, 0, 219, 0, 0, 0, 0,
	152, 0, 169, 115, 123, 85, 92, 0, 114, 141,
	157, 161, 0, 0, 0, 102, 0, 159, 146, 181,
	0, 148, 158, 127, 174, 153, 0, 189, 190, 171,
	188, 197, 86, 170, 180, 99, 162, 88, 178, 168,
	133, 119, 120, 87, 0, 156, 106, 111, 104, 142,
	175, 176, 103, 201, 93, 187, 90, 94, 186, 140,
	173, 179, 134, 131, 89, 177, 132, 130, 122, 109,
	116, 150, 129, 151, 117, 137, 136, 138, 0, 0,
	0, 167, 184, 202, 96, 0, 163, 172, 191, 192,
	193, 194, 195, 196, 0, 0, 97, 112, 108, 149,
	139, 95, 118, 164, 121, 128, 155, 200, 145, 160,
	100, 183, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 198, 105,
	101, 83, 84, 91, 125, 199, 154, 110, 185, 107,
	0, 0, 0, 0, 0, 124, 0, 126, 0, 0,
	166, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 147, 0, 218, 143, 182,
	0, 0, 0, 219, 0, 0, 0, 0, 152, 0,
	169, 115, 123, 85, 92, 0, 114, 141, 157, 161,
	0, 0, 0, 102, 0, 159, 146, 181, 0, 148,
	158, 127, 174, 153, 0, 189, 190, 171, 188, 197,
	86, 170, 180, 99, 162, 88, 178, 168, 133, 119,
	120, 87, 0, 156, 106, 111, 104, 142, 175, 176,
	103, 201, 93, 187, 90, 94, 186, 140, 173, 179,
	134, 131, 89, 177, 132, 130, 122, 109, 116, 150,
	129, 151, 117, 137, 136, 138, 0, 0, 0, 167,
	184, 202, 96, 0, 163, 172, 191, 192, 193, 194,
	195, 196, 0, 0, 97, 112, 108, 149, 139, 95,
	118, 164, 121, 128, 155, 200, 145, 160, 100, 183,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 198, 105, 101, 83,
	84, 91, 125, 199, 154, 110, 185, 107, 0, 0,
	0, 0, 0, 124, 0, 126, 0, 0, 166, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 147, 0, 218, 143, 182, 0, 0,
	0, 219, 0, 0, 0, 0, 152, 0, 169, 115,
	123, 85, 92, 0, 114, 141, 157, 161, 0, 0,
	0, 102, 0, 159, 146, 181, 0, 148, 158, 127,
	174, 153, 0, 189, 190, 171, 188, 197, 86, 170,
	180, 99, 162, 88, 178, 168, 133, 119, 120, 87,
	0, 156, 106, 111, 104, 142, 175, 176, 103, 201,
	93, 187, 90, 94, 186, 140, 173, 179, 134, 131,
	89, 177, 132, 130, 122, 109, 116, 150, 129, 151,
	117, 137, 136, 138, 0, 0, 0, 167, 184, 202,
	96, 0, 163, 172, 191, 192, 193, 194, 195, 196,
	0, 0, 97, 112, 108, 149, 139, 95, 118, 164,
	121, 128, 155, 200, 145, 160, 100, 183, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 91,
	125, 199, 154, 110, 185,
}
var yyPact = [...]int{

	2234, -1000, -1000, -196, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1017, 1060, -1000, -1000, -1000, -1000, -1000,
	-1000, 306, 9797, 34, 136, -6, 12812, 134, 1632, 13308,
	-1000, -1, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -88,
	-89, -1000, 772, -1000, -1000, -1000, 2234, 1011, 1014, 828,
	982, 916, -1000, 7199, 79, 79, 12564, 5894, -1000, -1000,
	307, 13308, 103, 13308, 13308, -153, 75, 75, 75, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 119, 13308, 236, -1000, 13308, 74, 638,
	74, 74, 74, 13308, -1000, 192, -1000, -1000, -1000, -1000,
	13308, 612, 944, 3428, 52, 3428, 3428, -1000, 3428, 3428,
	-1000, 3428, 5, 3428, -69, 1026, -1000, -1000, -1000, -1000,
	-36, -1000, 3428, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 534, -1000, 954, 8244,
	8244, 1017, -1000, 772, -1000, -1000, -1000, 946, -1000, -1000,
	356, 1047, -1000, 9549, 190, -1000, 8244, 1483, 799, -1000,
	-1000, 799, -1000, -1000, 153, -1000, -1000, 9027, 9027, 9027,
	9027, 9027, 9027, 9027, 9027, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 799,
	-1000, 7983, 799, 799, 799, 799, 799, 799, 799, 799,
	8244, 799, 799, 799, 799, 799, 799, 799, 799, 799,
	799, 799, 799, 799, 799, 799, 12316, 11559, 13308, 797,
	690, -1000, -1000, 180, 778, 5620, -127, -1000, -1000, -1000,
	296, 11311, -1000, -1000, -1000, 943, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 671, 13308, -1000, 1939, -1000, 610, 3428,
	140, 90, 604, 337, 588, 13308, 13308, 3428, 12, 44,
	112, 13308, 787, 86, 13308, 974, 847, 13308, 577, 576,
	-1000, 5346, -1000, 3428, 3428, -1000, -1000, -1000, 3428, 3428,
	3428, 13308, 3428, 3428, -1000, -1000, -1000, -1000, -1000, 3428,
	3428, -1000, 1046, 336, -1000, -1000, -1000, -1000, 8244, -1000,
	843, -1000, -1000, -1000, -1000, -1000, -1000, 1055, 238, 525,
	179, 779, -1000, 490, 1011, 534, 916, 11063, 837, -1000,
	-1000, 13308, -1000, 8244, 8244, 461, -1000, 12055, -1000, -1000,
	4250, 260, 9027, 419, 355, 9027, 9027, 9027, 9027, 9027,
	9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027,
	420, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 573,
	-1000, 772, 734, 734, 204, 204, 204, 204, 204, 204,
	204, 9288, 6677, 534, 665, 513, 7983, 7199, 7199, 8244,
	8244, 7721, 7460, 7199, 999, 325, 513, 13556, -1000, -1000,
	8766, -1000, -1000, -1000, -1000, -1000, 534, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 13060, 13060, 7199, 7199, 7199, 7199,
	25, 13308, -1000, 743, 795, -1000, -1000, -1000, 976, 10554,
	799, 10815, 25, 685, 11559, 13308, -1000, -1000, 11559, 13308,
	3976, 5072, 778, -127, 728, -1000, -120, -111, 6416, 199,
	-1000, -1000, -1000, -1000, 3154, 215, 652, 338, -67, -1000,
	-1000, -1000, 809, -1000, 809, 809, 809, 809, -38, -38,
	-38, -38, -1000, -1000, -1000, -1000, -1000, 823, 822, -1000,
	809, 809, 809, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 821, 821, 821, 814, 814, 826, -1000, 121, 13308,
	3428, 973, 3428, -1000, 208, -1000, 13060, 13060, 13308, 13308,
	161, 13308, 13308, 777, -1000, 13308, 3428, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 13308, 324, 13308, 13308, 513, 13308, -1000, 911,
	8244, 8244, 4798, 8244, -1000, -1000, -1000, 954, -1000, 999,
	1016, -1000, 934, 931, 7199, -1000, -1000, 260, 381, -1000,
	-1000, 491, -1000, -1000, -1000, -1000, 172, 799, -1000, 2328,
	-1000, -1000, -1000, -1000, 419, 9027, 9027, 9027, 94, 2328,
	2347, 469, 1555, 204, 418, 418, 223, 223, 223, 223,
	223, 578, 578, -1000, -1000, -1000, 534, -1000, -1000, -1000,
	534, 7199, 774, -1000, -1000, 8244, -1000, 534, 609, 609,
	438, 380, 361, 1045, 609, 334, 1041, 609, 609, 7199,
	364, -1000, 8244, 534, -1000, 167, -1000, 404, 773, 745,
	609, 534, 609, 609, 700, 799, -1000, 13556, 11559, 11559,
	11559, 11559, 11559, -1000, 884, 873, -1000, 908, 904, 919,
	13308, -1000, 619, 10554, 13060, 184, 799, -1000, 11807, -1000,
	-1000, 1024, 11559, 716, -1000, 716, -1000, 163, -1000, -1000,
	728, -127, -122, -1000, -1000, -1000, -1000, 513, -1000, 495,
	721, 2880, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 820,
	570, -1000, 964, 210, 188, 556, 961, -1000, -1000, -1000,
	955, -1000, 352, -83, -1000, -1000, 412, -38, -38, -1000,
	-1000, 199, 942, 199, 199, 199, 474, 474, -1000, -1000,
	-1000, -1000, 406, -1000, -1000, -1000, 401, -1000, 842, 13060,
	9027, 3428, -1000, -1000, -1000, -1000, 642, 642, 214, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	24, 825, -1000, -1000, -1000, 11, 10, 83, -1000, 3428,
	-1000, 336, -1000, 473, 8244, -1000, -1000, -1000, 896, 513,
	513, 162, -1000, -1000, 13308, -1000, -1000, -1000, -1000, 748,
	-1000, -1000, -1000, 3702, 7199, -1000, 94, 2328, 2296, -1000,
	9027, 9027, -1000, -1000, 609, 7199, 513, -1000, -1000, -1000,
	120, 420, 120, 9027, 9027, -1000, 9027, 9027, -1000, -165,
	758, 319, -1000, 8244, 464, -1000, 4798, -1000, 9027, 9027,
	-1000, -1000, -1000, -1000, 841, 13556, 799, -1000, 10306, 13060,
	767, -1000, 279, 795, 819, 835, 1107, -1000, -1000, -1000,
	-1000, 863, -1000, 859, -1000, -1000, -1000, -1000, 534, 710,
	-1000, 227, -1000, 102, 101, 97, 13060, -1000, 1017, 8244,
	716, -1000, -1000, 219, -1000, -1000, -136, -116, -1000, -1000,
	-1000, 3154, -1000, 3154, 13060, 42, -1000, 556, 556, -1000,
	-1000, -1000, 816, 834, 9027, -1000, -1000, -1000, 587, 199,
	199, -1000, 254, -1000, -1000, -1000, 602, -1000, 599, 709,
	597, 13308, -1000, 155, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13308,
	-1000, -1000, -1000, -1000, -1000, 13060, -181, 542, 13060, 13060,
	13308, -1000, 324, -1000, 513, -1000, 4524, -1000, 1024, 11559,
	-1000, -1000, 534, -1000, 9027, 2328, 2328, -1000, -1000, 534,
	809, 809, -1000, 809, 814, -1000, 809, -10, 809, -12,
	534, 534, 2313, 2263, 2150, 2059, 799, -160, -1000, 513,
	8244, -1000, 1890, 1743, -1000, 956, 680, 705, -1000, -1000,
	6938, 534, 586, 160, 584, -1000, 1017, 13556, 8244, -1000,
	-1000, 8244, 810, -1000, 8244, -1000, -1000, -1000, 976, 13060,
	6155, 799, 799, 799, 584, 1011, 513, -1000, -1000, -1000,
	-1000, 2880, -1000, 568, -1000, 809, -1000, -1000, -1000, 13060,
	-63, 1053, 2328, -1000, -1000, -1000, -1000, -1000, -38, 457,
	-38, 397, -1000, 373, 3428, -1000, 804, -1000, -1000, -1000,
	-1000, 969, -1000, 4524, -1000, -1000, 801, -1000, -1000, -1000,
	1021, 708, -1000, 2328, -1000, -1000, 104, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 9027, 9027, 9027, 9027, 9027,
	534, 436, 513, 9027, 9027, 960, -1000, 799, -1000, -1000,
	702, 13060, 13060, -1000, 13060, 1011, -1000, 513, 513, 13060,
	513, 13308, -1000, -1000, 513, 799, 799, 13060, 13060, 13060,
	10058, -1000, 158, 13060, -1000, 566, -1000, 178, -1000, -158,
	199, -1000, 199, 569, 553, -1000, 524, 799, 706, -1000,
	274, 13060, 1019, 1013, -1000, -1000, 404, 404, 404, 404,
	45, -1000, -1000, 404, 404, 1051, -1000, 799, -1000, 772,
	156, -1000, -1000, -1000, 564, -1000, 11559, 13556, 561, 561,
	561, 184, 158, -1000, 518, 273, 433, -1000, 39, 13060,
	358, 959, -1000, 947, -1000, -1000, -1000, -1000, -1000, 552,
	498, 22, 4524, 3154, 538, 14, 8244, 8244, -1000, -1000,
	-1000, -1000, 534, 53, -188, -1000, -1000, 13556, 705, 534,
	13060, -1000, 775, 534, -1000, -1000, -1000, -1000, -1000, -1000,
	365, -1000, -1000, 13308, -1000, -1000, 425, -1000, -1000, 488,
	-1000, -1000, 533, -1000, 13060, -1000, -1000, 825, -1000, 848,
	513, 682, -1000, 894, -170, -191, 676, -1000, -1000, -1000,
	-1000, -1000, 800, -1000, 481, -1000, 22, 928, -181, 655,
	-1000, 1006, 1004, 8244, -1000, 890, -1000, 13060, -1000, -1000,
	19, -1000, 848, -1000, 8244, 513, -186, 528, 17, -1000,
	513, -189, 833, 799, -192, 832, -1000, 1039, 8505, -1000,
	-1000, 1050, 154, 154, 404, 534, -1000, -1000, -1000, 62,
	426, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 895, 1294, 63, 771, 1291, 1288, 1286, 1285, 1284,
	1283, 1282, 1280, 1279, 1278, 1277, 1276, 1271, 1270, 1269,
	1268, 1267, 1266, 1265, 1261, 1260, 1257, 133, 1256, 1255,
	1253, 71, 1252, 77, 1247, 1246, 48, 670, 42, 41,
	142, 1244, 28, 14, 70, 1243, 1242, 1240, 21, 1237,
	36, 1236, 1235, 78, 1234, 1233, 58, 1226, 1225, 1567,
	1224, 81, 1223, 13, 50, 1221, 1219, 1218, 1217, 79,
	462, 1216, 1215, 17, 1209, 1208, 84, 1207, 55, 9,
	15, 24, 27, 1206, 131, 7, 1204, 54, 1203, 1200,
	1198, 1197, 32, 1191, 57, 1190, 35, 56, 1188, 1187,
	2, 1186, 16, 69, 30, 26, 8, 80, 65, 1183,
	22, 73, 47, 1182, 1181, 544, 1177, 1167, 51, 1165,
	1152, 29, 209, 517, 1151, 1149, 1148, 1145, 66, 0,
	586, 245, 76, 1144, 1143, 1142, 1473, 39, 53, 25,
	18, 44, 204, 43, 1138, 1135, 38, 1132, 1131, 1129,
	1128, 1126, 1125, 1123, 281, 1122, 1118, 1115, 123, 19,
	1113, 1111, 59, 31, 1110, 1108, 1107, 46, 60, 1106,
	1105, 52, 45, 1104, 1103, 1099, 1096, 1095, 34, 10,
	1092, 20, 1090, 11, 1089, 23, 1088, 6, 1081, 12,
	1078, 3, 1074, 4, 49, 1, 1073, 5, 1072, 1069,
	1068, 61, 351, 82, 1050, 115,
}
var yyR1 = [...]int{

	0, 200, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 3, 7, 4, 5,
	5, 6, 6, 8, 8, 30, 30, 9, 10, 10,
	10, 10, 203, 203, 53, 53, 54, 54, 103, 103,
	11, 11, 11, 11, 108, 108, 112, 112, 112, 113,
	113, 113, 113, 144, 144, 12, 12, 12, 12, 12,
	12, 12, 12, 199, 199, 198, 198, 193, 193, 192,
	191, 191, 190, 190, 189, 18, 174, 176, 176, 175,
	175, 175, 175, 168, 147, 147, 147, 147, 150, 150,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 149,
	149, 149, 149, 149, 151, 151, 151, 151, 151, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 153, 153, 153, 153, 153, 153,
	153, 153, 167, 167, 154, 154, 162, 162, 163, 163,
	163, 160, 160, 161, 161, 164, 164, 164, 156, 156,
	157, 157, 165, 165, 158, 158, 158, 159, 159, 159,
	166, 166, 166, 166, 166, 155, 155, 169, 169, 184,
	184, 183, 183, 183, 173, 173, 180, 180, 180, 180,
	180, 171, 171, 172, 172, 182, 182, 181, 170, 170,
	185, 185, 185, 185, 196, 197, 195, 195, 195, 195,
	195, 177, 177, 177, 178, 178, 178, 179, 179, 179,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 188, 186, 186, 187, 187, 14,
	19, 19, 15, 15, 15, 15, 15, 16, 16, 20,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 119, 119, 117, 117, 120, 120, 118, 118,
	118, 121, 121, 121, 145, 145, 145, 22, 22, 24,
	24, 25, 26, 23, 23, 23, 23, 23, 23, 23,
	17, 204, 27, 28, 28, 29, 29, 29, 33, 33,
	33, 31, 31, 32, 32, 38, 38, 37, 37, 39,
	39, 39, 39, 133, 133, 133, 132, 132, 41, 41,
	42, 42, 43, 43, 44, 44, 44, 44, 44, 62,
	62, 47, 47, 46, 46, 48, 49, 49, 49, 102,
	102, 104, 104, 45, 45, 45, 45, 50, 50, 51,
	51, 52, 52, 140, 140, 139, 139, 139, 138, 138,
	55, 55, 55, 57, 56, 56, 56, 56, 58, 58,
	60, 60, 59, 59, 61, 63, 63, 63, 63, 64,
	64, 40, 40, 40, 40, 40, 40, 40, 116, 116,
	66, 66, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 77, 77, 77, 77, 77, 77, 67, 67,
	67, 67, 67, 67, 67, 36, 36, 78, 78, 78,
	84, 79, 79, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 74, 74, 74, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 205, 205, 76,
	75, 75, 75, 75, 75, 75, 34, 34, 34, 34,
	34, 143, 143, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 88, 88, 35, 35,
	86, 86, 87, 89, 89, 85, 85, 85, 69, 69,
	69, 69, 69, 69, 69, 69, 71, 71, 71, 90,
	90, 91, 91, 92, 92, 93, 93, 94, 95, 95,
	95, 96, 96, 96, 96, 97, 97, 97, 98, 98,
	99, 99, 100, 100, 100, 68, 68, 68, 68, 68,
	68, 101, 101, 101, 101, 105, 105, 80, 80, 82,
	82, 81, 83, 106, 106, 110, 107, 107, 111, 111,
	111, 111, 109, 109, 109, 135, 135, 135, 114, 114,
	122, 122, 123, 123, 115, 115, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 125, 125, 125, 126,
	126, 127, 127, 127, 134, 134, 130, 130, 131, 131,
	136, 136, 137, 137, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 201, 202, 141, 142, 142, 142,
}
var yyR2 = [...]int{

	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 11, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 7,
	6, 5, 5, 2, 4, 0, 4, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 0, 1, 1, 3, 2, 3, 1,
	10, 11, 11, 12, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 7, 7, 7, 7, 4, 5, 7, 5, 5,
	5, 12, 7, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	3, 2, 3, 3, 2, 3, 4, 3, 7, 5,
	4, 2, 4, 2, 2, 2, 2, 3, 3, 5,
	2, 3, 1, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 6, 3,
	7, 0, 1, 1, 3, 3, 1, 4, 4, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 0, 2,
	1, 3, 2, 3, 2, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -200, -1, -2, -3, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -20, -21, -22, -24, -25,
	-26, -23, -17, -4, -5, 6, 7, -30, 9, 10,
	34, -18, 120, 121, 123, 122, 159, 124, 152, 54,
	172, 173, 175, 176, 29, 153, 154, 157, 158, 35,
	36, 126, -201, 8, 262, 58, 279, -92, 15, -29,
	5, -27, -204, -27, -27, -27, -27, -27, -174, -176,
	58, 94, -127, 135, 129, 76, 254, 128, 132, 139,
	-130, 61, -129, 23, 272, 145, 172, 183, 177, 204,
	196, 273, 146, 194, 197, 241, 224, 236, 70, 175,
	250, 22, 155, 192, 188, 21, 186, 31, 238, 209,
	277, 187, 237, 126, 148, 143, 210, 214, 242, 181,
	182, 244, 208, 144, 37, 274, 39, 163, 245, 212,
	207, 203, 206, 180, 202, 43, 216, 215, 217, 240,
	199, 149, 189, 130, 18, 248, 158, 127, 161, 239,
	211, 213, 140, 165, 276, 246, 185, 150, 162, 157,
	249, 151, 176, 226, 243, 252, 42, 221, 179, 142,
	173, 169, 227, 200, 164, 190, 191, 205, 178, 201,
	174, 159, 131, 251, 222, 278, 198, 195, 170, 167,
	168, 228, 229, 230, 231, 232, 233, 171, 20, 275,
	247, 193, 223, -115, 135, 231, 137, 132, 132, 134,
	135, 254, 128, 132, -59, -136, 61, -129, 129, 135,
	132, 113, 197, 241, 120, 225, 226, 238, 134, 37,
	239, 165, -145, 132, -117, 224, 228, 229, 230, 233,
	231, 171, 61, 243, 242, 234, -136, 174, -141, -141,
	-141, -141, -141, 227, 227, -141, -3, -1, -96, 17,
	16, -6, -4, -201, 6, 24, 25, -33, 44, 45,
	-28, -39, 104, -40, -136, -65, 78, -70, 33, 61,
	-129, 27, -69, -66, -85, -83, -84, 113, 114, 115,
	102, 103, 110, 79, 116, -74, -72, -73, -75, 63,
	62, 71, 64, 65, 66, 67, 72, 73, 74, -130,
	-81, -201, 48, 49, 263, 264, 265, 266, 271, 267,
	81, 38, 253, 261, 260, 259, 257, 258, 255, 256,
	269, 270, 138, 254, 108, 262, -115, -115, 11, -53,
	-54, -59, -61, -136, -107, -144, 174, -111, 243, 242,
	-131, -109, -130, -128, 241, 197, 240, 125, 77, 26,
	28, 219, 80, 113, 16, 81, 112, 263, 120, 52,
	255, 256, 253, 265, 266, 254, 225, 33, 10, 29,
	153, 25, 106, 122, 84, 85, 156, 27, 154, 74,
	19, 55, 11, 13, 14, 138, 137, 96, 134, 50,
	8, 116, 30, 93, 46, 32, 48, 94, 17, 257,
	258, 35, 271, 160, 108, 53, 40, 78, 72, 75,
	56, 76, 15, 51, 95, 123, 262, 49, 128, 6,
	268, 34, 152, 47, 132, 83, 269, 270, 136, 166,
	73, 5, 139, 36, 9, 54, 57, 259, 260, 261,
	38, 82, 12, -175, 94, -168, 61, -59, 134, -59,
	-59, 262, -123, 138, -123, -123, 132, -59, 120, 122,
	125, 56, -19, -59, -122, 138, 61, -122, -122, -122,
	-59, 117, -59, 61, 34, -142, -201, -131, 254, 61,
	165, 132, 166, 135, -142, -142, -142, -142, -142, 169,
	170, -142, -120, -119, 236, 237, 227, 235, 12, 227,
	168, -142, -141, -141, -202, 60, -97, 19, 35, -40,
	-136, -93, -94, -40, -92, -3, -27, 40, -31, 25,
	69, 11, -133, 77, 76, 93, -132, 26, -130, 63,
	117, -40, -67, 96, 78, 94, 95, 80, 99, 98,
	109, 102, 103, 104, 105, 106, 107, 108, 100, 101,
	112, 86, 87, 88, 89, 90, 91, 92, -116, -201,
	-84, -201, 118, 119, -70, -70, -70, -70, -70, -70,
	-70, -70, -201, -3, -79, -40, -201, -201, -201, -201,
	-201, -201, -201, -201, -201, -88, -40, -201, -205, -76,
	-201, -205, -76, -205, -76, -205, -201, -205, -76, -205,
	-76, -205, -205, -76, -201, -201, -201, -201, -201, -201,
	-60, 30, -59, -42, -43, -44, -45, -62, -84, -201,
	61, -59, -59, -53, -203, 59, 11, 57, -203, 59,
	117, 59, -107, 174, -108, -112, 244, 246, 86, -135,
	-130, 63, 33, 34, 60, 59, -59, -147, -150, -152,
	-151, -153, -148, -149, 194, 195, 113, 198, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 34, 155,
	190, 191, 192, 193, 210, 211, 212, 213, 214, 215,
	216, 217, 177, 196, 273, 178, 179, 180, 181, 182,
	183, 185, 186, 187, 188, 189, 61, -142, 130, 135,
	61, 78, 61, -59, -59, -142, 167, 167, 132, 132,
	-59, 59, 136, -53, 27, 56, -59, 61, 61, -137,
	-136, -128, -142, -142, -142, -142, -142, -59, -142, -142,
	-142, -142, 11, -118, 11, 96, -40, 56, 9, 96,
	59, 18, 117, 59, -95, 28, 29, -96, -202, -33,
	-71, -130, 64, 67, -32, 47, -59, -40, -40, -77,
	72, 78, 73, 74, -132, 104, -137, -131, -128, -70,
	-78, -81, -84, 68, 96, 94, 95, 80, -70, -70,
	-70, -70, -70, -70, -70, -70, -70, -70, -70, -70,
	-70, -70, -70, -143, 61, 63, 61, -69, -69, -130,
	-38, 25, -37, -39, -202, 59, -202, -3, -37, -37,
	-40, -40, -85, 63, -37, -85, 63, -37, -37, -31,
	-86, -87, 82, -85, -130, -136, -202, -70, -130, -130,
	-37, -38, -37, -37, -103, 161, -59, 34, 59, -55,
	-57, -56, -58, 46, 50, 52, 47, 48, 49, 53,
	-140, 26, -42, -201, -201, -139, 161, -138, 26, -136,
	63, -103, 57, -42, -59, -42, -61, -136, 104, -111,
	-108, 59, 245, 247, 248, 56, 75, -40, -159, 112,
	-177, -178, -179, -131, 63, 64, -168, -169, -170, -180,
	147, -185, 140, 142, 139, -171, 148, 134, 32, 60,
	-164, 72, 78, -160, 222, -154, 58, -154, -154, -154,
	-154, -158, 197, -158, -158, -158, 58, 58, -154, -154,
	-154, -162, 58, -162, -162, -163, 58, -163, -134, 57,
	131, -59, -142, 27, -142, -124, 125, 122, 123, -188,
	121, 219, 197, 70, 33, 15, 263, 161, 278, 61,
	162, -130, -130, -59, -59, 125, 122, -59, -59, -59,
	-142, -59, -121, 94, 12, -136, -136, -59, 42, -40,
	-40, -137, -94, -97, -114, 19, 11, 38, 38, -37,
	72, 73, 74, 117, -201, -78, -70, -70, -70, -36,
	156, 77, -202, -202, -37, 59, -40, -202, -202, -202,
	59, 57, 26, 11, 11, -202, 11, 11, -202, -202,
	-37, -89, -87, 84, -40, -202, 117, -202, 59, 59,
	-202, -202, -202, -202, -68, 34, 38, -3, -201, -201,
	-106, -110, -85, -43, -44, -44, -43, -44, 46, 46,
	46, 51, 46, 51, 46, -56, -136, -202, -47, -46,
	-48, -130, -63, 54, 137, 55, -201, -138, -64, 12,
	-42, -64, -64, 117, -112, -113, 249, 246, 252, 61,
	63, 59, -179, 86, 58, 61, 32, -171, -171, -172,
	61, -172, 32, -156, 33, 72, -161, 223, 64, -158,
	-158, -159, 34, -159, -159, -159, -167, 63, -167, 64,
	64, 56, -130, -70, -142, -141, -194, 141, 147, 148,
	143, 61, 134, 32, 140, 142, 161, 139, -194, -125,
	-126, 136, 26, 134, 32, 161, -193, 57, 167, 167,
	136, -142, -118, 63, -40, 43, 117, -59, -41, 11,
	104, -131, -38, -36, 77, -70, -70, -202, -39, -146,
	113, 194, 155, 192, 188, 208, 199, 221, 190, 222,
	-143, -146, -70, -70, -70, -70, 272, -92, 85, -40,
	83, -131, -70, -70, -105, 56, -106, -80, -82, -81,
	-201, -3, -101, -130, -104, -130, -64, 59, 86, -51,
	-50, 56, 57, -52, 56, -50, 46, 46, -202, 59,
	97, 134, 134, 134, -104, -92, -40, -64, 246, 250,
	251, -178, -179, -182, -181, -130, -185, -172, -172, 58,
	-157, 56, -70, 60, -159, -159, 61, 113, 60, 59,
	60, 59, 60, 59, -59, -198, 127, -141, -141, -59,
	-141, -130, -191, 275, -192, 61, -130, -130, -59, -121,
	-64, -42, -202, -70, -202, -154, -154, -154, -163, -154,
	182, -154, 182, -202, -202, 19, 19, 19, 19, -201,
	-35, 268, -40, 59, 59, 31, -105, 59, -202, -202,
	-202, 59, 117, -202, 59, -92, -110, -40, -40, 58,
	-40, -140, -48, -49, -40, 132, 133, -201, -201, -201,
	-202, -96, 60, 59, -154, -102, -130, -165, 219, 9,
	-158, 63, -158, 64, 64, -142, 58, 30, -190, -189,
	-131, 58, -90, 13, -158, 61, -70, -70, -70, -70,
	-70, -202, 63, -70, -70, 32, -82, 38, -3, -201,
	-130, -130, -130, -96, -102, -136, -201, -201, -102, -102,
	-102, -139, -184, -183, 57, 144, 70, -181, 60, 59,
	-166, 140, 32, 139, -73, -159, -159, 60, 60, -199,
	61, -201, 59, 86, -102, -91, 14, 16, -202, -202,
	-202, -202, -34, 96, 275, -202, -202, 9, -80, -3,
	117, 60, -43, -85, -202, -202, -202, -63, -183, 61,
	-173, 86, 63, 150, -130, -155, 70, 32, 32, 59,
	60, 61, -186, -187, 161, -189, -179, 60, -98, 166,
	-40, -79, -202, 273, 53, 276, -106, -202, -130, -202,
	-202, 64, -59, 63, 61, -202, 59, -130, -193, -99,
	-100, 56, 23, 22, 43, 274, 277, 58, 61, -187,
	38, -191, 59, 20, 21, -40, 43, -102, 163, -100,
	-40, 275, 60, 164, 276, -196, -197, 56, -201, 277,
	-197, 56, 10, 9, -70, 160, -195, 151, 146, 149,
	34, -195, -202, -202, 145, 33, 72,
}
var yyDef = [...]int{

	23, -2, 1, 2, -2, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 573, 0, 321, 321, 321, 321, 321,
	321, 0, 651, 634, 0, 0, 0, 0, -2, 308,
	309, 0, 311, 312, 884, 884, 884, 884, 884, 0,
	0, 884, 0, 35, 36, 882, 23, 581, 0, 0,
	325, 328, 323, 0, 634, 634, 0, 0, 65, 66,
	0, 0, 0, 867, 781, 0, 632, 632, 632, 652,
	653, 656, 657, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 0, 0, 0, 635, 0, 630, 0,
	630, 630, 630, 0, 258, 402, 660, 661, 781, 867,
	0, 0, 0, 885, 0, 885, 885, 271, 885, 885,
	274, 885, 0, 885, 0, 281, 283, 284, 285, 286,
	0, 290, 885, 305, 306, 295, 307, 310, 313, 314,
	315, 316, 317, 884, 884, 320, 29, 3, 585, 0,
	0, 573, 31, 0, 321, 326, 327, 331, 329, 330,
	322, 0, 339, 343, 0, 411, 0, 416, 418, -2,
	-2, 0, 453, 454, 455, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 481, 482, 483, 484, 558,
	559, 560, 561, 562, 563, 564, 565, 420, 421, 555,
	612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	546, 0, 517, 517, 517, 517, 517, 517, 517, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 46, 402, 50, 0, 858, 616, -2, -2,
	0, 0, 658, 659, -2, 771, -2, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 0, 0, 89, 0, 87, 0, 885,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 259, 885, 885, 262, 886, 887, 885, 885,
	885, 0, 885, 885, 269, 270, 272, 273, 275, 885,
	885, 277, 0, 298, 296, 297, 292, 293, 0, 287,
	288, 291, 318, 319, 30, 883, 24, 0, 0, 582,
	0, 574, 575, 578, 581, 29, 328, 0, 333, 332,
	324, 0, 340, 0, 0, 0, 344, 0, 346, 347,
	0, 414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 438, 439, 440, 441, 442, 443, 444, 417, 0,
	431, 0, 0, 0, 473, 474, 475, 476, 477, 478,
	479, 0, 335, 29, 0, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 547, 0, 501, 509,
	0, 502, 510, 503, 511, 504, 0, 505, 512, 506,
	513, 507, 508, 514, 0, 0, 0, 335, 0, 0,
	48, 0, 401, 0, 350, 352, 353, 354, -2, 0,
	660, 385, -2, 0, 0, 0, 42, 43, 0, 0,
	0, 0, 51, 858, 53, 54, 0, 0, 0, 167,
	625, 626, 627, 623, 211, 0, 0, 155, 151, 95,
	96, 97, 144, 99, 144, 144, 144, 144, 164, 164,
	164, 164, 127, 128, 129, 130, 131, 0, 0, 114,
	144, 144, 144, 118, 134, 135, 136, 137, 138, 139,
	140, 141, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 146, 146, 146, 148, 148, 654, 68, 0, 0,
	885, 0, 885, 85, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 252, 631, 0, 885, 255, 256, 403,
	662, 663, 260, 261, 263, 264, 265, 266, 267, 268,
	276, 280, 0, 301, 0, 0, 282, 0, 586, 0,
	0, 0, 0, 0, 577, 579, 580, 585, 32, 331,
	0, 566, 0, 0, 0, 334, 27, 412, 413, 415,
	432, 0, 434, 436, 345, 341, 0, 556, -2, 422,
	423, 447, 448, 449, 0, 0, 0, 0, 445, 427,
	0, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 472, 531, 532, 0, 470, 471, 480,
	0, 0, 336, 337, 450, 0, 611, 29, 0, 0,
	0, 0, 455, 558, 0, 455, 558, 0, 0, 0,
	553, 550, 0, 0, 555, 0, 518, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 400, 0, 0, 0,
	0, 0, 0, 390, 0, 0, 393, 0, 0, 0,
	0, 384, 0, 0, 361, 405, 826, 386, 0, 388,
	389, 409, 0, 409, 45, 409, 47, 0, 404, 617,
	52, 0, 0, 57, 58, 618, 619, 620, 621, 0,
	86, 212, 214, 217, 218, 219, 90, 91, 92, 0,
	0, 199, 0, 0, 193, 193, 0, 191, 192, 88,
	158, 156, 0, 153, 152, 98, 0, 164, 164, 121,
	122, 167, 0, 167, 167, 167, 0, 0, 115, 116,
	117, 109, 0, 110, 111, 112, 0, 113, 0, 0,
	0, 885, 71, 633, 72, 884, 0, 0, 646, 226,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	0, 77, 228, 230, 229, 0, 0, 0, 250, 885,
	254, 298, 279, 0, 0, 299, 300, 289, 0, 583,
	584, 0, 576, 25, 0, 628, 629, 567, 568, 348,
	433, 435, 437, 0, 335, 424, 445, 428, 0, 425,
	0, 0, 419, 485, 0, 0, 452, -2, 488, 489,
	0, 0, 0, 0, 0, 524, 0, 0, 525, 0,
	573, 0, 551, 0, 0, 500, 0, 519, 0, 0,
	520, 521, 522, 523, 605, 0, 0, -2, 0, 0,
	409, 613, 0, 351, 379, 381, 0, 376, 391, 392,
	394, 0, 396, 0, 398, 399, 355, 357, 0, 362,
	363, 0, 359, 0, 0, 0, 0, 387, 573, 0,
	409, 40, 41, 0, 55, 56, 0, 0, 62, 168,
	169, 0, 215, 0, 0, 0, 186, 193, 193, 189,
	194, 190, 0, 160, 0, 157, 94, 154, 0, 167,
	167, 123, 0, 124, 125, 126, 0, 142, 0, 0,
	0, 0, 655, 75, 70, 220, 884, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 884, 0,
	884, 647, 648, 649, 650, 0, 80, 0, 0, 0,
	0, 253, 301, 302, 303, 587, 0, 26, 409, 0,
	342, 557, 0, 426, 0, 446, 429, 486, 338, 0,
	144, 144, 536, 144, 148, 539, 144, 541, 144, 544,
	0, 0, 0, 0, 0, 0, 0, 548, 499, 554,
	0, 556, 0, 0, 33, 0, 605, 595, 607, 609,
	0, 29, 0, 601, 0, 371, 573, 0, 0, 373,
	380, 0, 0, 374, 0, 375, 395, 397, 383, 0,
	0, 0, 0, 0, 0, 581, 410, 39, 59, 60,
	61, 213, 216, 0, 195, 144, 198, 187, 188, 0,
	162, 0, 159, 145, 119, 120, 165, 166, 164, 0,
	164, 0, 149, 0, 885, 69, 0, 221, 222, 223,
	224, 0, 227, 0, 78, 79, 0, 232, 251, 278,
	569, 349, 487, 430, 490, 533, 164, 537, 538, 540,
	542, 543, 545, 492, 491, 0, 0, 0, 0, 0,
	0, 0, 552, 0, 0, 0, 34, 0, 610, -2,
	0, 0, 0, 49, 0, 581, 614, 615, 377, 0,
	382, 0, 364, 365, 366, 0, 0, 0, 0, 0,
	385, 38, 178, 0, 197, 0, 369, 170, 163, 0,
	167, 143, 167, 0, 0, 67, 0, 0, 81, 82,
	0, 0, 571, 0, 534, 535, 0, 0, 0, 0,
	526, 498, 549, 0, 0, 0, 608, 0, -2, 0,
	603, 602, 372, 37, 0, 358, 0, 0, 0, 0,
	0, 405, 177, 179, 0, 184, 0, 196, 0, 0,
	175, 0, 172, 174, 161, 132, 133, 147, 150, 0,
	0, 0, 0, 0, 0, 588, 0, 0, 493, 495,
	494, 496, 0, 0, 0, 515, 516, 0, 598, 29,
	0, 378, 0, 0, 406, 407, 408, 360, 180, 181,
	0, 185, 183, 0, 370, 93, 0, 171, 173, 0,
	76, 73, 0, 245, 0, 83, 84, 77, 28, 0,
	572, 570, 497, 0, 0, 0, 606, -2, 604, 367,
	368, 182, 0, 176, 0, 244, 0, 0, 80, 589,
	590, 0, 0, 0, 527, 0, 530, 0, 74, 246,
	0, 231, 0, 592, 0, 594, 528, 0, 0, 591,
	593, 0, 200, 0, 0, 201, 202, 0, 0, 529,
	203, 0, 0, 0, 0, 0, 204, 206, 207, 0,
	0, 205, 247, 248, 208, 209, 210,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 107, 99, 3,
	58, 60, 104, 102, 59, 103, 117, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 279,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 115, 116, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:339
		{
			prog := yyDollar[1].pprogram
			setParseTree(yylex, &prog)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
			yyVAL.pprogram = Program{Command: SqlCommand{Statement: yyDollar[1].statement, Next: nil}}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:350
		{
			next := yyDollar[3].pprogram
			yyVAL.pprogram = Program{Command: SqlCommand{Statement: yyDollar[1].statement, Next: &next}}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:357
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:379
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:385
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:403
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), Trigger: yyDollar[11].triggers}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:420
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:430
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:437
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:449
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:461
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:471
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:495
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:509
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:513
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:518
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:522
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:532
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:536
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:540
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:546
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:556
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:560
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:570
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:574
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:582
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:588
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:592
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:603
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:609
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:614
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:618
		{
			yyVAL.statement = &DDL{Action: CreateDataSourceStr, Table: yyDollar[3].tableName.ToViewName(), CrateDatasourceSpecs: &CrateDatasourceSpecs{
				TypeName:     yyDollar[6].expr,
				OptionsSpecs: yyDollar[7].optionsSpecs,
			}}
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:625
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:629
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyVAL.optionsSpecsEntry = []OptionsSpecsEntry{{
				Key:   string(yyDollar[1].bytes),
				Value: string(yyDollar[2].bytes),
			}}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:646
		{
			yyVAL.optionsSpecsEntry = append(yyVAL.optionsSpecsEntry, OptionsSpecsEntry{
				Key:   string(yyDollar[3].bytes),
				Value: string(yyDollar[4].bytes),
			})
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:655
		{
			yyVAL.optionsSpecs = OptionsSpecs{Entries: []OptionsSpecsEntry{}}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:659
		{
			yyVAL.optionsSpecs = OptionsSpecs{Entries: yyDollar[3].optionsSpecsEntry}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:664
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:668
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:674
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:679
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:684
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:690
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:695
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:701
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:707
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:714
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:721
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:725
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:736
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:740
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:744
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:750
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:972
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:977
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:982
		{
			yyVAL.sqlVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:986
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:991
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:995
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1003
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1007
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1013
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1025
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1034
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1044
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1053
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1062
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1066
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1071
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1075
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1080
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1084
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1088
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1093
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1097
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1106
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1127
		{
			yyVAL.sqlVal = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1161
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1172
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1182
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1186
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1194
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1198
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1213
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1223
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1227
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1233
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1239
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1250
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1254
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1258
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1262
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1268
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1274
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1280
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1284
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1292
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1296
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1301
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1305
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1309
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1317
		{
			yyVAL.str = yyDollar[1].str
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1321
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1325
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1331
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1335
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1339
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1345
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1349
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1353
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1357
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1362
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1397
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1435
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1441
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1445
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1451
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1455
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1461
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1467
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1471
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1487
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1492
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1500
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1504
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1559
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1595
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1599
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1604
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1622
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1640
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1666
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1682
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1686
		{
			yyVAL.str = "full "
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1692
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1696
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1702
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1706
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1716
		{
			yyVAL.showFilter = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1720
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1724
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1730
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.str = SessionStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			yyVAL.str = GlobalStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1744
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1748
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1754
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1758
		{
			yyVAL.statement = &Begin{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1764
		{
			yyVAL.statement = &Commit{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1770
		{
			yyVAL.statement = &Rollback{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1780
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1784
		{
			yyVAL.statement = &OtherRead{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1788
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1792
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1810
		{
			setAllowComments(yylex, true)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1814
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1820
		{
			yyVAL.bytes2 = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1824
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.str = UnionStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = UnionAllStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = UnionDistinctStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = SQLCacheStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = DistinctStr
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = StraightJoinHint
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1874
		{
			yyVAL.selectExprs = nil
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1878
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1884
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1894
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1898
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1902
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1906
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1911
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1919
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1926
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1931
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1935
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1945
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1969
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1973
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1979
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1983
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1988
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1998
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2002
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Name: yyDollar[1].colIdent, Value: yyDollar[3].tableValuedFunctionArgumentValue}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2014
		{
			yyVAL.tableValuedFunctionArgumentValue = &ExprTableValuedFunctionArgumentValue{Expr: yyDollar[1].expr}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2018
		{
			yyVAL.tableValuedFunctionArgumentValue = &TableDescriptorTableValuedFunctionArgumentValue{Table: yyDollar[3].tableExpr}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2022
		{
			yyVAL.tableValuedFunctionArgumentValue = &FieldDescriptorTableValuedFunctionArgumentValue{Field: yyDollar[3].colName}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2032
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2038
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2055
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2059
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2063
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2067
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2075
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2079
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2085
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2087
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2090
		{
			yyVAL.empty = struct{}{}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2092
		{
			yyVAL.empty = struct{}{}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2095
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2103
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.str = JoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = JoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = JoinStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.str = StraightJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = LeftJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = LeftJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2144
		{
			yyVAL.str = RightJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = RightJoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{
			yyVAL.str = NaturalJoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2158
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2168
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2178
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2188
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2193
		{
			yyVAL.indexHints = nil
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2197
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2201
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2205
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = nil
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2244
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2250
		{
			yyVAL.str = ""
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2264
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 430:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2312
		{
			yyVAL.str = IsNullStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2316
		{
			yyVAL.str = IsNotNullStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.str = IsTrueStr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = IsNotTrueStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2328
		{
			yyVAL.str = IsFalseStr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.str = IsNotFalseStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.str = EqualStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.str = LessThanStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2346
		{
			yyVAL.str = GreaterThanStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2350
		{
			yyVAL.str = LessEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.str = GreaterEqualStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2358
		{
			yyVAL.str = NotEqualStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2362
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = nil
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2377
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2381
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2385
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2397
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2401
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2529
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 492:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 495:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 496:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 497:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 515:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2689
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 516:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2693
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2733
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2739
		{
			yyVAL.str = ""
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2743
		{
			yyVAL.str = BooleanModeStr
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2747
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2751
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2755
		{
			yyVAL.str = QueryExpansionStr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2797
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = nil
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2835
		{
			yyVAL.str = string("")
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2839
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2849
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2855
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = nil
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2874
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2878
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.expr = &NullVal{}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2936
		{
			yyVAL.exprs = nil
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2940
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = nil
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2954
		{
			yyVAL.orderBy = nil
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2958
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2968
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2974
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2979
		{
			yyVAL.str = AscScr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2983
		{
			yyVAL.str = AscScr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.str = DescScr
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2992
		{
			yyVAL.limit = nil
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2996
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3000
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3004
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3009
		{
			yyVAL.str = ""
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3013
		{
			yyVAL.str = ForUpdateStr
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3017
		{
			yyVAL.str = ShareModeStr
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3022
		{
			yyVAL.triggers = nil
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3026
		{
			yyVAL.triggers = yyDollar[2].triggers
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3032
		{
			yyVAL.triggers = []Trigger{yyDollar[1].trigger}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3036
		{
			yyVAL.triggers = append(yyDollar[1].triggers, yyDollar[3].trigger)
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3042
		{
			yyVAL.trigger = &WatermarkTrigger{}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			yyVAL.trigger = &DelayTrigger{Delay: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3050
		{
			yyVAL.trigger = &CountingTrigger{Count: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3063
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3067
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3071
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3076
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3080
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3084
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3091
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3095
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3099
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3103
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3108
		{
			yyVAL.updateExprs = nil
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3112
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3122
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3132
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3138
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3158
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3164
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3170
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3174
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3180
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3184
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3188
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3192
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3199
		{
			yyVAL.bytes = []byte("charset")
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3210
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = &Default{}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3223
		{
			yyVAL.byt = 0
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3225
		{
			yyVAL.byt = 1
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3228
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3230
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3233
		{
			yyVAL.str = ""
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.str = IgnoreStr
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3247
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3255
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3262
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3268
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3273
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3277
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3280
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3282
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3286
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3290
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3297
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3303
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3307
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3314
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3558
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			decNesting(yylex)
		}
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3572
		{
			skipToEnd(yylex)
		}
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3577
		{
			skipToEnd(yylex)
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3581
		{
			skipToEnd(yylex)
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3585
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
