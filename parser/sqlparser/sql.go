// Code generated by goyacc -v test.out -o sql.go sql.y. DO NOT EDIT.

//line sql.y:24
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:24

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:59
type yySymType struct {
	yys                          int
	tableValuedFunctionArguments TableValuedFunctionArguments
	tableValuedFunctionArgument  *TableValuedFunctionArgument
	empty                        struct{}
	statement                    Statement
	selStmt                      SelectStatement
	ddl                          *DDL
	ins                          *Insert
	byt                          byte
	bytes                        []byte
	bytes2                       [][]byte
	str                          string
	strs                         []string
	selectExprs                  SelectExprs
	selectExpr                   SelectExpr
	columns                      Columns
	partitions                   Partitions
	colName                      *ColName
	tableExprs                   TableExprs
	tableExpr                    TableExpr
	joinCondition                JoinCondition
	tableName                    TableName
	tableNames                   TableNames
	indexHints                   *IndexHints
	expr                         Expr
	exprs                        Exprs
	boolVal                      BoolVal
	sqlVal                       *SQLVal
	colTuple                     ColTuple
	values                       Values
	valTuple                     ValTuple
	subquery                     *Subquery
	whens                        []*When
	when                         *When
	orderBy                      OrderBy
	order                        *Order
	limit                        *Limit
	updateExprs                  UpdateExprs
	setExprs                     SetExprs
	updateExpr                   *UpdateExpr
	setExpr                      *SetExpr
	colIdent                     ColIdent
	tableIdent                   TableIdent
	convertType                  *ConvertType
	aliasedTableName             *AliasedTableExpr
	TableSpec                    *TableSpec
	columnType                   ColumnType
	colKeyOpt                    ColumnKeyOption
	optVal                       Expr
	LengthScaleOption            LengthScaleOption
	columnDefinition             *ColumnDefinition
	indexDefinition              *IndexDefinition
	indexInfo                    *IndexInfo
	indexOption                  *IndexOption
	indexOptions                 []*IndexOption
	indexColumn                  *IndexColumn
	indexColumns                 []*IndexColumn
	constraintDefinition         *ConstraintDefinition
	constraintInfo               ConstraintInfo
	ReferenceAction              ReferenceAction
	partDefs                     []*PartitionDefinition
	partDef                      *PartitionDefinition
	partSpec                     *PartitionSpec
	vindexParam                  VindexParam
	vindexParams                 []VindexParam
	showFilter                   *ShowFilter
	optLike                      *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const RIGHTARROW = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const UNIQUE = 57455
const PRIMARY = 57456
const COLUMN = 57457
const SPATIAL = 57458
const FULLTEXT = 57459
const KEY_BLOCK_SIZE = 57460
const ACTION = 57461
const CASCADE = 57462
const CONSTRAINT = 57463
const FOREIGN = 57464
const NO = 57465
const REFERENCES = 57466
const RESTRICT = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const VINDEX = 57483
const VINDEXES = 57484
const STATUS = 57485
const VARIABLES = 57486
const WARNINGS = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const SCHEMAS = 57542
const TABLES = 57543
const VITESS_KEYSPACES = 57544
const VITESS_SHARDS = 57545
const VITESS_TABLETS = 57546
const VSCHEMA = 57547
const VSCHEMA_TABLES = 57548
const VITESS_TARGET = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const NAMES = 57556
const CHARSET = 57557
const GLOBAL = 57558
const SESSION = 57559
const ISOLATION = 57560
const LEVEL = 57561
const READ = 57562
const WRITE = 57563
const ONLY = 57564
const REPEATABLE = 57565
const COMMITTED = 57566
const UNCOMMITTED = 57567
const SERIALIZABLE = 57568
const CURRENT_TIMESTAMP = 57569
const DATABASE = 57570
const CURRENT_DATE = 57571
const CURRENT_TIME = 57572
const LOCALTIME = 57573
const LOCALTIMESTAMP = 57574
const UTC_DATE = 57575
const UTC_TIME = 57576
const UTC_TIMESTAMP = 57577
const REPLACE = 57578
const CONVERT = 57579
const CAST = 57580
const SUBSTR = 57581
const SUBSTRING = 57582
const GROUP_CONCAT = 57583
const SEPARATOR = 57584
const TIMESTAMPADD = 57585
const TIMESTAMPDIFF = 57586
const MATCH = 57587
const AGAINST = 57588
const BOOLEAN = 57589
const LANGUAGE = 57590
const WITH = 57591
const QUERY = 57592
const EXPANSION = 57593
const UNUSED = 57594

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"RIGHTARROW",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	160, 299,
	161, 299,
	-2, 289,
	-1, 270,
	113, 645,
	-2, 641,
	-1, 271,
	113, 646,
	-2, 642,
	-1, 339,
	82, 820,
	-2, 63,
	-1, 340,
	82, 776,
	-2, 64,
	-1, 345,
	82, 755,
	-2, 607,
	-1, 347,
	82, 797,
	-2, 609,
	-1, 617,
	1, 351,
	5, 351,
	12, 351,
	13, 351,
	14, 351,
	15, 351,
	17, 351,
	19, 351,
	30, 351,
	31, 351,
	42, 351,
	43, 351,
	44, 351,
	45, 351,
	46, 351,
	48, 351,
	49, 351,
	52, 351,
	53, 351,
	55, 351,
	56, 351,
	270, 351,
	-2, 375,
	-1, 621,
	53, 44,
	55, 44,
	-2, 48,
	-1, 766,
	113, 648,
	-2, 644,
	-1, 994,
	5, 30,
	-2, 442,
	-1, 1024,
	5, 29,
	-2, 581,
	-1, 1273,
	5, 30,
	-2, 582,
	-1, 1328,
	5, 29,
	-2, 584,
	-1, 1406,
	5, 30,
	-2, 585,
}

const yyPrivate = 57344

const yyLast = 13158

var yyAct = [...]int{

	271, 1430, 1236, 1394, 1122, 1027, 275, 573, 1309, 476,
	1341, 1440, 880, 1049, 909, 288, 1173, 249, 1210, 853,
	848, 1028, 1047, 57, 1174, 923, 876, 572, 3, 1170,
	850, 1296, 81, 277, 959, 889, 210, 879, 1180, 210,
	1186, 791, 344, 240, 1145, 801, 301, 717, 1076, 986,
	731, 1102, 798, 1093, 1055, 634, 893, 819, 855, 839,
	511, 768, 302, 51, 505, 919, 338, 210, 81, 633,
	832, 614, 210, 258, 210, 333, 517, 341, 445, 248,
	273, 525, 613, 330, 335, 623, 587, 56, 241, 242,
	243, 244, 1433, 588, 247, 1417, 1428, 1404, 903, 313,
	1425, 319, 320, 317, 318, 316, 315, 314, 1237, 262,
	1416, 1403, 1162, 1265, 51, 321, 322, 450, 1205, 1206,
	1204, 1369, 254, 538, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 800, 61, 549, 870, 478,
	205, 201, 202, 203, 1064, 499, 246, 1063, 824, 495,
	1065, 871, 872, 635, 197, 636, 199, 496, 493, 494,
	245, 1084, 63, 64, 65, 66, 67, 902, 1299, 1315,
	910, 1256, 1254, 239, 488, 489, 706, 538, 537, 547,
	548, 540, 541, 542, 543, 544, 545, 546, 539, 1125,
	1124, 549, 704, 1427, 463, 1424, 1395, 1121, 210, 1109,
	833, 210, 1387, 894, 498, 1448, 480, 210, 482, 1350,
	705, 896, 1342, 210, 1050, 1052, 81, 464, 81, 81,
	452, 81, 81, 199, 81, 1344, 81, 1126, 1107, 1444,
	987, 710, 697, 1199, 896, 81, 896, 1118, 479, 481,
	446, 1198, 1197, 1120, 448, 707, 455, 212, 200, 953,
	198, 1376, 952, 1276, 1003, 561, 562, 1000, 1132, 1060,
	1013, 980, 204, 1077, 740, 81, 629, 540, 541, 542,
	543, 544, 545, 546, 539, 529, 513, 549, 475, 470,
	475, 475, 514, 475, 475, 460, 475, 877, 475, 501,
	502, 866, 1051, 1222, 1343, 1370, 1108, 475, 549, 737,
	910, 1113, 1110, 1103, 1111, 1106, 559, 1196, 895, 1104,
	1105, 1351, 1349, 892, 890, 539, 891, 51, 549, 446,
	524, 888, 894, 1112, 1385, 1164, 1402, 477, 210, 210,
	210, 895, 558, 895, 732, 560, 1442, 81, 961, 1443,
	1119, 1441, 1117, 81, 820, 1223, 341, 523, 522, 457,
	1359, 458, 444, 1184, 459, 637, 1146, 561, 562, 612,
	561, 562, 617, 571, 524, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 522, 586, 589, 589, 589, 595,
	589, 589, 595, 589, 603, 604, 605, 606, 607, 608,
	524, 618, 515, 1148, 739, 699, 942, 503, 466, 467,
	468, 590, 592, 594, 596, 598, 600, 601, 591, 593,
	941, 597, 599, 622, 602, 733, 960, 627, 70, 775,
	1082, 631, 998, 820, 997, 1010, 1150, 1390, 1154, 54,
	1149, 738, 1147, 773, 774, 772, 519, 1152, 946, 771,
	1408, 523, 522, 999, 1305, 210, 1151, 940, 523, 522,
	81, 451, 1449, 1304, 71, 210, 210, 81, 524, 1153,
	1155, 210, 1097, 22, 210, 524, 899, 210, 523, 522,
	1096, 210, 900, 81, 81, 1166, 1085, 1383, 81, 81,
	81, 210, 81, 81, 196, 524, 758, 760, 761, 81,
	81, 1450, 759, 523, 522, 977, 978, 979, 937, 934,
	935, 1410, 933, 542, 543, 544, 545, 546, 539, 1386,
	524, 549, 475, 719, 792, 504, 793, 81, 1066, 475,
	1067, 210, 1322, 253, 1302, 743, 744, 81, 453, 454,
	1129, 745, 1094, 944, 947, 475, 475, 1347, 1426, 765,
	475, 475, 475, 1239, 475, 475, 1077, 711, 1072, 327,
	328, 475, 475, 538, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 794, 770, 549, 300, 939,
	716, 81, 766, 523, 522, 1412, 504, 764, 715, 769,
	1347, 1398, 1347, 504, 1347, 1377, 504, 810, 813, 747,
	524, 938, 700, 821, 1347, 1346, 1294, 1293, 1278, 504,
	79, 1275, 504, 805, 81, 81, 1229, 1228, 762, 1225,
	1226, 210, 1225, 1224, 992, 504, 836, 504, 1356, 210,
	698, 210, 695, 51, 210, 210, 803, 504, 210, 210,
	210, 81, 644, 643, 625, 943, 343, 472, 575, 465,
	341, 24, 795, 796, 81, 1355, 1219, 58, 1171, 625,
	945, 1183, 617, 881, 861, 24, 1135, 617, 863, 829,
	817, 617, 897, 746, 1183, 1022, 1056, 803, 860, 1023,
	624, 835, 719, 911, 912, 913, 626, 1271, 628, 1358,
	24, 851, 852, 1327, 1056, 836, 618, 992, 1227, 54,
	618, 626, 859, 624, 1195, 1068, 836, 867, 210, 81,
	992, 81, 868, 54, 864, 81, 81, 210, 210, 836,
	210, 210, 806, 807, 210, 81, 812, 815, 816, 869,
	925, 802, 804, 884, 1016, 1015, 992, 1183, 54, 1123,
	624, 210, 630, 210, 210, 741, 210, 709, 54, 1418,
	1311, 828, 904, 830, 831, 255, 1283, 924, 1215, 1071,
	765, 920, 905, 906, 907, 908, 915, 921, 922, 1187,
	1188, 475, 914, 475, 927, 753, 1435, 1431, 916, 917,
	918, 291, 290, 293, 294, 295, 296, 475, 1217, 1190,
	292, 297, 1171, 766, 343, 1098, 343, 343, 968, 343,
	343, 1193, 343, 54, 343, 735, 713, 1192, 1036, 1039,
	1037, 1035, 969, 343, 1040, 1038, 770, 259, 260, 1422,
	970, 841, 844, 845, 846, 842, 1415, 843, 847, 769,
	965, 1187, 1188, 841, 844, 845, 846, 842, 981, 843,
	847, 1131, 518, 527, 982, 1089, 1420, 210, 210, 210,
	210, 210, 1029, 1041, 975, 845, 846, 516, 974, 210,
	506, 642, 210, 81, 473, 1081, 1392, 210, 1391, 1269,
	1024, 210, 507, 1325, 1079, 1073, 1307, 930, 712, 849,
	617, 617, 617, 617, 617, 518, 1009, 256, 257, 805,
	81, 250, 973, 1363, 251, 617, 1313, 58, 976, 881,
	972, 1057, 1069, 1362, 617, 1025, 1026, 1056, 268, 618,
	618, 618, 618, 618, 497, 343, 1004, 1042, 1001, 1031,
	1032, 639, 1034, 730, 851, 1054, 1058, 1053, 1059, 1030,
	1086, 1087, 1033, 618, 520, 1061, 1437, 1436, 81, 81,
	1437, 1373, 1300, 736, 60, 991, 1088, 62, 1090, 1091,
	1092, 55, 1078, 989, 1, 1429, 1238, 990, 1074, 1075,
	1308, 936, 1393, 1007, 994, 995, 996, 81, 1340, 1209,
	887, 1002, 878, 69, 1005, 1006, 443, 68, 1384, 1095,
	1012, 886, 210, 885, 1014, 1348, 1101, 1017, 1018, 1019,
	1020, 81, 1298, 898, 1083, 901, 1114, 1216, 1080, 1389,
	1137, 475, 650, 648, 649, 647, 652, 651, 646, 1044,
	224, 336, 638, 926, 521, 72, 1116, 1115, 932, 1128,
	491, 492, 226, 557, 971, 1062, 342, 1178, 343, 475,
	742, 510, 1361, 1167, 1312, 343, 81, 81, 1172, 1029,
	264, 1163, 1008, 1139, 1138, 584, 818, 276, 1144, 757,
	1156, 343, 343, 289, 1157, 286, 343, 343, 343, 287,
	343, 343, 748, 1177, 81, 1021, 766, 343, 343, 531,
	274, 968, 266, 616, 609, 840, 838, 837, 331, 81,
	1175, 81, 81, 1189, 1191, 1185, 1045, 1046, 881, 1201,
	881, 615, 1182, 1208, 1134, 749, 1176, 1264, 51, 1368,
	752, 26, 1200, 59, 261, 527, 19, 18, 343, 210,
	17, 20, 16, 15, 14, 461, 1207, 30, 1212, 21,
	13, 12, 1203, 1220, 1221, 11, 210, 10, 9, 8,
	7, 6, 81, 1213, 1214, 81, 81, 210, 5, 4,
	252, 23, 2, 81, 0, 0, 210, 0, 0, 797,
	1143, 0, 1137, 0, 0, 0, 1231, 0, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 1232, 0,
	1234, 0, 0, 1243, 0, 0, 1245, 0, 0, 617,
	0, 0, 826, 827, 0, 0, 1252, 563, 564, 565,
	566, 567, 568, 569, 570, 0, 0, 0, 0, 1244,
	1029, 0, 0, 0, 1194, 0, 81, 0, 618, 343,
	0, 0, 1270, 0, 0, 1280, 1279, 0, 81, 0,
	0, 0, 343, 0, 0, 1285, 81, 881, 1286, 1292,
	1069, 0, 0, 0, 0, 1263, 0, 0, 0, 0,
	0, 81, 0, 0, 474, 0, 0, 0, 81, 1301,
	0, 1303, 0, 0, 0, 1249, 1250, 1310, 1251, 0,
	0, 1253, 0, 1255, 0, 0, 0, 0, 0, 0,
	1288, 1289, 1290, 0, 0, 1314, 0, 343, 0, 343,
	0, 0, 0, 948, 949, 0, 81, 81, 0, 81,
	0, 508, 512, 343, 81, 0, 210, 1246, 0, 81,
	81, 81, 210, 475, 1248, 81, 1326, 1333, 530, 0,
	0, 0, 1328, 0, 0, 1257, 1258, 0, 0, 343,
	1295, 1339, 81, 1345, 0, 1334, 1352, 0, 1175, 0,
	1336, 1337, 1338, 0, 0, 1272, 1273, 1274, 1353, 1277,
	1354, 0, 0, 574, 1176, 0, 0, 1329, 0, 0,
	0, 0, 585, 1360, 1374, 0, 0, 0, 81, 1291,
	0, 1382, 0, 1381, 0, 0, 0, 1375, 0, 81,
	81, 0, 0, 0, 0, 0, 0, 1396, 1310, 881,
	1357, 1400, 1397, 0, 1175, 0, 0, 81, 0, 1405,
	1029, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	1176, 0, 51, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 1414, 822, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 0, 0, 1419, 1421, 0, 81,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	767, 1434, 0, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 343, 1445,
	1423, 0, 483, 484, 0, 485, 486, 0, 487, 0,
	490, 1268, 0, 0, 0, 1364, 1365, 1366, 1367, 500,
	0, 0, 1371, 1372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1378, 1379, 1380, 825, 0,
	1432, 0, 0, 0, 0, 0, 1099, 343, 509, 0,
	538, 537, 547, 548, 540, 541, 542, 543, 544, 545,
	546, 539, 0, 0, 549, 0, 0, 1401, 0, 24,
	25, 52, 27, 28, 1406, 343, 0, 0, 734, 0,
	0, 0, 0, 0, 208, 0, 0, 238, 43, 0,
	0, 0, 1411, 29, 48, 49, 0, 0, 0, 343,
	0, 0, 0, 755, 756, 0, 0, 0, 0, 0,
	0, 0, 265, 38, 0, 334, 0, 54, 0, 0,
	208, 0, 208, 0, 0, 0, 620, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 1446, 1447, 0,
	0, 822, 0, 0, 1179, 1181, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 574, 0, 549, 808,
	809, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1181, 0, 0, 0, 0, 0, 0, 31,
	32, 34, 33, 36, 0, 50, 0, 343, 0, 343,
	1211, 0, 0, 332, 0, 0, 0, 0, 447, 0,
	449, 0, 0, 0, 0, 0, 37, 44, 45, 0,
	0, 46, 47, 35, 0, 0, 0, 0, 875, 0,
	0, 0, 983, 984, 985, 0, 39, 40, 0, 41,
	42, 0, 0, 0, 696, 0, 0, 0, 0, 0,
	1235, 703, 0, 1240, 1241, 0, 208, 0, 0, 208,
	0, 343, 0, 0, 0, 208, 0, 720, 721, 0,
	0, 208, 722, 723, 724, 0, 726, 727, 0, 533,
	0, 536, 0, 728, 729, 0, 0, 550, 551, 552,
	553, 554, 555, 556, 0, 534, 535, 532, 0, 538,
	537, 547, 548, 540, 541, 542, 543, 544, 545, 546,
	539, 0, 822, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1048, 0, 53, 0, 1267, 966,
	967, 0, 512, 0, 456, 0, 343, 462, 0, 0,
	0, 0, 0, 469, 1297, 0, 0, 0, 0, 471,
	1262, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	0, 0, 0, 0, 0, 0, 343, 538, 537, 547,
	548, 540, 541, 542, 543, 544, 545, 546, 539, 0,
	0, 549, 0, 0, 0, 0, 208, 208, 208, 0,
	0, 0, 0, 0, 993, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 1331, 0, 1332, 0, 0,
	0, 1011, 1297, 0, 0, 0, 0, 1297, 1297, 1297,
	0, 0, 0, 1211, 0, 538, 537, 547, 548, 540,
	541, 542, 543, 544, 545, 546, 539, 0, 0, 549,
	1297, 0, 0, 0, 0, 0, 1141, 1142, 537, 547,
	548, 540, 541, 542, 543, 544, 545, 546, 539, 1158,
	1159, 549, 1160, 1161, 611, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 1168, 1169, 1388, 0, 1261, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 343, 0,
	0, 0, 0, 929, 0, 931, 0, 0, 0, 0,
	0, 0, 822, 208, 0, 1407, 0, 0, 0, 957,
	0, 0, 0, 208, 208, 0, 0, 0, 0, 208,
	0, 0, 208, 0, 1413, 208, 0, 0, 0, 718,
	1260, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	1218, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 1130, 538, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 645, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 701, 702, 0, 0, 0, 0, 708, 0, 1247,
	332, 1165, 0, 714, 0, 538, 537, 547, 548, 540,
	541, 542, 543, 544, 545, 546, 539, 725, 1259, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 265, 265, 0, 0, 265,
	265, 265, 0, 0, 0, 823, 0, 1202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 0, 0, 0, 265, 265, 265, 265, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 857,
	0, 0, 208, 208, 0, 0, 208, 865, 718, 0,
	0, 0, 0, 538, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 1140, 0, 0, 0, 1316, 1317,
	1318, 1319, 1320, 1100, 0, 0, 1323, 1324, 0, 0,
	0, 0, 0, 0, 221, 538, 537, 547, 548, 540,
	541, 542, 543, 544, 545, 546, 539, 834, 0, 549,
	0, 1127, 0, 0, 0, 0, 208, 1266, 234, 0,
	0, 862, 0, 0, 0, 208, 208, 574, 208, 208,
	0, 0, 208, 0, 0, 1281, 0, 0, 1282, 0,
	0, 1284, 0, 0, 0, 0, 0, 1287, 0, 208,
	0, 962, 963, 0, 208, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 265, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 667, 0, 0, 0, 225, 220, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 951, 0, 954, 955, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 223, 265, 0,
	0, 0, 0, 233, 0, 0, 0, 958, 0, 0,
	0, 0, 964, 0, 0, 0, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	0, 1438, 0, 0, 823, 208, 208, 208, 208, 208,
	655, 0, 0, 0, 0, 0, 0, 1043, 0, 0,
	208, 0, 0, 0, 0, 857, 227, 217, 218, 208,
	228, 229, 230, 232, 0, 231, 237, 0, 0, 0,
	219, 222, 0, 215, 236, 235, 0, 668, 538, 537,
	547, 548, 540, 541, 542, 543, 544, 545, 546, 539,
	0, 0, 549, 1399, 574, 0, 0, 0, 0, 681,
	684, 685, 686, 687, 688, 689, 0, 690, 691, 692,
	693, 694, 669, 670, 671, 672, 653, 654, 682, 988,
	656, 0, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 673, 674, 675, 676, 677, 678, 679, 680,
	538, 537, 547, 548, 540, 541, 542, 543, 544, 545,
	546, 539, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1306, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 0, 683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1230, 0, 0, 0, 0,
	0, 0, 823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 431, 420, 0, 391, 434, 369,
	383, 442, 384, 385, 413, 355, 399, 139, 381, 0,
	372, 350, 378, 351, 370, 393, 103, 396, 368, 422,
	402, 433, 120, 440, 122, 407, 0, 160, 131, 0,
	0, 395, 424, 397, 418, 390, 414, 360, 406, 435,
	382, 411, 436, 0, 0, 0, 80, 0, 882, 883,
	0, 0, 0, 0, 0, 96, 0, 409, 430, 380,
	410, 412, 349, 408, 0, 353, 356, 441, 426, 375,
	376, 1070, 823, 0, 0, 0, 0, 0, 394, 398,
	415, 388, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 389, 211, 429, 387, 386, 432,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 423, 371, 379, 99, 377, 153, 141, 176,
	404, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 1409, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 352,
	0, 161, 178, 195, 94, 367, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 363, 366, 361, 362, 400, 401, 437,
	438, 439, 417, 358, 0, 364, 365, 0, 421, 427,
	428, 403, 82, 89, 121, 192, 148, 106, 179, 431,
	420, 0, 391, 434, 369, 383, 442, 384, 385, 413,
	355, 399, 139, 381, 0, 372, 350, 378, 351, 370,
	393, 103, 396, 368, 422, 402, 433, 120, 440, 122,
	407, 0, 160, 131, 0, 0, 395, 424, 397, 418,
	390, 414, 360, 406, 435, 382, 411, 436, 0, 0,
	0, 80, 0, 882, 883, 0, 0, 0, 0, 0,
	96, 0, 409, 430, 380, 410, 412, 349, 408, 0,
	353, 356, 441, 426, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 394, 398, 415, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 373, 0, 405, 0,
	0, 0, 357, 354, 0, 0, 392, 0, 0, 0,
	359, 0, 374, 416, 0, 348, 109, 419, 425, 389,
	211, 429, 387, 386, 432, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 423, 371, 379,
	99, 377, 153, 141, 176, 404, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 352, 0, 161, 178, 195, 94,
	367, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 363, 366,
	361, 362, 400, 401, 437, 438, 439, 417, 358, 0,
	364, 365, 0, 421, 427, 428, 403, 82, 89, 121,
	192, 148, 106, 179, 431, 420, 0, 391, 434, 369,
	383, 442, 384, 385, 413, 355, 399, 139, 381, 0,
	372, 350, 378, 351, 370, 393, 103, 396, 368, 422,
	402, 433, 120, 440, 122, 407, 0, 160, 131, 0,
	0, 395, 424, 397, 418, 390, 414, 360, 406, 435,
	382, 411, 436, 54, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 409, 430, 380,
	410, 412, 349, 408, 0, 353, 356, 441, 426, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 394, 398,
	415, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 389, 211, 429, 387, 386, 432,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 423, 371, 379, 99, 377, 153, 141, 176,
	404, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 352,
	0, 161, 178, 195, 94, 367, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 363, 366, 361, 362, 400, 401, 437,
	438, 439, 417, 358, 0, 364, 365, 0, 421, 427,
	428, 403, 82, 89, 121, 192, 148, 106, 179, 431,
	420, 0, 391, 434, 369, 383, 442, 384, 385, 413,
	355, 399, 139, 381, 0, 372, 350, 378, 351, 370,
	393, 103, 396, 368, 422, 402, 433, 120, 440, 122,
	407, 0, 160, 131, 0, 0, 395, 424, 397, 418,
	390, 414, 360, 406, 435, 382, 411, 436, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 409, 430, 380, 410, 412, 349, 408, 0,
	353, 356, 441, 426, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 394, 398, 415, 388, 0, 0, 0,
	0, 0, 0, 0, 1136, 0, 373, 0, 405, 0,
	0, 0, 357, 354, 0, 0, 392, 0, 0, 0,
	359, 0, 374, 416, 0, 348, 109, 419, 425, 389,
	211, 429, 387, 386, 432, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 423, 371, 379,
	99, 377, 153, 141, 176, 404, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 352, 0, 161, 178, 195, 94,
	367, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 363, 366,
	361, 362, 400, 401, 437, 438, 439, 417, 358, 0,
	364, 365, 0, 421, 427, 428, 403, 82, 89, 121,
	192, 148, 106, 179, 431, 420, 0, 391, 434, 369,
	383, 442, 384, 385, 413, 355, 399, 139, 381, 0,
	372, 350, 378, 351, 370, 393, 103, 396, 368, 422,
	402, 433, 120, 440, 122, 407, 0, 160, 131, 0,
	0, 395, 424, 397, 418, 390, 414, 360, 406, 435,
	382, 411, 436, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 409, 430, 380,
	410, 412, 349, 408, 0, 353, 356, 441, 426, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 394, 398,
	415, 388, 0, 0, 0, 0, 0, 0, 0, 866,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 389, 211, 429, 387, 386, 432,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 423, 371, 379, 99, 377, 153, 141, 176,
	404, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 352,
	0, 161, 178, 195, 94, 367, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 363, 366, 361, 362, 400, 401, 437,
	438, 439, 417, 358, 0, 364, 365, 0, 421, 427,
	428, 403, 82, 89, 121, 192, 148, 106, 179, 431,
	420, 0, 391, 434, 369, 383, 442, 384, 385, 413,
	355, 399, 139, 381, 0, 372, 350, 378, 351, 370,
	393, 103, 396, 368, 422, 402, 433, 120, 440, 122,
	407, 0, 160, 131, 0, 0, 395, 424, 397, 418,
	390, 414, 360, 406, 435, 382, 411, 436, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 409, 430, 380, 410, 412, 349, 408, 0,
	353, 356, 441, 426, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 394, 398, 415, 388, 0, 0, 0,
	0, 0, 0, 0, 763, 0, 373, 0, 405, 0,
	0, 0, 357, 354, 0, 0, 392, 0, 0, 0,
	359, 0, 374, 416, 0, 348, 109, 419, 425, 389,
	211, 429, 387, 386, 432, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 423, 371, 379,
	99, 377, 153, 141, 176, 404, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 352, 0, 161, 178, 195, 94,
	367, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 363, 366,
	361, 362, 400, 401, 437, 438, 439, 417, 358, 0,
	364, 365, 0, 421, 427, 428, 403, 82, 89, 121,
	192, 148, 106, 179, 431, 420, 0, 391, 434, 369,
	383, 442, 384, 385, 413, 355, 399, 139, 381, 0,
	372, 350, 378, 351, 370, 393, 103, 396, 368, 422,
	402, 433, 120, 440, 122, 407, 0, 160, 131, 0,
	0, 395, 424, 397, 418, 390, 414, 360, 406, 435,
	382, 411, 436, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 409, 430, 380,
	410, 412, 349, 408, 0, 353, 356, 441, 426, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 394, 398,
	415, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 389, 211, 429, 387, 386, 432,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 423, 371, 379, 99, 377, 153, 141, 176,
	404, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 352,
	0, 161, 178, 195, 94, 367, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 363, 366, 361, 362, 400, 401, 437,
	438, 439, 417, 358, 0, 364, 365, 0, 421, 427,
	428, 403, 82, 89, 121, 192, 148, 106, 179, 431,
	420, 0, 391, 434, 369, 383, 442, 384, 385, 413,
	355, 399, 139, 381, 0, 372, 350, 378, 351, 370,
	393, 103, 396, 368, 422, 402, 433, 120, 440, 122,
	407, 0, 160, 131, 0, 0, 395, 424, 397, 418,
	390, 414, 360, 406, 435, 382, 411, 436, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 409, 430, 380, 410, 412, 349, 408, 0,
	353, 356, 441, 426, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 394, 398, 415, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 373, 0, 405, 0,
	0, 0, 357, 354, 0, 0, 392, 0, 0, 0,
	359, 0, 374, 416, 0, 348, 109, 419, 425, 389,
	211, 429, 387, 386, 432, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 423, 371, 379,
	99, 377, 153, 141, 176, 404, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 352, 0, 161, 178, 195, 94,
	367, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 363, 366,
	361, 362, 400, 401, 437, 438, 439, 417, 358, 0,
	364, 365, 0, 421, 427, 428, 403, 82, 89, 121,
	192, 148, 106, 179, 431, 420, 0, 391, 434, 369,
	383, 442, 384, 385, 413, 355, 399, 139, 381, 0,
	372, 350, 378, 351, 370, 393, 103, 396, 368, 422,
	402, 433, 120, 440, 122, 407, 0, 160, 131, 0,
	0, 395, 424, 397, 418, 390, 414, 360, 406, 435,
	382, 411, 436, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 409, 430, 380,
	410, 412, 349, 408, 0, 353, 356, 441, 426, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 394, 398,
	415, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 389, 211, 429, 387, 386, 432,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 423, 371, 379, 99, 377, 153, 141, 176,
	404, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 346, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 352,
	0, 161, 178, 195, 94, 367, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	347, 345, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 363, 366, 361, 362, 400, 401, 437,
	438, 439, 417, 358, 0, 364, 365, 0, 421, 427,
	428, 403, 82, 89, 121, 192, 148, 106, 179, 431,
	420, 0, 391, 434, 369, 383, 442, 384, 385, 413,
	355, 399, 139, 381, 0, 372, 350, 378, 351, 370,
	393, 103, 396, 368, 422, 402, 433, 120, 440, 122,
	407, 0, 160, 131, 0, 0, 395, 424, 397, 418,
	390, 414, 360, 406, 435, 382, 411, 436, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 409, 430, 380, 410, 412, 349, 408, 0,
	353, 356, 441, 426, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 394, 398, 415, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 373, 0, 405, 0,
	0, 0, 357, 354, 0, 0, 392, 0, 0, 0,
	359, 0, 374, 416, 0, 348, 109, 419, 425, 389,
	211, 429, 387, 386, 432, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 423, 371, 379,
	99, 377, 153, 141, 176, 404, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 352, 0, 161, 178, 195, 94,
	367, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 363, 366,
	361, 362, 400, 401, 437, 438, 439, 417, 358, 0,
	364, 365, 0, 421, 427, 428, 403, 82, 89, 121,
	192, 148, 106, 179, 431, 420, 0, 391, 434, 369,
	383, 442, 384, 385, 413, 355, 399, 139, 381, 0,
	372, 350, 378, 351, 370, 393, 103, 396, 368, 422,
	402, 433, 120, 440, 122, 407, 0, 160, 131, 0,
	0, 395, 424, 397, 418, 390, 414, 360, 406, 435,
	382, 411, 436, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 409, 430, 380,
	410, 412, 349, 408, 0, 353, 356, 441, 426, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 394, 398,
	415, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 389, 211, 429, 387, 386, 432,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 423, 371, 379, 99, 377, 153, 141, 176,
	404, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 632, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 346, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 352,
	0, 161, 178, 195, 94, 367, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	347, 345, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 363, 366, 361, 362, 400, 401, 437,
	438, 439, 417, 358, 0, 364, 365, 0, 421, 427,
	428, 403, 82, 89, 121, 192, 148, 106, 179, 431,
	420, 0, 391, 434, 369, 383, 442, 384, 385, 413,
	355, 399, 139, 381, 0, 372, 350, 378, 351, 370,
	393, 103, 396, 368, 422, 402, 433, 120, 440, 122,
	407, 0, 160, 131, 0, 0, 395, 424, 397, 418,
	390, 414, 360, 406, 435, 382, 411, 436, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 409, 430, 380, 410, 412, 349, 408, 0,
	353, 356, 441, 426, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 394, 398, 415, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 373, 0, 405, 0,
	0, 0, 357, 354, 0, 0, 392, 0, 0, 0,
	359, 0, 374, 416, 0, 348, 109, 419, 425, 389,
	211, 429, 387, 386, 432, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 423, 371, 379,
	99, 377, 153, 141, 176, 404, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 337,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 346, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 352, 0, 161, 178, 195, 94,
	367, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 347, 345, 340, 339, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 363, 366,
	361, 362, 400, 401, 437, 438, 439, 417, 358, 0,
	364, 365, 0, 421, 427, 428, 403, 82, 89, 121,
	192, 148, 106, 179, 139, 0, 0, 0, 0, 272,
	0, 0, 0, 103, 0, 269, 0, 0, 0, 120,
	312, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	303, 304, 0, 0, 0, 0, 0, 0, 873, 0,
	54, 0, 0, 270, 291, 290, 293, 294, 295, 296,
	0, 0, 96, 292, 297, 298, 299, 874, 0, 0,
	267, 284, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 282, 0, 0, 0, 0,
	325, 0, 283, 0, 0, 278, 279, 280, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 211, 0, 0, 323, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 191, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	194, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	195, 94, 0, 157, 166, 185, 186, 187, 188, 189,
	190, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 193, 140, 154, 98, 177, 159,
	313, 324, 319, 320, 317, 318, 316, 315, 314, 326,
	305, 306, 307, 308, 310, 0, 321, 322, 309, 82,
	89, 121, 192, 148, 106, 179, 139, 0, 0, 799,
	0, 272, 0, 0, 0, 103, 0, 269, 0, 0,
	0, 120, 312, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 303, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 270, 291, 290, 293, 294,
	295, 296, 0, 0, 96, 292, 297, 298, 299, 0,
	0, 0, 267, 284, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 282, 263, 0,
	0, 0, 325, 0, 283, 0, 0, 278, 279, 280,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 211, 0, 0, 323, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	191, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 194, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 195, 94, 0, 157, 166, 185, 186, 187,
	188, 189, 190, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 193, 140, 154, 98,
	177, 159, 313, 324, 319, 320, 317, 318, 316, 315,
	314, 326, 305, 306, 307, 308, 310, 0, 321, 322,
	309, 82, 89, 121, 192, 148, 106, 179, 139, 0,
	0, 0, 0, 272, 0, 0, 0, 103, 0, 269,
	0, 0, 0, 120, 312, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 504, 270, 291, 290,
	293, 294, 295, 296, 0, 0, 96, 292, 297, 298,
	299, 0, 0, 0, 267, 284, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 282,
	0, 0, 0, 0, 325, 0, 283, 0, 0, 278,
	279, 280, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 211, 0, 0, 323,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 195, 94, 0, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 313, 324, 319, 320, 317, 318,
	316, 315, 314, 326, 305, 306, 307, 308, 310, 0,
	321, 322, 309, 82, 89, 121, 192, 148, 106, 179,
	139, 0, 0, 0, 0, 272, 0, 0, 0, 103,
	0, 269, 0, 0, 0, 120, 312, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 303, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 270,
	291, 290, 293, 294, 295, 296, 0, 0, 96, 292,
	297, 298, 299, 0, 0, 0, 267, 284, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 282, 263, 0, 0, 0, 325, 0, 283, 0,
	0, 278, 279, 280, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 211, 0,
	0, 323, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 195, 94, 0, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 313, 324, 319, 320,
	317, 318, 316, 315, 314, 326, 305, 306, 307, 308,
	310, 0, 321, 322, 309, 82, 89, 121, 192, 148,
	106, 179, 139, 0, 0, 0, 0, 272, 0, 0,
	0, 103, 0, 269, 0, 0, 0, 120, 312, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 270, 291, 814, 293, 294, 295, 296, 0, 0,
	96, 292, 297, 298, 299, 0, 0, 0, 267, 284,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 282, 263, 0, 0, 0, 325, 0,
	283, 0, 0, 278, 279, 280, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	211, 0, 0, 323, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 195, 94,
	0, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 313, 324,
	319, 320, 317, 318, 316, 315, 314, 326, 305, 306,
	307, 308, 310, 0, 321, 322, 309, 82, 89, 121,
	192, 148, 106, 179, 139, 0, 0, 0, 0, 272,
	0, 0, 0, 103, 0, 269, 0, 0, 0, 120,
	312, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	303, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 270, 291, 811, 293, 294, 295, 296,
	0, 0, 96, 292, 297, 298, 299, 0, 0, 0,
	267, 284, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 282, 263, 0, 0, 0,
	325, 0, 283, 0, 0, 278, 279, 280, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 211, 0, 0, 323, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 191, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	194, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	195, 94, 0, 157, 166, 185, 186, 187, 188, 189,
	190, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 193, 140, 154, 98, 177, 159,
	313, 324, 319, 320, 317, 318, 316, 315, 314, 326,
	305, 306, 307, 308, 310, 24, 321, 322, 309, 82,
	89, 121, 192, 148, 106, 179, 0, 139, 0, 0,
	0, 0, 272, 0, 0, 0, 103, 0, 269, 0,
	0, 0, 120, 312, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 303, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 270, 291, 290, 293,
	294, 295, 296, 0, 0, 96, 292, 297, 298, 299,
	0, 0, 0, 267, 284, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 282, 0,
	0, 0, 0, 325, 0, 283, 0, 0, 278, 279,
	280, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 211, 0, 0, 323, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 195, 94, 0, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 313, 324, 319, 320, 317, 318, 316,
	315, 314, 326, 305, 306, 307, 308, 310, 0, 321,
	322, 309, 82, 89, 121, 192, 148, 106, 179, 139,
	0, 0, 0, 0, 272, 0, 0, 0, 103, 0,
	269, 0, 0, 0, 120, 312, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 270, 291,
	290, 293, 294, 295, 296, 0, 0, 96, 292, 297,
	298, 299, 0, 0, 0, 267, 284, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	282, 0, 0, 0, 0, 325, 0, 283, 0, 0,
	278, 279, 280, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 211, 0, 0,
	323, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 191, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 194, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 195, 94, 0, 157, 166,
	185, 186, 187, 188, 189, 190, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 193,
	140, 154, 98, 177, 159, 313, 324, 319, 320, 317,
	318, 316, 315, 314, 326, 305, 306, 307, 308, 310,
	0, 321, 322, 309, 82, 89, 121, 192, 148, 106,
	179, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 120, 312, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 303, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	270, 291, 290, 293, 294, 295, 296, 0, 0, 96,
	292, 297, 298, 299, 0, 0, 0, 0, 284, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 282, 0, 0, 0, 0, 325, 0, 283,
	0, 0, 278, 279, 280, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 211,
	0, 0, 323, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 1439, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 195, 94, 0,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 313, 324, 319,
	320, 317, 318, 316, 315, 314, 326, 305, 306, 307,
	308, 310, 0, 321, 322, 309, 82, 89, 121, 192,
	148, 106, 179, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 120, 312,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 504, 270, 291, 290, 293, 294, 295, 296, 0,
	0, 96, 292, 297, 298, 299, 0, 0, 0, 0,
	284, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 282, 0, 0, 0, 0, 325,
	0, 283, 0, 0, 278, 279, 280, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 211, 0, 0, 323, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 195,
	94, 0, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 313,
	324, 319, 320, 317, 318, 316, 315, 314, 326, 305,
	306, 307, 308, 310, 0, 321, 322, 309, 82, 89,
	121, 192, 148, 106, 179, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 312, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 303, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 270, 291, 290, 293, 294, 295,
	296, 0, 0, 96, 292, 297, 298, 299, 0, 0,
	0, 0, 284, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 282, 0, 0, 0,
	0, 325, 0, 283, 0, 0, 278, 279, 280, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 211, 0, 0, 323, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 191,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 194, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 195, 94, 0, 157, 166, 185, 186, 187, 188,
	189, 190, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 193, 140, 154, 98, 177,
	159, 313, 324, 319, 320, 317, 318, 316, 315, 314,
	326, 305, 306, 307, 308, 310, 0, 321, 322, 309,
	82, 89, 121, 192, 148, 106, 179, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 211, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 195, 94, 0, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 89, 121, 192, 148, 106, 179, 139,
	0, 0, 0, 526, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	528, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 523, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	524, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 211, 0, 0,
	0, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 191, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 194, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 195, 94, 0, 157, 166,
	185, 186, 187, 188, 189, 190, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 193,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 192, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 76, 77, 0,
	73, 0, 0, 0, 78, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 195, 94,
	0, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 89, 121,
	192, 148, 106, 179, 139, 0, 0, 0, 856, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 858, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 211, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 191, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	194, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	195, 94, 0, 157, 166, 185, 186, 187, 188, 189,
	190, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 193, 140, 154, 98, 177, 159,
	0, 0, 0, 0, 0, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 192, 148, 106, 179, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 211, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 195, 94, 0, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 192, 148, 106, 179, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 211, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 195, 94, 0, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 89, 121, 192, 148,
	106, 179, 139, 0, 0, 0, 856, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 858, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	211, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 854, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 195, 94,
	0, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	192, 148, 106, 179, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 750, 0, 0,
	751, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 211, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 191,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 194, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 195, 94, 0, 157, 166, 185, 186, 187, 188,
	189, 190, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 193, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 192, 148, 106, 179, 103, 0, 641,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 640,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 211, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 195, 94, 0, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 192, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 211,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 195, 94, 0,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 192,
	148, 106, 179, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 858, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 211, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 191, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	194, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	195, 94, 0, 157, 166, 185, 186, 187, 188, 189,
	190, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 193, 140, 154, 98, 177, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 192, 148, 106, 179, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 528, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 211, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 195, 94, 0, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 82, 89, 121, 192, 148, 106, 179, 610,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 211,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 195, 94, 0,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 192,
	148, 106, 179, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 211, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 191, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	194, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	195, 94, 0, 157, 166, 185, 186, 187, 188, 189,
	190, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 193, 140, 154, 98, 177, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 192, 148, 106, 179, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 206, 0, 211, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 195, 94, 0, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 192, 148, 106, 179, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 211, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 195, 94, 0, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 192, 148,
	106, 179, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 211, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 195,
	94, 0, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 192, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 211, 0, 0, 0, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	191, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 194, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 195, 94, 0, 157, 166, 185, 186, 187,
	188, 189, 190, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 193, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 89, 121, 192, 148, 106, 179,
}
var yyPact = [...]int{

	1513, -1000, -183, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 872, 929, -1000, -1000, -1000, -1000, -1000, -1000,
	364, 9224, 28, 124, 17, 12159, 123, 2141, 12645, -1000,
	8, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -58, -72,
	-1000, 674, -1000, -1000, -1000, -1000, -1000, 864, 868, 739,
	857, 767, -1000, 6712, 95, 95, 11916, 5704, -1000, -1000,
	262, 12645, 119, 12645, -136, 91, 91, 91, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 122, 12645, 233, -1000,
	12645, 88, 582, 88, 88, 88, 12645, -1000, 166, -1000,
	-1000, -1000, 12645, 580, 824, 3319, 82, 3319, 3319, -1000,
	3319, 3319, -1000, 3319, 14, 3319, -69, 892, -1000, -1000,
	-1000, -1000, -14, -1000, 3319, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 530, 831,
	7721, 7721, 872, -1000, 674, -1000, -1000, -1000, 811, -1000,
	-1000, 371, 913, -1000, 8981, 162, -1000, 7721, 1645, 684,
	-1000, -1000, 684, -1000, -1000, 141, -1000, -1000, 8477, 8477,
	8477, 8477, 8477, 8477, 8477, 8477, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	684, -1000, 7469, 684, 684, 684, 684, 684, 684, 684,
	684, 7721, 684, 684, 684, 684, 684, 684, 684, 684,
	684, 684, 684, 684, 684, 684, 684, 11673, 10943, 12645,
	638, 623, -1000, -1000, 153, 677, 5439, -82, -1000, -1000,
	-1000, 273, 10700, -1000, -1000, -1000, 821, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 577, 12645, -1000, 2231, -1000, 565, 3319,
	106, 563, 321, 535, 12645, 12645, 3319, 34, 52, 121,
	12645, 682, 104, 12645, 845, 744, 12645, 521, 513, -1000,
	5174, -1000, 3319, 3319, -1000, -1000, -1000, 3319, 3319, 3319,
	12645, 3319, 3319, -1000, -1000, -1000, -1000, -1000, 3319, 3319,
	-1000, 902, 323, -1000, -1000, -1000, -1000, 7721, -1000, 743,
	-1000, -1000, -1000, -1000, -1000, -1000, 924, 207, 376, 151,
	680, -1000, 501, 864, 530, 767, 10457, 722, -1000, -1000,
	12645, -1000, 7721, 7721, 418, -1000, 11429, -1000, -1000, 4114,
	231, 8477, 375, 343, 8477, 8477, 8477, 8477, 8477, 8477,
	8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477, 457,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 508, -1000,
	674, 713, 713, 190, 190, 190, 190, 190, 190, 190,
	8729, 6208, 530, 571, 275, 7469, 6712, 6712, 7721, 7721,
	7216, 6964, 6712, 854, 266, 275, 12888, -1000, -1000, 8225,
	-1000, -1000, -1000, -1000, -1000, 530, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12402, 12402, 6712, 6712, 6712, 6712, 48,
	12645, -1000, 641, 781, -1000, -1000, -1000, 847, 9962, 684,
	10214, 48, 615, 10943, 12645, -1000, -1000, 10943, 12645, 3849,
	4909, 677, -82, 664, -1000, -98, -87, 5956, 179, -1000,
	-1000, -1000, -1000, 3054, 183, 606, 398, -46, -1000, -1000,
	-1000, 688, -1000, 688, 688, 688, 688, -18, -18, -18,
	-18, -1000, -1000, -1000, -1000, -1000, 708, 702, -1000, 688,
	688, 688, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	697, 697, 697, 693, 693, 711, -1000, 12645, 3319, 844,
	3319, -1000, 381, -1000, 12402, 12402, 12645, 12645, 131, 12645,
	12645, 675, -1000, 12645, 3319, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12645, 326, 12645, 12645, 275, 12645, -1000, 782, 7721, 7721,
	4644, 7721, -1000, -1000, -1000, 831, -1000, 854, 871, -1000,
	814, 810, 6712, -1000, -1000, 231, 301, -1000, -1000, 427,
	-1000, -1000, -1000, -1000, 148, 684, -1000, 2284, -1000, -1000,
	-1000, -1000, 375, 8477, 8477, 8477, 83, 2284, 2346, 1500,
	1793, 190, 403, 403, 210, 210, 210, 210, 210, 169,
	169, -1000, -1000, -1000, 530, -1000, -1000, -1000, 530, 6712,
	671, -1000, -1000, 7721, -1000, 530, 559, 559, 369, 421,
	246, 897, 559, 243, 895, 559, 559, 6712, 345, -1000,
	7721, 530, -1000, 147, -1000, 459, 670, 669, 559, 530,
	559, 559, 635, 684, -1000, 12888, 10943, 10943, 10943, 10943,
	10943, -1000, 759, 756, -1000, 758, 757, 801, 12645, -1000,
	561, 9962, 12402, 164, 684, -1000, 11186, -1000, -1000, 885,
	10943, 654, -1000, 654, -1000, 146, -1000, -1000, 664, -82,
	-93, -1000, -1000, -1000, -1000, 275, -1000, 461, 640, 2789,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 695, 491, -1000,
	837, 208, 206, 489, 836, -1000, -1000, -1000, 826, -1000,
	352, -53, -1000, -1000, 416, -18, -18, -1000, -1000, 179,
	805, 179, 179, 179, 473, 473, -1000, -1000, -1000, -1000,
	410, -1000, -1000, -1000, 402, -1000, 733, 12402, 3319, -1000,
	-1000, -1000, -1000, 171, 171, 215, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 45, 676, -1000,
	-1000, -1000, 32, 31, 100, -1000, 3319, -1000, 323, -1000,
	471, 7721, -1000, -1000, -1000, 792, 275, 275, 145, -1000,
	-1000, 12645, -1000, -1000, -1000, -1000, 645, -1000, -1000, -1000,
	3584, 6712, -1000, 83, 2284, 2081, -1000, 8477, 8477, -1000,
	-1000, 559, 6712, 275, -1000, -1000, -1000, 247, 457, 247,
	8477, 8477, -1000, 8477, 8477, -1000, -151, 632, 244, -1000,
	7721, 396, -1000, 4644, -1000, 8477, 8477, -1000, -1000, -1000,
	-1000, 730, 12888, 684, -1000, 9719, 12402, 672, -1000, 271,
	781, 707, 727, 769, -1000, -1000, -1000, -1000, 755, -1000,
	749, -1000, -1000, -1000, -1000, 530, 639, -1000, 214, -1000,
	117, 116, 108, 12402, -1000, 872, 7721, 654, -1000, -1000,
	191, -1000, -1000, -117, -123, -1000, -1000, -1000, 3054, -1000,
	3054, 12402, 64, -1000, 489, 489, -1000, -1000, -1000, 694,
	726, 8477, -1000, -1000, -1000, 590, 179, 179, -1000, 236,
	-1000, -1000, -1000, 557, -1000, 554, 633, 551, 12645, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 12645, -1000, -1000, -1000, -1000,
	-1000, 12402, -158, 486, 12402, 12402, 12645, -1000, 326, -1000,
	275, -1000, 4379, -1000, 885, 10943, -1000, -1000, 530, -1000,
	8477, 2284, 2284, -1000, -1000, 530, 688, 688, -1000, 688,
	693, -1000, 688, -1, 688, -2, 530, 530, 2039, 1951,
	1899, 1771, 684, -146, -1000, 275, 7721, -1000, 1713, 1406,
	-1000, 832, 596, 622, -1000, -1000, 6460, 530, 546, 140,
	543, -1000, 872, 12888, 7721, -1000, -1000, 7721, 692, -1000,
	7721, -1000, -1000, -1000, 847, 12402, 7721, 684, 684, 684,
	543, 864, 275, -1000, -1000, -1000, -1000, 2789, -1000, 541,
	-1000, 688, -1000, -1000, -1000, 12402, -42, 923, 2284, -1000,
	-1000, -1000, -1000, -1000, -18, 465, -18, 393, -1000, 384,
	3319, -1000, -1000, -1000, -1000, 840, -1000, 4379, -1000, -1000,
	686, -1000, -1000, -1000, 873, 630, -1000, 2284, -1000, -1000,
	112, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8477,
	8477, 8477, 8477, 8477, 530, 463, 275, 8477, 8477, 835,
	-1000, 684, -1000, -1000, 649, 12402, 12402, -1000, 12402, 864,
	-1000, 275, 275, 12402, 275, 12645, -1000, 275, 12402, 12402,
	12402, 9476, -1000, 159, 12402, -1000, 539, -1000, 181, -1000,
	-145, 179, -1000, 179, 589, 562, -1000, 684, 624, -1000,
	268, 12402, 879, 867, -1000, -1000, 459, 459, 459, 459,
	29, -1000, -1000, 459, 459, 922, -1000, 684, -1000, 674,
	138, -1000, -1000, -1000, 529, -1000, 527, 527, 527, 164,
	159, -1000, 420, 242, 450, -1000, 61, 12402, 361, 830,
	-1000, 828, -1000, -1000, -1000, -1000, -1000, 44, 4379, 3054,
	525, -1000, 7721, 7721, -1000, -1000, -1000, -1000, 530, 62,
	-170, -1000, -1000, 12888, 622, 530, 12402, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 380, -1000, -1000, 12645, -1000, -1000,
	442, -1000, -1000, 520, -1000, 12402, -1000, -1000, 676, 275,
	612, -1000, 777, -155, -173, 609, -1000, -1000, -1000, 685,
	-1000, -1000, 44, 802, -158, -1000, 770, -1000, 12402, -1000,
	41, -1000, -166, 482, 38, -171, 715, 684, -176, 714,
	-1000, 917, 7973, -1000, -1000, 921, 199, 199, 459, 530,
	-1000, -1000, -1000, 69, 423, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 1132, 27, 463, 1131, 1130, 1129, 1128, 1121, 1120,
	1119, 1118, 1117, 1115, 1111, 1110, 1109, 1107, 1105, 1104,
	1103, 1102, 1101, 1100, 1097, 1096, 136, 1094, 1093, 1091,
	76, 1090, 73, 1089, 1087, 49, 135, 52, 45, 1030,
	1084, 30, 82, 71, 1081, 1077, 1076, 22, 40, 1075,
	1073, 83, 1068, 1067, 59, 1066, 1065, 1576, 1064, 75,
	1063, 13, 54, 1062, 1060, 1059, 1055, 80, 898, 1052,
	1049, 15, 1045, 1043, 93, 1039, 61, 7, 16, 46,
	24, 1037, 33, 6, 1036, 57, 1035, 1032, 1024, 1022,
	23, 1021, 60, 1020, 17, 64, 1017, 31, 70, 38,
	29, 5, 84, 69, 1016, 21, 66, 55, 1015, 1014,
	484, 1013, 1012, 50, 1011, 1010, 34, 194, 451, 1008,
	1007, 1006, 1005, 42, 0, 568, 9, 81, 1004, 1003,
	1002, 1498, 47, 58, 19, 20, 43, 1234, 41, 1001,
	1000, 44, 998, 997, 996, 995, 994, 993, 992, 98,
	989, 988, 987, 14, 26, 985, 984, 65, 25, 983,
	982, 975, 53, 78, 973, 971, 56, 48, 968, 967,
	966, 963, 962, 37, 12, 960, 18, 959, 10, 958,
	35, 952, 3, 951, 8, 950, 2, 946, 4, 51,
	11, 945, 1, 944, 941, 62, 148, 85, 937, 86,
}
var yyR1 = [...]int{

	0, 193, 194, 194, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 197, 197, 51, 51, 52, 52, 98, 98,
	10, 10, 10, 10, 103, 103, 107, 107, 107, 108,
	108, 108, 108, 139, 139, 11, 11, 11, 11, 11,
	11, 11, 188, 188, 187, 186, 186, 185, 185, 184,
	17, 169, 171, 171, 170, 170, 170, 170, 163, 142,
	142, 142, 142, 145, 145, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 144, 144, 144, 144, 144, 146,
	146, 146, 146, 146, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 148,
	148, 148, 148, 148, 148, 148, 148, 162, 162, 149,
	149, 157, 157, 158, 158, 158, 155, 155, 156, 156,
	159, 159, 159, 151, 151, 152, 152, 160, 160, 153,
	153, 153, 154, 154, 154, 161, 161, 161, 161, 161,
	150, 150, 164, 164, 179, 179, 178, 178, 178, 168,
	168, 175, 175, 175, 175, 175, 166, 166, 167, 167,
	177, 177, 176, 165, 165, 180, 180, 180, 180, 191,
	192, 190, 190, 190, 190, 190, 172, 172, 172, 173,
	173, 173, 174, 174, 174, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 183,
	181, 181, 182, 182, 13, 18, 18, 14, 14, 14,
	14, 14, 15, 15, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 114, 114, 112,
	112, 115, 115, 113, 113, 113, 116, 116, 116, 140,
	140, 140, 21, 21, 23, 23, 24, 25, 22, 22,
	22, 22, 22, 22, 22, 16, 198, 26, 27, 27,
	28, 28, 28, 32, 32, 32, 30, 30, 31, 31,
	37, 37, 36, 36, 38, 38, 38, 38, 128, 128,
	128, 127, 127, 40, 40, 41, 41, 42, 42, 43,
	43, 43, 43, 43, 60, 60, 46, 46, 45, 45,
	47, 97, 97, 99, 99, 44, 44, 44, 44, 48,
	48, 49, 49, 50, 50, 135, 135, 134, 134, 134,
	133, 133, 53, 53, 53, 55, 54, 54, 54, 54,
	56, 56, 58, 58, 57, 57, 59, 61, 61, 61,
	61, 62, 62, 39, 39, 39, 39, 39, 39, 39,
	111, 111, 64, 64, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 75, 75, 75, 75, 75, 75,
	65, 65, 65, 65, 65, 65, 65, 35, 35, 76,
	76, 76, 82, 77, 77, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 72, 72, 72,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 199,
	199, 74, 73, 73, 73, 73, 73, 73, 33, 33,
	33, 33, 33, 138, 138, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 86, 86,
	34, 34, 84, 84, 85, 87, 87, 83, 83, 83,
	67, 67, 67, 67, 67, 67, 67, 67, 69, 69,
	69, 88, 88, 89, 89, 90, 90, 91, 91, 92,
	93, 93, 93, 94, 94, 94, 94, 95, 95, 95,
	66, 66, 66, 66, 66, 66, 96, 96, 96, 96,
	100, 100, 78, 78, 80, 80, 79, 81, 101, 101,
	105, 102, 102, 106, 106, 106, 106, 104, 104, 104,
	130, 130, 130, 109, 109, 117, 117, 118, 118, 110,
	110, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 120, 120, 120, 121, 121, 122, 122, 122, 129,
	129, 125, 125, 126, 126, 131, 131, 132, 132, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 195,
	196, 136, 137, 137, 137,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 7, 5, 5, 5, 12, 7, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 3, 2, 3, 3, 2,
	3, 4, 3, 7, 5, 4, 2, 4, 2, 2,
	2, 2, 3, 3, 5, 2, 3, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 1, 3, 6, 3, 7, 0, 1, 1, 3,
	3, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 8, 8, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -193, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 116, 117, 119, 118, 150, 120, 143, 50, 163,
	164, 166, 167, 25, 144, 145, 148, 149, 31, 32,
	122, -195, 8, 253, 54, -194, 270, -90, 15, -28,
	5, -26, -198, -26, -26, -26, -26, -26, -169, -171,
	54, 90, -122, 126, 72, 245, 123, 124, 130, -125,
	57, -124, 263, 136, 163, 174, 168, 195, 187, 264,
	137, 185, 188, 232, 215, 227, 66, 166, 241, 146,
	183, 179, 177, 27, 229, 200, 268, 178, 228, 122,
	139, 134, 201, 205, 233, 172, 173, 235, 199, 135,
	33, 265, 35, 154, 236, 203, 198, 194, 197, 171,
	193, 39, 207, 206, 208, 231, 190, 140, 180, 18,
	239, 149, 152, 230, 202, 204, 131, 156, 267, 237,
	176, 141, 153, 148, 240, 142, 167, 217, 234, 243,
	38, 212, 170, 133, 164, 160, 218, 191, 155, 181,
	182, 196, 169, 192, 165, 157, 150, 242, 213, 269,
	189, 186, 161, 158, 159, 219, 220, 221, 222, 223,
	224, 162, 266, 238, 184, 214, -110, 126, 222, 128,
	124, 124, 125, 126, 245, 123, 124, -57, -131, 57,
	-124, 126, 124, 109, 188, 232, 116, 216, 217, 229,
	125, 33, 230, 156, -140, 124, -112, 215, 219, 220,
	221, 224, 222, 162, 57, 234, 233, 225, -131, 165,
	-136, -136, -136, -136, -136, 218, 218, -136, -2, -94,
	17, 16, -5, -3, -195, 6, 20, 21, -32, 40,
	41, -27, -38, 100, -39, -131, -63, 74, -68, 29,
	57, -124, 23, -67, -64, -83, -81, -82, 109, 110,
	111, 98, 99, 106, 75, 112, -72, -70, -71, -73,
	59, 58, 67, 60, 61, 62, 63, 68, 69, 70,
	-125, -79, -195, 44, 45, 254, 255, 256, 257, 262,
	258, 77, 34, 244, 252, 251, 250, 248, 249, 246,
	247, 260, 261, 129, 245, 104, 253, -110, -110, 11,
	-51, -52, -57, -59, -131, -102, -139, 165, -106, 234,
	233, -126, -104, -125, -123, 232, 188, 231, 121, 73,
	22, 24, 210, 76, 109, 16, 77, 108, 254, 116,
	48, 246, 247, 244, 256, 257, 245, 216, 29, 10,
	25, 144, 21, 102, 118, 80, 81, 147, 23, 145,
	70, 19, 51, 11, 13, 14, 129, 128, 92, 125,
	46, 8, 112, 26, 89, 42, 28, 44, 90, 17,
	248, 249, 31, 262, 151, 104, 49, 36, 74, 68,
	71, 52, 72, 15, 47, 91, 119, 253, 45, 123,
	6, 259, 30, 143, 43, 124, 79, 260, 261, 127,
	69, 5, 130, 32, 9, 50, 53, 250, 251, 252,
	34, 78, 12, -170, 90, -163, 57, -57, 125, -57,
	253, -118, 129, -118, -118, 124, -57, 116, 118, 121,
	52, -18, -57, -117, 129, 57, -117, -117, -117, -57,
	113, -57, 57, 30, -137, -195, -126, 245, 57, 156,
	124, 157, 126, -137, -137, -137, -137, -137, 160, 161,
	-137, -115, -114, 227, 228, 218, 226, 12, 218, 159,
	-137, -136, -136, -196, 56, -95, 19, 31, -39, -131,
	-91, -92, -39, -90, -2, -26, 36, -30, 21, 65,
	11, -128, 73, 72, 89, -127, 22, -125, 59, 113,
	-39, -65, 92, 74, 90, 91, 76, 95, 94, 105,
	98, 99, 100, 101, 102, 103, 104, 96, 97, 108,
	82, 83, 84, 85, 86, 87, 88, -111, -195, -82,
	-195, 114, 115, -68, -68, -68, -68, -68, -68, -68,
	-68, -195, -2, -77, -39, -195, -195, -195, -195, -195,
	-195, -195, -195, -195, -86, -39, -195, -199, -74, -195,
	-199, -74, -199, -74, -199, -195, -199, -74, -199, -74,
	-199, -199, -74, -195, -195, -195, -195, -195, -195, -58,
	26, -57, -41, -42, -43, -44, -60, -82, -195, 57,
	-57, -57, -51, -197, 55, 11, 53, -197, 55, 113,
	55, -102, 165, -103, -107, 235, 237, 82, -130, -125,
	59, 29, 30, 56, 55, -57, -142, -145, -147, -146,
	-148, -143, -144, 185, 186, 109, 189, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 30, 146, 181,
	182, 183, 184, 201, 202, 203, 204, 205, 206, 207,
	208, 168, 187, 264, 169, 170, 171, 172, 173, 174,
	176, 177, 178, 179, 180, 57, -137, 126, 57, 74,
	57, -57, -57, -137, 158, 158, 124, 124, -57, 55,
	127, -51, 23, 52, -57, 57, 57, -132, -131, -123,
	-137, -137, -137, -137, -137, -57, -137, -137, -137, -137,
	11, -113, 11, 92, -39, 52, 9, 92, 55, 18,
	113, 55, -93, 24, 25, -94, -196, -32, -69, -125,
	60, 63, -31, 43, -57, -39, -39, -75, 68, 74,
	69, 70, -127, 100, -132, -126, -123, -68, -76, -79,
	-82, 64, 92, 90, 91, 76, -68, -68, -68, -68,
	-68, -68, -68, -68, -68, -68, -68, -68, -68, -68,
	-68, -138, 57, 59, 57, -67, -67, -125, -37, 21,
	-36, -38, -196, 55, -196, -2, -36, -36, -39, -39,
	-83, 59, -36, -83, 59, -36, -36, -30, -84, -85,
	78, -83, -125, -131, -196, -68, -125, -125, -36, -37,
	-36, -36, -98, 152, -57, 30, 55, -53, -55, -54,
	-56, 42, 46, 48, 43, 44, 45, 49, -135, 22,
	-41, -195, -195, -134, 152, -133, 22, -131, 59, -98,
	53, -41, -57, -41, -59, -131, 100, -106, -103, 55,
	236, 238, 239, 52, 71, -39, -154, 108, -172, -173,
	-174, -126, 59, 60, -163, -164, -165, -175, 138, -180,
	131, 133, 130, -166, 139, 125, 28, 56, -159, 68,
	74, -155, 213, -149, 54, -149, -149, -149, -149, -153,
	188, -153, -153, -153, 54, 54, -149, -149, -149, -157,
	54, -157, -157, -158, 54, -158, -129, 53, -57, -137,
	23, -137, -119, 121, 118, 119, -183, 117, 210, 188,
	66, 29, 15, 254, 152, 269, 57, 153, -125, -125,
	-57, -57, 121, 118, -57, -57, -57, -137, -57, -116,
	90, 12, -131, -131, -57, 38, -39, -39, -132, -92,
	-95, -109, 19, 11, 34, 34, -36, 68, 69, 70,
	113, -195, -76, -68, -68, -68, -35, 147, 73, -196,
	-196, -36, 55, -39, -196, -196, -196, 55, 53, 22,
	11, 11, -196, 11, 11, -196, -196, -36, -87, -85,
	80, -39, -196, 113, -196, 55, 55, -196, -196, -196,
	-196, -66, 30, 34, -2, -195, -195, -101, -105, -83,
	-42, -43, -43, -42, -43, 42, 42, 42, 47, 42,
	47, 42, -54, -131, -196, -46, -45, -47, -125, -61,
	50, 128, 51, -195, -133, -62, 12, -41, -62, -62,
	113, -107, -108, 240, 237, 243, 57, 59, 55, -174,
	82, 54, 57, 28, -166, -166, -167, 57, -167, 28,
	-151, 29, 68, -156, 214, 60, -153, -153, -154, 30,
	-154, -154, -154, -162, 59, -162, 60, 60, 52, -125,
	-137, -136, -189, 132, 138, 139, 134, 57, 125, 28,
	131, 133, 152, 130, -189, -120, -121, 127, 22, 125,
	28, 152, -188, 53, 158, 158, 127, -137, -113, 59,
	-39, 39, 113, -57, -40, 11, 100, -126, -37, -35,
	73, -68, -68, -196, -38, -141, 109, 185, 146, 183,
	179, 199, 190, 212, 181, 213, -138, -141, -68, -68,
	-68, -68, 263, -90, 81, -39, 79, -126, -68, -68,
	-100, 52, -101, -78, -80, -79, -195, -2, -96, -125,
	-99, -125, -62, 55, 82, -49, -48, 52, 53, -50,
	52, -48, 42, 42, -196, 55, 93, 125, 125, 125,
	-99, -90, -39, -62, 237, 241, 242, -173, -174, -177,
	-176, -125, -180, -167, -167, 54, -152, 52, -68, 56,
	-154, -154, 57, 109, 56, 55, 56, 55, 56, 55,
	-57, -136, -136, -57, -136, -125, -186, 266, -187, 57,
	-125, -125, -57, -116, -62, -41, -196, -68, -196, -149,
	-149, -149, -158, -149, 173, -149, 173, -196, -196, 19,
	19, 19, 19, -195, -34, 259, -39, 55, 55, 27,
	-100, 55, -196, -196, -196, 55, 113, -196, 55, -90,
	-105, -39, -39, 54, -39, -135, -47, -39, -195, -195,
	-195, -196, -94, 56, 55, -149, -97, -125, -160, 210,
	9, -153, 59, -153, 60, 60, -137, 26, -185, -184,
	-126, 54, -88, 13, -153, 57, -68, -68, -68, -68,
	-68, -196, 59, -68, -68, 28, -80, 34, -2, -195,
	-125, -125, -125, -94, -97, -131, -97, -97, -97, -134,
	-179, -178, 53, 135, 66, -176, 56, 55, -161, 131,
	28, 130, -71, -154, -154, 56, 56, -195, 55, 82,
	-97, -89, 14, 16, -196, -196, -196, -196, -33, 92,
	266, -196, -196, 9, -78, -2, 113, 56, -196, -196,
	-196, -61, -178, 57, -168, 82, 59, 141, -125, -150,
	66, 28, 28, -181, -182, 152, -184, -174, 56, -39,
	-77, -196, 264, 49, 267, -101, -196, -125, 60, -57,
	59, -196, 55, -125, -188, 39, 265, 268, 54, -182,
	34, -186, 39, -97, 154, 266, 56, 155, 267, -191,
	-192, 52, -195, 268, -192, 52, 10, 9, -68, 151,
	-190, 142, 137, 140, 30, -190, -196, -196, 136, 29,
	68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 565, 0, 316, 316, 316, 316, 316, 316,
	0, 636, 619, 0, 0, 0, 0, -2, 303, 304,
	0, 306, 307, 861, 861, 861, 861, 861, 0, 0,
	861, 0, 35, 36, 859, 1, 3, 573, 0, 0,
	320, 323, 318, 0, 619, 619, 0, 0, 65, 66,
	0, 0, 0, 845, 0, 617, 617, 617, 637, 638,
	641, 642, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 0, 0, 0, 620,
	0, 615, 0, 615, 615, 615, 0, 253, 394, 645,
	646, 845, 0, 0, 0, 862, 0, 862, 862, 266,
	862, 862, 269, 862, 0, 862, 0, 276, 278, 279,
	280, 281, 0, 285, 862, 300, 301, 290, 302, 305,
	308, 309, 310, 311, 312, 861, 861, 315, 29, 577,
	0, 0, 565, 31, 0, 316, 321, 322, 326, 324,
	325, 317, 0, 334, 338, 0, 403, 0, 408, 410,
	-2, -2, 0, 445, 446, 447, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 473, 474, 475, 476,
	550, 551, 552, 553, 554, 555, 556, 557, 412, 413,
	547, 597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 0, 509, 509, 509, 509, 509, 509, 509,
	509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 46, 394, 50, 0, 836, 601, -2,
	-2, 0, 0, 643, 644, -2, 754, -2, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 0, 0, 84, 0, 82, 0, 862,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 0,
	0, 244, 0, 0, 0, 0, 0, 0, 0, 252,
	0, 254, 862, 862, 257, 863, 864, 862, 862, 862,
	0, 862, 862, 264, 265, 267, 268, 270, 862, 862,
	272, 0, 293, 291, 292, 287, 288, 0, 282, 283,
	286, 313, 314, 30, 860, 24, 0, 0, 574, 0,
	566, 567, 570, 573, 29, 323, 0, 328, 327, 319,
	0, 335, 0, 0, 0, 339, 0, 341, 342, 0,
	406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	430, 431, 432, 433, 434, 435, 436, 409, 0, 423,
	0, 0, 0, 465, 466, 467, 468, 469, 470, 471,
	0, 330, 29, 0, 443, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 539, 0, 493, 501, 0,
	494, 502, 495, 503, 496, 0, 497, 504, 498, 505,
	499, 500, 506, 0, 0, 0, 330, 0, 0, 48,
	0, 393, 0, 345, 347, 348, 349, -2, 0, 645,
	377, -2, 0, 0, 0, 42, 43, 0, 0, 0,
	0, 51, 836, 53, 54, 0, 0, 0, 162, 610,
	611, 612, 608, 206, 0, 0, 150, 146, 90, 91,
	92, 139, 94, 139, 139, 139, 139, 159, 159, 159,
	159, 122, 123, 124, 125, 126, 0, 0, 109, 139,
	139, 139, 113, 129, 130, 131, 132, 133, 134, 135,
	136, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	141, 141, 141, 143, 143, 639, 68, 0, 862, 0,
	862, 80, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 247, 616, 0, 862, 250, 251, 395, 647, 648,
	255, 256, 258, 259, 260, 261, 262, 263, 271, 275,
	0, 296, 0, 0, 277, 0, 578, 0, 0, 0,
	0, 0, 569, 571, 572, 577, 32, 326, 0, 558,
	0, 0, 0, 329, 27, 404, 405, 407, 424, 0,
	426, 428, 340, 336, 0, 548, -2, 414, 415, 439,
	440, 441, 0, 0, 0, 0, 437, 419, 0, 450,
	451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
	461, 464, 523, 524, 0, 462, 463, 472, 0, 0,
	331, 332, 442, 0, 596, 29, 0, 0, 0, 0,
	447, 550, 0, 447, 550, 0, 0, 0, 545, 542,
	0, 0, 547, 0, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 392, 0, 0, 0, 0, 0,
	0, 382, 0, 0, 385, 0, 0, 0, 0, 376,
	0, 0, 356, 397, 804, 378, 0, 380, 381, 401,
	0, 401, 45, 401, 47, 0, 396, 602, 52, 0,
	0, 57, 58, 603, 604, 605, 606, 0, 81, 207,
	209, 212, 213, 214, 85, 86, 87, 0, 0, 194,
	0, 0, 188, 188, 0, 186, 187, 83, 153, 151,
	0, 148, 147, 93, 0, 159, 159, 116, 117, 162,
	0, 162, 162, 162, 0, 0, 110, 111, 112, 104,
	0, 105, 106, 107, 0, 108, 0, 0, 862, 70,
	618, 71, 861, 0, 0, 631, 221, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 0, 72, 223,
	225, 224, 0, 0, 0, 245, 862, 249, 293, 274,
	0, 0, 294, 295, 284, 0, 575, 576, 0, 568,
	25, 0, 613, 614, 559, 560, 343, 425, 427, 429,
	0, 330, 416, 437, 420, 0, 417, 0, 0, 411,
	477, 0, 0, 444, -2, 480, 481, 0, 0, 0,
	0, 0, 516, 0, 0, 517, 0, 565, 0, 543,
	0, 0, 492, 0, 511, 0, 0, 512, 513, 514,
	515, 590, 0, 0, -2, 0, 0, 401, 598, 0,
	346, 371, 373, 0, 368, 383, 384, 386, 0, 388,
	0, 390, 391, 350, 352, 0, 357, 358, 0, 354,
	0, 0, 0, 0, 379, 565, 0, 401, 40, 41,
	0, 55, 56, 0, 0, 62, 163, 164, 0, 210,
	0, 0, 0, 181, 188, 188, 184, 189, 185, 0,
	155, 0, 152, 89, 149, 0, 162, 162, 118, 0,
	119, 120, 121, 0, 137, 0, 0, 0, 0, 640,
	69, 215, 861, 228, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 861, 0, 861, 632, 633, 634,
	635, 0, 75, 0, 0, 0, 0, 248, 296, 297,
	298, 579, 0, 26, 401, 0, 337, 549, 0, 418,
	0, 438, 421, 478, 333, 0, 139, 139, 528, 139,
	143, 531, 139, 533, 139, 536, 0, 0, 0, 0,
	0, 0, 0, 540, 491, 546, 0, 548, 0, 0,
	33, 0, 590, 580, 592, 594, 0, 29, 0, 586,
	0, 363, 565, 0, 0, 365, 372, 0, 0, 366,
	0, 367, 387, 389, 375, 0, 0, 0, 0, 0,
	0, 573, 402, 39, 59, 60, 61, 208, 211, 0,
	190, 139, 193, 182, 183, 0, 157, 0, 154, 140,
	114, 115, 160, 161, 159, 0, 159, 0, 144, 0,
	862, 216, 217, 218, 219, 0, 222, 0, 73, 74,
	0, 227, 246, 273, 561, 344, 479, 422, 482, 525,
	159, 529, 530, 532, 534, 535, 537, 484, 483, 0,
	0, 0, 0, 0, 0, 0, 544, 0, 0, 0,
	34, 0, 595, -2, 0, 0, 0, 49, 0, 573,
	599, 600, 369, 0, 374, 0, 359, 360, 0, 0,
	0, 377, 38, 173, 0, 192, 0, 361, 165, 158,
	0, 162, 138, 162, 0, 0, 67, 0, 76, 77,
	0, 0, 563, 0, 526, 527, 0, 0, 0, 0,
	518, 490, 541, 0, 0, 0, 593, 0, -2, 0,
	588, 587, 364, 37, 0, 353, 0, 0, 0, 397,
	172, 174, 0, 179, 0, 191, 0, 0, 170, 0,
	167, 169, 156, 127, 128, 142, 145, 0, 0, 0,
	0, 28, 0, 0, 485, 487, 486, 488, 0, 0,
	0, 507, 508, 0, 583, 29, 0, 370, 398, 399,
	400, 355, 175, 176, 0, 180, 178, 0, 362, 88,
	0, 166, 168, 0, 240, 0, 78, 79, 72, 564,
	562, 489, 0, 0, 0, 591, -2, 589, 177, 0,
	171, 239, 0, 0, 75, 519, 0, 522, 0, 241,
	0, 226, 520, 0, 0, 0, 195, 0, 0, 196,
	197, 0, 0, 521, 198, 0, 0, 0, 0, 0,
	199, 201, 202, 0, 0, 200, 242, 243, 203, 204,
	205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 103, 95, 3,
	54, 56, 100, 98, 55, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 270,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:326
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:331
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:358
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:364
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:372
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:376
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:382
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:389
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:395
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:416
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:428
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:444
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:456
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:468
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:474
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:482
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:488
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:492
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:497
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:501
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:507
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:511
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:515
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:519
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:525
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:549
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:553
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:561
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:571
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:577
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:582
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:588
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:593
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:597
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:601
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:605
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:610
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:614
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:620
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:625
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:630
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:636
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:641
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:647
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:653
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:660
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:667
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:671
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:686
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:690
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:696
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:923
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:928
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:932
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:937
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:941
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:949
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:953
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:959
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:976
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:990
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1003
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1012
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1026
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1030
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1039
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1043
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1052
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1060
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1064
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1068
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1073
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1077
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1083
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1087
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1093
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1097
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1118
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1179
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1185
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1189
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1196
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1200
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1204
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1208
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1220
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1226
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1242
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1255
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1263
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1277
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1291
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1299
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1303
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1308
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1313
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1317
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1335
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1339
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1343
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1381
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1387
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1391
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1397
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1401
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1413
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1417
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1425
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1433
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1438
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1493
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1509
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1541
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1545
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1550
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1568
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = "full "
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1648
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1652
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1662
		{
			yyVAL.showFilter = nil
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1670
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1676
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.str = SessionStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.str = GlobalStr
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Begin{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1704
		{
			yyVAL.statement = &Begin{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Commit{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &Rollback{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.statement = &OtherRead{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1726
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1730
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1734
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1738
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1746
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1752
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1756
		{
			setAllowComments(yylex, true)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1760
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1766
		{
			yyVAL.bytes2 = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1776
		{
			yyVAL.str = UnionStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1780
		{
			yyVAL.str = UnionAllStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1784
		{
			yyVAL.str = UnionDistinctStr
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1789
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1793
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1797
		{
			yyVAL.str = SQLCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1802
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1806
		{
			yyVAL.str = DistinctStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1811
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1815
		{
			yyVAL.str = StraightJoinHint
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1820
		{
			yyVAL.selectExprs = nil
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1824
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1834
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1844
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1848
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1852
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1857
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1861
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1865
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1872
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1877
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1887
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1891
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1919
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1929
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1934
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1944
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1948
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1954
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1960
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1964
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1974
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1987
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1991
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1995
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1999
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2005
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2007
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2011
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2013
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2017
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2022
		{
			yyVAL.empty = struct{}{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.empty = struct{}{}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2027
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2035
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = JoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = JoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = JoinStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = StraightJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2068
		{
			yyVAL.str = LeftJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = LeftJoinStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.str = RightJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = RightJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = NaturalJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2100
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2114
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2125
		{
			yyVAL.indexHints = nil
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2129
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2133
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2137
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = nil
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2156
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2164
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2182
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2186
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = IsNullStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = IsNotNullStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.str = IsTrueStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2256
		{
			yyVAL.str = IsNotTrueStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.str = IsFalseStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.str = IsNotFalseStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.str = EqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.str = LessThanStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.str = GreaterThanStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.str = LessEqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.str = GreaterEqualStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.str = NotEqualStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2299
		{
			yyVAL.expr = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2303
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2317
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2329
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2671
		{
			yyVAL.str = ""
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2675
		{
			yyVAL.str = BooleanModeStr
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2679
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 521:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = QueryExpansionStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2693
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2707
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2711
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2719
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2723
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = nil
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2767
		{
			yyVAL.str = string("")
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2771
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2781
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2787
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = nil
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2802
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2806
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2810
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = &NullVal{}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2850
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2868
		{
			yyVAL.exprs = nil
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2872
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = nil
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2886
		{
			yyVAL.orderBy = nil
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2900
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2911
		{
			yyVAL.str = AscScr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.str = AscScr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2919
		{
			yyVAL.str = DescScr
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2924
		{
			yyVAL.limit = nil
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2932
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2936
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2941
		{
			yyVAL.str = ""
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2945
		{
			yyVAL.str = ForUpdateStr
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2949
		{
			yyVAL.str = ShareModeStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2966
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2970
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2975
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2979
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2983
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2998
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3002
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3007
		{
			yyVAL.updateExprs = nil
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3011
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3021
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3027
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3031
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3037
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3053
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3063
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3073
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3079
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3083
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3087
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3091
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3098
		{
			yyVAL.bytes = []byte("charset")
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.expr = &Default{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3122
		{
			yyVAL.byt = 0
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.byt = 1
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3132
		{
			yyVAL.str = ""
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.str = IgnoreStr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3159
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3172
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3176
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3179
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3181
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3185
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3189
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3202
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3458
		{
			decNesting(yylex)
		}
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3463
		{
			skipToEnd(yylex)
		}
	case 862:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3468
		{
			skipToEnd(yylex)
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3472
		{
			skipToEnd(yylex)
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3476
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
