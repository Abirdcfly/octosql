// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:24
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:24

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:59
type yySymType struct {
	yys                              int
	tableValuedFunctionArguments     TableValuedFunctionArguments
	tableValuedFunctionArgument      *TableValuedFunctionArgument
	tableValuedFunctionArgumentValue TableValuedFunctionArgumentValue
	empty                            struct{}
	statement                        Statement
	selStmt                          SelectStatement
	ddl                              *DDL
	ins                              *Insert
	byt                              byte
	bytes                            []byte
	bytes2                           [][]byte
	str                              string
	strs                             []string
	selectExprs                      SelectExprs
	selectExpr                       SelectExpr
	columns                          Columns
	partitions                       Partitions
	colName                          *ColName
	tableExprs                       TableExprs
	tableExpr                        TableExpr
	joinCondition                    JoinCondition
	tableName                        TableName
	tableNames                       TableNames
	indexHints                       *IndexHints
	expr                             Expr
	exprs                            Exprs
	boolVal                          BoolVal
	sqlVal                           *SQLVal
	colTuple                         ColTuple
	values                           Values
	valTuple                         ValTuple
	subquery                         *Subquery
	whens                            []*When
	when                             *When
	orderBy                          OrderBy
	order                            *Order
	limit                            *Limit
	updateExprs                      UpdateExprs
	setExprs                         SetExprs
	updateExpr                       *UpdateExpr
	setExpr                          *SetExpr
	colIdent                         ColIdent
	tableIdent                       TableIdent
	convertType                      *ConvertType
	aliasedTableName                 *AliasedTableExpr
	TableSpec                        *TableSpec
	columnType                       ColumnType
	colKeyOpt                        ColumnKeyOption
	optVal                           Expr
	LengthScaleOption                LengthScaleOption
	columnDefinition                 *ColumnDefinition
	indexDefinition                  *IndexDefinition
	indexInfo                        *IndexInfo
	indexOption                      *IndexOption
	indexOptions                     []*IndexOption
	indexColumn                      *IndexColumn
	indexColumns                     []*IndexColumn
	constraintDefinition             *ConstraintDefinition
	constraintInfo                   ConstraintInfo
	ReferenceAction                  ReferenceAction
	partDefs                         []*PartitionDefinition
	partDef                          *PartitionDefinition
	partSpec                         *PartitionSpec
	vindexParam                      VindexParam
	vindexParams                     []VindexParam
	showFilter                       *ShowFilter
	optLike                          *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const RIGHTARROW = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const SCHEMA = 57448
const TABLE = 57449
const DESCRIPTOR = 57450
const INDEX = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const UNIQUE = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SPATIAL = 57459
const FULLTEXT = 57460
const KEY_BLOCK_SIZE = 57461
const ACTION = 57462
const CASCADE = 57463
const CONSTRAINT = 57464
const FOREIGN = 57465
const NO = 57466
const REFERENCES = 57467
const RESTRICT = 57468
const SHOW = 57469
const DESCRIBE = 57470
const EXPLAIN = 57471
const DATE = 57472
const ESCAPE = 57473
const REPAIR = 57474
const OPTIMIZE = 57475
const TRUNCATE = 57476
const MAXVALUE = 57477
const PARTITION = 57478
const REORGANIZE = 57479
const LESS = 57480
const THAN = 57481
const PROCEDURE = 57482
const TRIGGER = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const WARNINGS = 57488
const BEGIN = 57489
const START = 57490
const TRANSACTION = 57491
const COMMIT = 57492
const ROLLBACK = 57493
const BIT = 57494
const TINYINT = 57495
const SMALLINT = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const BIGINT = 57500
const INTNUM = 57501
const REAL = 57502
const DOUBLE = 57503
const FLOAT_TYPE = 57504
const DECIMAL = 57505
const NUMERIC = 57506
const TIME = 57507
const TIMESTAMP = 57508
const DATETIME = 57509
const YEAR = 57510
const CHAR = 57511
const VARCHAR = 57512
const BOOL = 57513
const CHARACTER = 57514
const VARBINARY = 57515
const NCHAR = 57516
const TEXT = 57517
const TINYTEXT = 57518
const MEDIUMTEXT = 57519
const LONGTEXT = 57520
const BLOB = 57521
const TINYBLOB = 57522
const MEDIUMBLOB = 57523
const LONGBLOB = 57524
const JSON = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const NULLX = 57535
const AUTO_INCREMENT = 57536
const APPROXNUM = 57537
const SIGNED = 57538
const UNSIGNED = 57539
const ZEROFILL = 57540
const COLLATION = 57541
const DATABASES = 57542
const SCHEMAS = 57543
const TABLES = 57544
const VITESS_KEYSPACES = 57545
const VITESS_SHARDS = 57546
const VITESS_TABLETS = 57547
const VSCHEMA = 57548
const VSCHEMA_TABLES = 57549
const VITESS_TARGET = 57550
const FULL = 57551
const PROCESSLIST = 57552
const COLUMNS = 57553
const FIELDS = 57554
const ENGINES = 57555
const PLUGINS = 57556
const NAMES = 57557
const CHARSET = 57558
const GLOBAL = 57559
const SESSION = 57560
const ISOLATION = 57561
const LEVEL = 57562
const READ = 57563
const WRITE = 57564
const ONLY = 57565
const REPEATABLE = 57566
const COMMITTED = 57567
const UNCOMMITTED = 57568
const SERIALIZABLE = 57569
const CURRENT_TIMESTAMP = 57570
const DATABASE = 57571
const CURRENT_DATE = 57572
const CURRENT_TIME = 57573
const LOCALTIME = 57574
const LOCALTIMESTAMP = 57575
const UTC_DATE = 57576
const UTC_TIME = 57577
const UTC_TIMESTAMP = 57578
const REPLACE = 57579
const CONVERT = 57580
const CAST = 57581
const SUBSTR = 57582
const SUBSTRING = 57583
const GROUP_CONCAT = 57584
const SEPARATOR = 57585
const TIMESTAMPADD = 57586
const TIMESTAMPDIFF = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const QUERY = 57593
const EXPANSION = 57594
const UNUSED = 57595

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"RIGHTARROW",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"DESCRIPTOR",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	161, 299,
	162, 299,
	-2, 289,
	-1, 270,
	113, 648,
	-2, 644,
	-1, 271,
	113, 649,
	-2, 645,
	-1, 339,
	82, 823,
	-2, 63,
	-1, 340,
	82, 779,
	-2, 64,
	-1, 345,
	82, 758,
	-2, 610,
	-1, 347,
	82, 800,
	-2, 612,
	-1, 617,
	1, 351,
	5, 351,
	12, 351,
	13, 351,
	14, 351,
	15, 351,
	17, 351,
	19, 351,
	30, 351,
	31, 351,
	42, 351,
	43, 351,
	44, 351,
	45, 351,
	46, 351,
	48, 351,
	49, 351,
	52, 351,
	53, 351,
	55, 351,
	56, 351,
	271, 351,
	-2, 378,
	-1, 621,
	53, 44,
	55, 44,
	-2, 48,
	-1, 766,
	113, 651,
	-2, 647,
	-1, 994,
	5, 30,
	-2, 445,
	-1, 1024,
	5, 29,
	-2, 584,
	-1, 1273,
	5, 30,
	-2, 585,
	-1, 1331,
	5, 29,
	-2, 587,
	-1, 1413,
	5, 30,
	-2, 588,
}

const yyPrivate = 57344

const yyLast = 13583

var yyAct = [...]int{

	271, 1439, 1449, 1236, 1401, 1122, 1027, 573, 275, 880,
	1346, 1312, 1049, 1210, 613, 853, 1047, 301, 909, 1173,
	249, 1028, 1170, 959, 1174, 848, 850, 923, 288, 1076,
	57, 1055, 81, 889, 879, 1145, 210, 1180, 344, 210,
	1186, 791, 717, 801, 986, 1102, 1093, 614, 798, 893,
	839, 1299, 634, 819, 240, 855, 876, 731, 572, 3,
	768, 505, 511, 919, 445, 338, 333, 210, 81, 832,
	633, 903, 210, 517, 210, 525, 273, 620, 258, 330,
	335, 800, 623, 56, 1442, 588, 1426, 1437, 1411, 1434,
	1237, 1425, 1410, 277, 1162, 1265, 450, 1205, 1206, 241,
	242, 243, 244, 1204, 478, 247, 942, 262, 587, 870,
	248, 61, 246, 207, 205, 201, 499, 202, 203, 1374,
	941, 538, 537, 547, 548, 540, 541, 542, 543, 544,
	545, 546, 539, 871, 872, 549, 1084, 63, 64, 65,
	66, 67, 245, 635, 332, 636, 495, 1064, 946, 447,
	1063, 449, 902, 1065, 496, 493, 494, 940, 197, 1146,
	199, 1302, 313, 474, 319, 320, 317, 318, 316, 315,
	314, 480, 463, 1318, 482, 498, 910, 1256, 321, 322,
	1254, 239, 488, 489, 1125, 706, 1436, 1124, 704, 1433,
	1402, 1121, 833, 1394, 894, 1457, 464, 1148, 210, 452,
	896, 210, 1347, 199, 479, 481, 1126, 210, 937, 934,
	935, 1109, 933, 210, 710, 1349, 81, 1355, 81, 81,
	705, 81, 81, 697, 81, 1199, 81, 1453, 896, 446,
	1150, 1198, 1154, 896, 1149, 81, 1147, 204, 1197, 448,
	1107, 1152, 707, 1118, 944, 947, 1050, 1052, 455, 1120,
	1151, 212, 200, 953, 198, 1003, 952, 1077, 1381, 1000,
	561, 562, 877, 1153, 1155, 81, 540, 541, 542, 543,
	544, 545, 546, 539, 1276, 456, 549, 1132, 462, 264,
	939, 1222, 1060, 513, 469, 1348, 1013, 460, 980, 740,
	471, 629, 529, 477, 1375, 470, 539, 1196, 895, 549,
	501, 502, 938, 892, 890, 910, 891, 549, 1409, 1108,
	866, 888, 894, 514, 1113, 1110, 1103, 1111, 1106, 737,
	1356, 1354, 1104, 1105, 961, 1051, 895, 732, 210, 210,
	210, 895, 446, 1223, 522, 1451, 1112, 81, 1452, 70,
	1450, 524, 1392, 81, 1364, 1184, 943, 1119, 637, 1117,
	524, 457, 1164, 458, 775, 612, 459, 820, 561, 562,
	699, 945, 561, 562, 1082, 444, 559, 515, 773, 774,
	772, 523, 522, 523, 522, 71, 466, 467, 468, 1397,
	1166, 483, 484, 519, 485, 486, 1417, 487, 524, 490,
	524, 542, 543, 544, 545, 546, 539, 1308, 500, 549,
	591, 593, 960, 597, 599, 611, 602, 621, 733, 622,
	451, 743, 744, 820, 627, 1010, 1307, 631, 977, 978,
	979, 1097, 617, 590, 592, 594, 596, 598, 600, 601,
	538, 537, 547, 548, 540, 541, 542, 543, 544, 545,
	546, 539, 1096, 1085, 549, 210, 758, 760, 761, 998,
	81, 997, 759, 1458, 196, 210, 210, 81, 504, 523,
	522, 210, 999, 1419, 210, 54, 899, 210, 523, 522,
	1390, 210, 900, 81, 81, 771, 524, 22, 81, 81,
	81, 210, 81, 81, 987, 524, 1393, 453, 454, 81,
	81, 739, 1459, 476, 1325, 1305, 538, 537, 547, 548,
	540, 541, 542, 543, 544, 545, 546, 539, 1129, 719,
	549, 1094, 523, 522, 792, 1239, 793, 81, 1077, 327,
	328, 210, 645, 1066, 1072, 1067, 794, 81, 738, 524,
	508, 512, 701, 702, 745, 1352, 1435, 253, 708, 1421,
	504, 332, 716, 711, 714, 523, 522, 530, 1352, 1405,
	769, 1352, 504, 841, 844, 845, 846, 842, 725, 843,
	847, 341, 524, 1352, 1382, 1352, 1351, 504, 766, 1297,
	1296, 81, 764, 504, 291, 290, 293, 294, 295, 296,
	1278, 504, 574, 292, 297, 1275, 504, 1229, 1228, 810,
	813, 585, 1225, 1226, 747, 821, 1225, 1224, 754, 992,
	504, 1361, 762, 715, 81, 81, 836, 504, 803, 504,
	1360, 210, 700, 696, 698, 695, 644, 643, 1219, 210,
	703, 210, 472, 24, 210, 210, 770, 465, 210, 210,
	210, 81, 625, 24, 805, 58, 720, 721, 795, 796,
	625, 722, 723, 724, 81, 726, 727, 1022, 897, 1056,
	861, 1023, 728, 729, 863, 829, 1135, 817, 806, 807,
	1183, 1330, 812, 815, 816, 860, 1171, 624, 719, 1183,
	1056, 54, 835, 803, 626, 992, 628, 911, 912, 913,
	1271, 54, 626, 1363, 624, 302, 51, 828, 834, 830,
	831, 859, 836, 836, 1227, 864, 867, 836, 210, 81,
	992, 81, 862, 868, 24, 81, 81, 210, 210, 884,
	210, 210, 617, 1183, 210, 81, 1195, 617, 1268, 1068,
	869, 617, 925, 1016, 1015, 905, 906, 907, 908, 992,
	624, 210, 630, 210, 210, 741, 210, 51, 709, 54,
	1427, 916, 917, 918, 255, 254, 1314, 841, 844, 845,
	846, 842, 54, 843, 847, 921, 922, 538, 537, 547,
	548, 540, 541, 542, 543, 544, 545, 546, 539, 904,
	1283, 549, 924, 824, 1215, 928, 1267, 734, 1071, 766,
	1187, 1188, 268, 968, 950, 951, 920, 954, 955, 915,
	769, 956, 54, 914, 1123, 927, 1444, 1440, 1217, 1190,
	1171, 1098, 755, 756, 969, 735, 713, 970, 958, 1039,
	1431, 753, 1193, 964, 1040, 538, 537, 547, 548, 540,
	541, 542, 543, 544, 545, 546, 539, 1037, 1192, 549,
	341, 1036, 1038, 982, 976, 1035, 1424, 210, 210, 210,
	210, 210, 1131, 1041, 1029, 845, 846, 259, 260, 210,
	965, 1030, 210, 81, 1033, 574, 518, 210, 808, 809,
	1429, 210, 929, 975, 931, 974, 770, 506, 1089, 642,
	473, 516, 1009, 1081, 1399, 1398, 1310, 1328, 957, 507,
	81, 991, 1079, 1073, 1269, 1031, 1032, 1057, 1034, 1069,
	930, 1024, 712, 1058, 849, 1059, 256, 257, 1042, 1007,
	518, 475, 250, 475, 475, 973, 475, 475, 1368, 475,
	805, 475, 1054, 972, 251, 58, 1367, 875, 1316, 1056,
	475, 497, 1061, 1078, 1086, 1087, 1446, 1445, 81, 81,
	617, 617, 617, 617, 617, 1004, 1001, 730, 520, 1446,
	51, 1074, 1075, 1378, 1303, 617, 736, 60, 62, 55,
	1, 1438, 1238, 1311, 617, 558, 936, 81, 560, 1400,
	1345, 1209, 1095, 887, 878, 300, 1088, 69, 1090, 1091,
	1092, 443, 210, 68, 1391, 886, 885, 1353, 1301, 898,
	1114, 81, 1083, 901, 1216, 1080, 571, 1101, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 79, 586, 589,
	589, 589, 595, 589, 589, 595, 589, 603, 604, 605,
	606, 607, 608, 1396, 618, 650, 1128, 648, 966, 967,
	649, 512, 503, 765, 647, 652, 81, 81, 1139, 1172,
	1138, 1029, 651, 343, 646, 1157, 1144, 224, 1163, 336,
	1156, 1175, 638, 926, 521, 72, 1116, 1115, 932, 1133,
	491, 492, 766, 226, 81, 557, 968, 971, 1062, 1182,
	342, 563, 564, 565, 566, 567, 568, 569, 570, 81,
	1178, 81, 81, 742, 1191, 510, 1366, 1315, 1008, 584,
	1208, 818, 276, 993, 1177, 757, 1201, 289, 286, 1203,
	287, 1200, 1100, 748, 1021, 531, 274, 266, 616, 210,
	1011, 609, 840, 1207, 1213, 1214, 1212, 841, 844, 845,
	846, 842, 838, 843, 847, 837, 210, 1187, 1188, 331,
	1127, 1189, 81, 1185, 341, 81, 81, 210, 1287, 1045,
	1046, 615, 1134, 81, 1264, 475, 210, 881, 1373, 752,
	26, 59, 475, 1220, 1221, 261, 19, 18, 17, 20,
	16, 15, 1243, 14, 461, 30, 21, 1231, 475, 475,
	13, 12, 1245, 475, 475, 475, 1244, 475, 475, 1232,
	11, 1234, 10, 1262, 475, 475, 1230, 9, 1252, 8,
	7, 343, 6, 343, 343, 5, 343, 343, 4, 343,
	252, 343, 1029, 1233, 23, 1270, 81, 2, 0, 0,
	343, 0, 0, 0, 1242, 1280, 0, 0, 81, 0,
	0, 0, 1286, 1279, 0, 0, 81, 1069, 1249, 1250,
	1285, 1251, 1295, 0, 1253, 0, 1255, 0, 0, 617,
	527, 81, 0, 0, 765, 0, 0, 0, 81, 0,
	0, 1130, 0, 1304, 0, 1306, 51, 0, 538, 537,
	547, 548, 540, 541, 542, 543, 544, 545, 546, 539,
	0, 575, 549, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 81, 81, 0, 81,
	0, 0, 0, 1298, 81, 0, 210, 0, 746, 1175,
	1165, 0, 81, 81, 81, 210, 1329, 0, 81, 0,
	1336, 0, 343, 0, 851, 852, 0, 0, 639, 618,
	1344, 1350, 0, 618, 767, 81, 0, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 1357, 1331, 0, 1337, 1202, 0, 0, 0,
	210, 0, 0, 1341, 1342, 1343, 802, 804, 1175, 1384,
	1379, 0, 0, 81, 1383, 0, 1389, 1388, 0, 0,
	0, 1358, 0, 1359, 81, 81, 1365, 0, 0, 0,
	0, 0, 825, 881, 1404, 1403, 1407, 0, 0, 0,
	0, 0, 81, 0, 475, 1412, 475, 1029, 0, 0,
	0, 1380, 0, 0, 1309, 210, 0, 0, 0, 0,
	475, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 1423, 0, 0, 0, 343, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 1428, 1430, 81, 0,
	0, 0, 0, 617, 0, 0, 0, 0, 343, 343,
	1443, 0, 0, 343, 343, 343, 1266, 343, 343, 1454,
	0, 981, 0, 0, 343, 343, 574, 0, 0, 0,
	0, 0, 0, 0, 1281, 0, 0, 1282, 0, 0,
	1284, 0, 1418, 0, 1137, 0, 1288, 0, 0, 1432,
	0, 0, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 527, 0, 0, 343, 537, 547, 548, 540,
	541, 542, 543, 544, 545, 546, 539, 1167, 0, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 1025, 1026,
	0, 0, 618, 618, 618, 618, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 797, 851, 0, 0,
	1053, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 983, 984, 985, 0,
	0, 0, 881, 0, 881, 0, 0, 0, 989, 826,
	827, 0, 990, 0, 0, 0, 0, 0, 0, 994,
	995, 996, 0, 0, 0, 0, 1002, 0, 0, 1005,
	1006, 0, 0, 0, 0, 1012, 343, 0, 0, 1014,
	0, 0, 1017, 1018, 1019, 1020, 0, 0, 1261, 343,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 1137, 0, 0, 0,
	0, 0, 0, 0, 24, 25, 52, 27, 28, 1260,
	0, 0, 475, 0, 0, 0, 0, 1406, 574, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 29, 48,
	49, 0, 0, 0, 343, 0, 343, 0, 0, 0,
	948, 949, 0, 0, 0, 0, 0, 1259, 38, 0,
	343, 0, 54, 538, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 0, 0, 549, 0, 0,
	0, 881, 0, 0, 0, 0, 343, 0, 0, 1176,
	0, 51, 0, 0, 538, 537, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 0, 0, 549, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 32, 34, 33, 36, 0,
	50, 0, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 0, 1143, 549, 0, 0, 0,
	1141, 1142, 37, 44, 45, 0, 0, 46, 47, 35,
	0, 1140, 0, 1158, 1159, 0, 1160, 1161, 0, 0,
	0, 0, 39, 40, 0, 41, 42, 0, 1168, 1169,
	0, 822, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 0, 0, 549, 0, 1048, 1194,
	0, 618, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 509, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 881, 0,
	0, 0, 0, 0, 1218, 0, 0, 0, 0, 0,
	208, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 1291, 1292, 1293, 0, 0, 0, 0,
	0, 0, 0, 1099, 343, 0, 0, 0, 265, 0,
	0, 334, 0, 0, 0, 0, 208, 0, 208, 0,
	0, 0, 1246, 988, 0, 0, 475, 0, 0, 1248,
	0, 0, 343, 1247, 0, 0, 0, 0, 0, 0,
	1257, 1258, 0, 0, 538, 537, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 343, 0, 549, 0,
	1272, 1273, 1274, 0, 1277, 0, 0, 1176, 0, 0,
	1332, 547, 548, 540, 541, 542, 543, 544, 545, 546,
	539, 0, 0, 549, 1294, 1339, 1340, 0, 0, 343,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 1179, 1181, 0, 0, 0, 1362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1176, 0, 51, 1181,
	0, 0, 0, 0, 0, 618, 0, 0, 0, 0,
	0, 0, 208, 0, 343, 208, 343, 1211, 1324, 0,
	0, 208, 1319, 1320, 1321, 1322, 1323, 208, 0, 0,
	1326, 1327, 533, 0, 536, 0, 0, 0, 0, 0,
	550, 551, 552, 553, 554, 555, 556, 0, 534, 535,
	532, 0, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 221, 0, 549, 1235, 0, 0,
	1240, 1241, 0, 1369, 1370, 1371, 1372, 0, 343, 0,
	1376, 1377, 0, 0, 0, 0, 0, 0, 234, 0,
	0, 0, 0, 0, 0, 1385, 1386, 1387, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1408, 0, 822,
	0, 0, 0, 0, 1413, 0, 0, 1415, 1416, 0,
	213, 1048, 208, 208, 208, 0, 0, 216, 0, 0,
	0, 0, 0, 343, 1420, 225, 0, 220, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 0, 0, 343, 0, 0, 0, 0, 223, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	0, 1455, 1456, 0, 1447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 1333, 1334, 0, 1335, 0, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 1300, 1300, 1300,
	0, 0, 0, 1211, 0, 0, 0, 227, 217, 218,
	0, 228, 229, 230, 232, 0, 231, 237, 0, 208,
	1300, 219, 222, 0, 215, 236, 235, 0, 0, 208,
	208, 0, 0, 0, 0, 208, 0, 0, 208, 0,
	0, 208, 0, 0, 0, 718, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 1395, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	343, 667, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 1414, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 1422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 0,
	655, 265, 265, 0, 0, 265, 265, 265, 0, 0,
	0, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 265, 265, 265, 0, 208, 0, 0, 668, 0,
	0, 0, 0, 208, 0, 857, 0, 0, 208, 208,
	0, 0, 208, 865, 718, 0, 0, 0, 0, 0,
	681, 684, 685, 686, 687, 688, 689, 0, 690, 691,
	692, 693, 694, 669, 670, 671, 672, 653, 654, 682,
	0, 656, 0, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 673, 674, 675, 676, 677, 678, 679,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 208, 0, 208, 208, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 683, 962, 963, 0,
	208, 0, 0, 0, 0, 718, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	823, 208, 208, 208, 208, 208, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 208, 0, 0, 0,
	0, 857, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	139, 0, 0, 0, 0, 272, 0, 0, 0, 103,
	0, 269, 0, 0, 0, 120, 312, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 303, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 270,
	291, 290, 293, 294, 295, 296, 0, 0, 96, 292,
	297, 298, 299, 0, 0, 0, 267, 284, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	281, 282, 0, 0, 0, 0, 325, 0, 283, 0,
	208, 278, 279, 280, 285, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 109, 0, 1289, 1290, 0, 211,
	208, 0, 323, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 823, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 195, 94, 0,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 313, 324, 319,
	320, 317, 318, 316, 315, 314, 326, 305, 306, 307,
	308, 310, 0, 321, 322, 309, 82, 89, 121, 192,
	148, 106, 179, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 823, 0, 0, 431, 420,
	0, 391, 434, 369, 383, 442, 384, 385, 413, 355,
	399, 139, 381, 0, 372, 350, 378, 351, 370, 393,
	103, 396, 368, 422, 402, 433, 120, 440, 122, 407,
	0, 160, 131, 823, 0, 395, 424, 397, 418, 390,
	414, 360, 406, 435, 382, 411, 436, 0, 0, 208,
	80, 0, 882, 883, 0, 0, 0, 0, 0, 96,
	0, 409, 430, 380, 410, 412, 349, 408, 0, 353,
	356, 441, 426, 375, 376, 1070, 0, 0, 0, 0,
	0, 0, 394, 398, 415, 388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 373, 0, 405, 0, 0,
	0, 357, 354, 0, 0, 392, 0, 0, 0, 359,
	0, 374, 416, 0, 348, 109, 419, 425, 0, 389,
	211, 429, 387, 386, 432, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 423, 371, 379,
	99, 377, 153, 141, 176, 404, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 352, 0, 161, 178, 195, 94,
	367, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 363, 366,
	361, 362, 400, 401, 437, 438, 439, 417, 358, 0,
	364, 365, 0, 421, 427, 428, 403, 82, 89, 121,
	192, 148, 106, 179, 431, 420, 0, 391, 434, 369,
	383, 442, 384, 385, 413, 355, 399, 139, 381, 0,
	372, 350, 378, 351, 370, 393, 103, 396, 368, 422,
	402, 433, 120, 440, 122, 407, 0, 160, 131, 0,
	0, 395, 424, 397, 418, 390, 414, 360, 406, 435,
	382, 411, 436, 0, 0, 0, 80, 0, 882, 883,
	0, 0, 0, 0, 0, 96, 0, 409, 430, 380,
	410, 412, 349, 408, 0, 353, 356, 441, 426, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 394, 398,
	415, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 0, 389, 211, 429, 387, 386,
	432, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 423, 371, 379, 99, 377, 153, 141,
	176, 404, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	352, 0, 161, 178, 195, 94, 367, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 363, 366, 361, 362, 400, 401,
	437, 438, 439, 417, 358, 0, 364, 365, 0, 421,
	427, 428, 403, 82, 89, 121, 192, 148, 106, 179,
	431, 420, 0, 391, 434, 369, 383, 442, 384, 385,
	413, 355, 399, 139, 381, 0, 372, 350, 378, 351,
	370, 393, 103, 396, 368, 422, 402, 433, 120, 440,
	122, 407, 0, 160, 131, 0, 0, 395, 424, 397,
	418, 390, 414, 360, 406, 435, 382, 411, 436, 54,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 409, 430, 380, 410, 412, 349, 408,
	0, 353, 356, 441, 426, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 394, 398, 415, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 109, 419, 425,
	0, 389, 211, 429, 387, 386, 432, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 423,
	371, 379, 99, 377, 153, 141, 176, 404, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 191, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	194, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 352, 0, 161, 178,
	195, 94, 367, 157, 166, 185, 186, 187, 188, 189,
	190, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 193, 140, 154, 98, 177, 159,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 82,
	89, 121, 192, 148, 106, 179, 431, 420, 0, 391,
	434, 369, 383, 442, 384, 385, 413, 355, 399, 139,
	381, 0, 372, 350, 378, 351, 370, 393, 103, 396,
	368, 422, 402, 433, 120, 440, 122, 407, 0, 160,
	131, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 441,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 1136, 0, 373, 0, 405, 0, 0, 0, 357,
	354, 0, 0, 392, 0, 0, 0, 359, 0, 374,
	416, 0, 348, 109, 419, 425, 0, 389, 211, 429,
	387, 386, 432, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 423, 371, 379, 99, 377,
	153, 141, 176, 404, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 352, 0, 161, 178, 195, 94, 367, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 363, 366, 361, 362,
	400, 401, 437, 438, 439, 417, 358, 0, 364, 365,
	0, 421, 427, 428, 403, 82, 89, 121, 192, 148,
	106, 179, 431, 420, 0, 391, 434, 369, 383, 442,
	384, 385, 413, 355, 399, 139, 381, 0, 372, 350,
	378, 351, 370, 393, 103, 396, 368, 422, 402, 433,
	120, 440, 122, 407, 0, 160, 131, 0, 0, 395,
	424, 397, 418, 390, 414, 360, 406, 435, 382, 411,
	436, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 409, 430, 380, 410, 412,
	349, 408, 0, 353, 356, 441, 426, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 394, 398, 415, 388,
	0, 0, 0, 0, 0, 0, 0, 866, 0, 373,
	0, 405, 0, 0, 0, 357, 354, 0, 0, 392,
	0, 0, 0, 359, 0, 374, 416, 0, 348, 109,
	419, 425, 0, 389, 211, 429, 387, 386, 432, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 423, 371, 379, 99, 377, 153, 141, 176, 404,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	191, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 194, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 352, 0,
	161, 178, 195, 94, 367, 157, 166, 185, 186, 187,
	188, 189, 190, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 193, 140, 154, 98,
	177, 159, 363, 366, 361, 362, 400, 401, 437, 438,
	439, 417, 358, 0, 364, 365, 0, 421, 427, 428,
	403, 82, 89, 121, 192, 148, 106, 179, 431, 420,
	0, 391, 434, 369, 383, 442, 384, 385, 413, 355,
	399, 139, 381, 0, 372, 350, 378, 351, 370, 393,
	103, 396, 368, 422, 402, 433, 120, 440, 122, 407,
	0, 160, 131, 0, 0, 395, 424, 397, 418, 390,
	414, 360, 406, 435, 382, 411, 436, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 409, 430, 380, 410, 412, 349, 408, 0, 353,
	356, 441, 426, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 394, 398, 415, 388, 0, 0, 0, 0,
	0, 0, 0, 763, 0, 373, 0, 405, 0, 0,
	0, 357, 354, 0, 0, 392, 0, 0, 0, 359,
	0, 374, 416, 0, 348, 109, 419, 425, 0, 389,
	211, 429, 387, 386, 432, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 423, 371, 379,
	99, 377, 153, 141, 176, 404, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 352, 0, 161, 178, 195, 94,
	367, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 363, 366,
	361, 362, 400, 401, 437, 438, 439, 417, 358, 0,
	364, 365, 0, 421, 427, 428, 403, 82, 89, 121,
	192, 148, 106, 179, 431, 420, 0, 391, 434, 369,
	383, 442, 384, 385, 413, 355, 399, 139, 381, 0,
	372, 350, 378, 351, 370, 393, 103, 396, 368, 422,
	402, 433, 120, 440, 122, 407, 0, 160, 131, 0,
	0, 395, 424, 397, 418, 390, 414, 360, 406, 435,
	382, 411, 436, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 409, 430, 380,
	410, 412, 349, 408, 0, 353, 356, 441, 426, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 394, 398,
	415, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 0, 389, 211, 429, 387, 386,
	432, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 423, 371, 379, 99, 377, 153, 141,
	176, 404, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	352, 0, 161, 178, 195, 94, 367, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 363, 366, 361, 362, 400, 401,
	437, 438, 439, 417, 358, 0, 364, 365, 0, 421,
	427, 428, 403, 82, 89, 121, 192, 148, 106, 179,
	431, 420, 0, 391, 434, 369, 383, 442, 384, 385,
	413, 355, 399, 139, 381, 0, 372, 350, 378, 351,
	370, 393, 103, 396, 368, 422, 402, 433, 120, 440,
	122, 407, 0, 160, 131, 0, 0, 395, 424, 397,
	418, 390, 414, 360, 406, 435, 382, 411, 436, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 409, 430, 380, 410, 412, 349, 408,
	0, 353, 356, 441, 426, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 394, 398, 415, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 109, 419, 425,
	0, 389, 211, 429, 387, 386, 432, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 423,
	371, 379, 99, 377, 153, 141, 176, 404, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 191, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	194, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 352, 0, 161, 178,
	195, 94, 367, 157, 166, 185, 186, 187, 188, 189,
	190, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 193, 140, 154, 98, 177, 159,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 82,
	89, 121, 192, 148, 106, 179, 431, 420, 0, 391,
	434, 369, 383, 442, 384, 385, 413, 355, 399, 139,
	381, 0, 372, 350, 378, 351, 370, 393, 103, 396,
	368, 422, 402, 433, 120, 440, 122, 407, 0, 160,
	131, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 441,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 373, 0, 405, 0, 0, 0, 357,
	354, 0, 0, 392, 0, 0, 0, 359, 0, 374,
	416, 0, 348, 109, 419, 425, 0, 389, 211, 429,
	387, 386, 432, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 423, 371, 379, 99, 377,
	153, 141, 176, 404, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	346, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 352, 0, 161, 178, 195, 94, 367, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 347, 345, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 363, 366, 361, 362,
	400, 401, 437, 438, 439, 417, 358, 0, 364, 365,
	0, 421, 427, 428, 403, 82, 89, 121, 192, 148,
	106, 179, 431, 420, 0, 391, 434, 369, 383, 442,
	384, 385, 413, 355, 399, 139, 381, 0, 372, 350,
	378, 351, 370, 393, 103, 396, 368, 422, 402, 433,
	120, 440, 122, 407, 0, 160, 131, 0, 0, 395,
	424, 397, 418, 390, 414, 360, 406, 435, 382, 411,
	436, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 409, 430, 380, 410, 412,
	349, 408, 0, 353, 356, 441, 426, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 394, 398, 415, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 373,
	0, 405, 0, 0, 0, 357, 354, 0, 0, 392,
	0, 0, 0, 359, 0, 374, 416, 0, 348, 109,
	419, 425, 0, 389, 211, 429, 387, 386, 432, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 423, 371, 379, 99, 377, 153, 141, 176, 404,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	191, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 194, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 352, 0,
	161, 178, 195, 94, 367, 157, 166, 185, 186, 187,
	188, 189, 190, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 193, 140, 154, 98,
	177, 159, 363, 366, 361, 362, 400, 401, 437, 438,
	439, 417, 358, 0, 364, 365, 0, 421, 427, 428,
	403, 82, 89, 121, 192, 148, 106, 179, 431, 420,
	0, 391, 434, 369, 383, 442, 384, 385, 413, 355,
	399, 139, 381, 0, 372, 350, 378, 351, 370, 393,
	103, 396, 368, 422, 402, 433, 120, 440, 122, 407,
	0, 160, 131, 0, 0, 395, 424, 397, 418, 390,
	414, 360, 406, 435, 382, 411, 436, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 409, 430, 380, 410, 412, 349, 408, 0, 353,
	356, 441, 426, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 394, 398, 415, 388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 373, 0, 405, 0, 0,
	0, 357, 354, 0, 0, 392, 0, 0, 0, 359,
	0, 374, 416, 0, 348, 109, 419, 425, 0, 389,
	211, 429, 387, 386, 432, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 423, 371, 379,
	99, 377, 153, 141, 176, 404, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 632,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 346, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 352, 0, 161, 178, 195, 94,
	367, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 347, 345, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 363, 366,
	361, 362, 400, 401, 437, 438, 439, 417, 358, 0,
	364, 365, 0, 421, 427, 428, 403, 82, 89, 121,
	192, 148, 106, 179, 431, 420, 0, 391, 434, 369,
	383, 442, 384, 385, 413, 355, 399, 139, 381, 0,
	372, 350, 378, 351, 370, 393, 103, 396, 368, 422,
	402, 433, 120, 440, 122, 407, 0, 160, 131, 0,
	0, 395, 424, 397, 418, 390, 414, 360, 406, 435,
	382, 411, 436, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 409, 430, 380,
	410, 412, 349, 408, 0, 353, 356, 441, 426, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 394, 398,
	415, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 0, 389, 211, 429, 387, 386,
	432, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 423, 371, 379, 99, 377, 153, 141,
	176, 404, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 337, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 346, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	352, 0, 161, 178, 195, 94, 367, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 347, 345, 340, 339, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 363, 366, 361, 362, 400, 401,
	437, 438, 439, 417, 358, 0, 364, 365, 0, 421,
	427, 428, 403, 82, 89, 121, 192, 148, 106, 179,
	139, 0, 0, 0, 0, 272, 0, 0, 0, 103,
	0, 269, 0, 0, 0, 120, 312, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 303, 304, 0, 0,
	0, 0, 0, 0, 873, 0, 54, 0, 0, 270,
	291, 290, 293, 294, 295, 296, 0, 0, 96, 292,
	297, 298, 299, 874, 0, 0, 267, 284, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 282, 0, 0, 0, 0, 325, 0, 283, 0,
	0, 278, 279, 280, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 211,
	0, 0, 323, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 195, 94, 0,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 313, 324, 319,
	320, 317, 318, 316, 315, 314, 326, 305, 306, 307,
	308, 310, 0, 321, 322, 309, 82, 89, 121, 192,
	148, 106, 179, 139, 0, 0, 799, 0, 272, 0,
	0, 0, 103, 0, 269, 0, 0, 0, 120, 312,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 270, 291, 290, 293, 294, 295, 296, 0,
	0, 96, 292, 297, 298, 299, 0, 0, 0, 267,
	284, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 282, 263, 0, 0, 0, 325,
	0, 283, 0, 0, 278, 279, 280, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 211, 0, 0, 323, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 191, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	194, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	195, 94, 0, 157, 166, 185, 186, 187, 188, 189,
	190, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 193, 140, 154, 98, 177, 159,
	313, 324, 319, 320, 317, 318, 316, 315, 314, 326,
	305, 306, 307, 308, 310, 0, 321, 322, 309, 82,
	89, 121, 192, 148, 106, 179, 139, 0, 0, 0,
	0, 272, 0, 0, 0, 103, 0, 269, 0, 0,
	0, 120, 312, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 303, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 504, 270, 291, 290, 293, 294,
	295, 296, 0, 0, 96, 292, 297, 298, 299, 0,
	0, 0, 267, 284, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 282, 0, 0,
	0, 0, 325, 0, 283, 0, 0, 278, 279, 280,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 211, 0, 0, 323, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 195, 94, 0, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 313, 324, 319, 320, 317, 318, 316,
	315, 314, 326, 305, 306, 307, 308, 310, 0, 321,
	322, 309, 82, 89, 121, 192, 148, 106, 179, 139,
	0, 0, 0, 0, 272, 0, 0, 0, 103, 0,
	269, 0, 0, 0, 120, 312, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 270, 291,
	290, 293, 294, 295, 296, 0, 0, 96, 292, 297,
	298, 299, 0, 0, 0, 267, 284, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	282, 263, 0, 0, 0, 325, 0, 283, 0, 0,
	278, 279, 280, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 211, 0,
	0, 323, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 195, 94, 0, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 313, 324, 319, 320,
	317, 318, 316, 315, 314, 326, 305, 306, 307, 308,
	310, 0, 321, 322, 309, 82, 89, 121, 192, 148,
	106, 179, 139, 0, 0, 0, 0, 272, 0, 0,
	0, 103, 0, 269, 0, 0, 0, 120, 312, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 270, 291, 814, 293, 294, 295, 296, 0, 0,
	96, 292, 297, 298, 299, 0, 0, 0, 267, 284,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 282, 263, 0, 0, 0, 325, 0,
	283, 0, 0, 278, 279, 280, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 211, 0, 0, 323, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 195,
	94, 0, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 313,
	324, 319, 320, 317, 318, 316, 315, 314, 326, 305,
	306, 307, 308, 310, 0, 321, 322, 309, 82, 89,
	121, 192, 148, 106, 179, 139, 0, 0, 0, 0,
	272, 0, 0, 0, 103, 0, 269, 0, 0, 0,
	120, 312, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 303, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 270, 291, 811, 293, 294, 295,
	296, 0, 0, 96, 292, 297, 298, 299, 0, 0,
	0, 267, 284, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 282, 263, 0, 0,
	0, 325, 0, 283, 0, 0, 278, 279, 280, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 211, 0, 0, 323, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	191, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 194, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 195, 94, 0, 157, 166, 185, 186, 187,
	188, 189, 190, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 193, 140, 154, 98,
	177, 159, 313, 324, 319, 320, 317, 318, 316, 315,
	314, 326, 305, 306, 307, 308, 310, 24, 321, 322,
	309, 82, 89, 121, 192, 148, 106, 179, 0, 139,
	0, 0, 0, 0, 272, 0, 0, 0, 103, 0,
	269, 0, 0, 0, 120, 312, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 270, 291,
	290, 293, 294, 295, 296, 0, 0, 96, 292, 297,
	298, 299, 0, 0, 0, 267, 284, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	282, 0, 0, 0, 0, 325, 0, 283, 0, 0,
	278, 279, 280, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 211, 0,
	0, 323, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 195, 94, 0, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 313, 324, 319, 320,
	317, 318, 316, 315, 314, 326, 305, 306, 307, 308,
	310, 0, 321, 322, 309, 82, 89, 121, 192, 148,
	106, 179, 139, 0, 0, 0, 0, 272, 0, 0,
	0, 103, 0, 269, 0, 0, 0, 120, 312, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 270, 291, 290, 293, 294, 295, 296, 0, 0,
	96, 292, 297, 298, 299, 0, 0, 0, 267, 284,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 282, 0, 0, 0, 0, 325, 0,
	283, 0, 0, 278, 279, 280, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 211, 0, 0, 323, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 195,
	94, 0, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 313,
	324, 319, 320, 317, 318, 316, 315, 314, 326, 305,
	306, 307, 308, 310, 0, 321, 322, 309, 82, 89,
	121, 192, 148, 106, 179, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 312, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 303, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 270, 291, 290, 293, 294, 295,
	296, 0, 0, 96, 292, 297, 298, 299, 0, 0,
	0, 0, 284, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 282, 0, 0, 0,
	0, 325, 0, 283, 0, 0, 278, 279, 280, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 211, 0, 0, 323, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 1448,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	191, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 194, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 195, 94, 0, 157, 166, 185, 186, 187,
	188, 189, 190, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 193, 140, 154, 98,
	177, 159, 313, 324, 319, 320, 317, 318, 316, 315,
	314, 326, 305, 306, 307, 308, 310, 0, 321, 322,
	309, 82, 89, 121, 192, 148, 106, 179, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 120, 312, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 504, 270, 291, 290,
	293, 294, 295, 296, 0, 0, 96, 292, 297, 298,
	299, 0, 0, 0, 0, 284, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 282,
	0, 0, 0, 0, 325, 0, 283, 0, 0, 278,
	279, 280, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 211, 0, 0,
	323, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 191, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 194, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 195, 94, 0, 157, 166,
	185, 186, 187, 188, 189, 190, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 193,
	140, 154, 98, 177, 159, 313, 324, 319, 320, 317,
	318, 316, 315, 314, 326, 305, 306, 307, 308, 310,
	0, 321, 322, 309, 82, 89, 121, 192, 148, 106,
	179, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 120, 312, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 303, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	270, 291, 290, 293, 294, 295, 296, 0, 0, 96,
	292, 297, 298, 299, 0, 0, 0, 0, 284, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 282, 0, 0, 0, 0, 325, 0, 283,
	0, 0, 278, 279, 280, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	211, 0, 0, 323, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 195, 94,
	0, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 313, 324,
	319, 320, 317, 318, 316, 315, 314, 326, 305, 306,
	307, 308, 310, 0, 321, 322, 309, 82, 89, 121,
	192, 148, 106, 179, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	538, 537, 547, 548, 540, 541, 542, 543, 544, 545,
	546, 539, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 191,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 194, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 195, 94, 0, 157, 166, 185, 186, 187, 188,
	189, 190, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 193, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 89, 121, 192, 148, 106, 179, 139, 0, 0,
	0, 526, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 528, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 523, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 195, 94, 0, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 192, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 76, 77, 0, 0,
	73, 0, 0, 0, 78, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 195, 94,
	0, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 89, 121,
	192, 148, 106, 179, 139, 0, 0, 0, 856, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 858, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 191,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 194, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 195, 94, 0, 157, 166, 185, 186, 187, 188,
	189, 190, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 193, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 192, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 191, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 194, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 195, 94, 0, 157, 166,
	185, 186, 187, 188, 189, 190, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 193,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 192, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 619, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 195,
	94, 0, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 89,
	121, 192, 148, 106, 179, 139, 0, 0, 0, 856,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 858, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	854, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	191, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 194, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 195, 94, 0, 157, 166, 185, 186, 187,
	188, 189, 190, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 193, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 192, 148, 106, 179, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 750, 0, 0, 751, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 195, 94, 0, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 192, 148,
	106, 179, 103, 0, 641, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 640, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 191, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	194, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	195, 94, 0, 157, 166, 185, 186, 187, 188, 189,
	190, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 193, 140, 154, 98, 177, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 192, 148, 106, 179, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 619, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 195, 94, 0, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 192, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 858, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 195, 94,
	0, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	192, 148, 106, 179, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 528, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	191, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 194, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 195, 94, 0, 157, 166, 185, 186, 187,
	188, 189, 190, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 193, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 82, 89, 121, 192, 148, 106, 179, 610, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 195, 94, 0,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 192,
	148, 106, 179, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 191,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 194, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 195, 94, 0, 157, 166, 185, 186, 187, 188,
	189, 190, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 193, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 192, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 206, 0, 0, 211, 0, 0,
	0, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 191, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 194, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 195, 94, 0, 157, 166,
	185, 186, 187, 188, 189, 190, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 193,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 192, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 195,
	94, 0, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 192, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 195, 94, 0, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 192, 148, 106, 179, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 195, 94, 0,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 89, 121, 192,
	148, 106, 179,
}
var yyPact = [...]int{

	1628, -1000, -188, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 900, 942, -1000, -1000, -1000, -1000, -1000, -1000,
	285, 9633, 31, 128, -9, 12580, 127, 2051, 13068, -1000,
	15, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -77, -107,
	-1000, 698, -1000, -1000, -1000, -1000, -1000, 885, 898, 738,
	876, 807, -1000, 7111, 74, 74, 12336, 6099, -1000, -1000,
	275, 13068, 113, 13068, -158, 69, 69, 69, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 124, 13068, 235, -1000,
	13068, 66, 570, 66, 66, 66, 13068, -1000, 182, -1000,
	-1000, -1000, 13068, 565, 840, 3705, 47, 3705, 3705, -1000,
	3705, 3705, -1000, 3705, 21, 3705, -73, 909, -1000, -1000,
	-1000, -1000, -44, -1000, 3705, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 517, 848,
	8124, 8124, 900, -1000, 698, -1000, -1000, -1000, 835, -1000,
	-1000, 318, 927, -1000, 9389, 179, -1000, 8124, 1978, 685,
	-1000, -1000, 685, -1000, -1000, 146, -1000, -1000, 8883, 8883,
	8883, 8883, 8883, 8883, 8883, 8883, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	685, -1000, 7871, 685, 685, 685, 685, 685, 685, 685,
	685, 8124, 685, 685, 685, 685, 685, 685, 685, 685,
	685, 685, 685, 685, 685, 685, 685, 12092, 11359, 13068,
	629, 621, -1000, -1000, 178, 677, 5833, -93, -1000, -1000,
	-1000, 266, 11115, -1000, -1000, -1000, 839, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 561, 13068, -1000, 2301, -1000, 558, 3705,
	96, 557, 286, 555, 13068, 13068, 3705, 29, 61, 118,
	13068, 683, 86, 13068, 869, 754, 13068, 546, 485, -1000,
	5567, -1000, 3705, 3705, -1000, -1000, -1000, 3705, 3705, 3705,
	13068, 3705, 3705, -1000, -1000, -1000, -1000, -1000, 3705, 3705,
	-1000, 926, 316, -1000, -1000, -1000, -1000, 8124, -1000, 753,
	-1000, -1000, -1000, -1000, -1000, -1000, 937, 227, 473, 176,
	680, -1000, 387, 885, 517, 807, 10871, 768, -1000, -1000,
	13068, -1000, 8124, 8124, 378, -1000, 11847, -1000, -1000, 4503,
	252, 8883, 411, 278, 8883, 8883, 8883, 8883, 8883, 8883,
	8883, 8883, 8883, 8883, 8883, 8883, 8883, 8883, 8883, 457,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 469, -1000,
	698, 516, 516, 199, 199, 199, 199, 199, 199, 199,
	9136, 6605, 517, 553, 299, 7871, 7111, 7111, 8124, 8124,
	7617, 7364, 7111, 879, 279, 299, 13312, -1000, -1000, 8630,
	-1000, -1000, -1000, -1000, -1000, 517, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12824, 12824, 7111, 7111, 7111, 7111, 39,
	13068, -1000, 642, 705, -1000, -1000, -1000, 872, 10374, 685,
	10627, 39, 612, 11359, 13068, -1000, -1000, 11359, 13068, 4237,
	5301, 677, -93, 665, -1000, -128, -106, 6352, 154, -1000,
	-1000, -1000, -1000, 3439, 172, 592, 398, -62, -1000, -1000,
	-1000, 715, -1000, 715, 715, 715, 715, -13, -13, -13,
	-13, -1000, -1000, -1000, -1000, -1000, 739, 735, -1000, 715,
	715, 715, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	732, 732, 732, 718, 718, 742, -1000, 13068, 3705, 867,
	3705, -1000, 91, -1000, 12824, 12824, 13068, 13068, 135, 13068,
	13068, 675, -1000, 13068, 3705, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13068, 312, 13068, 13068, 299, 13068, -1000, 812, 8124, 8124,
	5035, 8124, -1000, -1000, -1000, 848, -1000, 879, 894, -1000,
	831, 829, 7111, -1000, -1000, 252, 261, -1000, -1000, 350,
	-1000, -1000, -1000, -1000, 175, 685, -1000, 1728, -1000, -1000,
	-1000, -1000, 411, 8883, 8883, 8883, 336, 1728, 1840, 1865,
	1401, 199, 291, 291, 191, 191, 191, 191, 191, 168,
	168, -1000, -1000, -1000, 517, -1000, -1000, -1000, 517, 7111,
	674, -1000, -1000, 8124, -1000, 517, 544, 544, 396, 440,
	248, 925, 544, 244, 924, 544, 544, 7111, 335, -1000,
	8124, 517, -1000, 173, -1000, 402, 669, 668, 544, 517,
	544, 544, 617, 685, -1000, 13312, 11359, 11359, 11359, 11359,
	11359, -1000, 793, 789, -1000, 785, 767, 801, 13068, -1000,
	551, 10374, 12824, 196, 685, -1000, 11603, -1000, -1000, 907,
	11359, 637, -1000, 637, -1000, 169, -1000, -1000, 665, -93,
	-91, -1000, -1000, -1000, -1000, 299, -1000, 466, 664, 3173,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 724, 467, -1000,
	855, 205, 200, 461, 854, -1000, -1000, -1000, 844, -1000,
	296, -79, -1000, -1000, 383, -13, -13, -1000, -1000, 154,
	838, 154, 154, 154, 452, 452, -1000, -1000, -1000, -1000,
	382, -1000, -1000, -1000, 361, -1000, 749, 12824, 3705, -1000,
	-1000, -1000, -1000, 183, 183, 221, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 38, 741, -1000,
	-1000, -1000, 28, 25, 78, -1000, 3705, -1000, 316, -1000,
	449, 8124, -1000, -1000, -1000, 803, 299, 299, 164, -1000,
	-1000, 13068, -1000, -1000, -1000, -1000, 645, -1000, -1000, -1000,
	3971, 7111, -1000, 336, 1728, 1708, -1000, 8883, 8883, -1000,
	-1000, 544, 7111, 299, -1000, -1000, -1000, 50, 457, 50,
	8883, 8883, -1000, 8883, 8883, -1000, -170, 620, 271, -1000,
	8124, 301, -1000, 5035, -1000, 8883, 8883, -1000, -1000, -1000,
	-1000, 748, 13312, 685, -1000, 10130, 12824, 658, -1000, 263,
	705, 728, 747, 1065, -1000, -1000, -1000, -1000, 786, -1000,
	770, -1000, -1000, -1000, -1000, 517, 661, -1000, 204, -1000,
	112, 105, 99, 12824, -1000, 900, 8124, 637, -1000, -1000,
	210, -1000, -1000, -135, -145, -1000, -1000, -1000, 3439, -1000,
	3439, 12824, 54, -1000, 461, 461, -1000, -1000, -1000, 720,
	746, 8883, -1000, -1000, -1000, 562, 154, 154, -1000, 224,
	-1000, -1000, -1000, 541, -1000, 537, 639, 532, 13068, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13068, -1000, -1000, -1000, -1000,
	-1000, 12824, -177, 458, 12824, 12824, 13068, -1000, 312, -1000,
	299, -1000, 4769, -1000, 907, 11359, -1000, -1000, 517, -1000,
	8883, 1728, 1728, -1000, -1000, 517, 715, 715, -1000, 715,
	718, -1000, 715, 6, 715, 3, 517, 517, 1658, 1620,
	1589, 1154, 685, -165, -1000, 299, 8124, -1000, 721, 663,
	-1000, 857, 614, 625, -1000, -1000, 6858, 517, 530, 161,
	525, -1000, 900, 13312, 8124, -1000, -1000, 8124, 716, -1000,
	8124, -1000, -1000, -1000, 872, 12824, 2842, 685, 685, 685,
	525, 885, 299, -1000, -1000, -1000, -1000, 3173, -1000, 514,
	-1000, 715, -1000, -1000, -1000, 12824, -50, 935, 1728, -1000,
	-1000, -1000, -1000, -1000, -13, 436, -13, 356, -1000, 337,
	3705, -1000, -1000, -1000, -1000, 850, -1000, 4769, -1000, -1000,
	692, -1000, -1000, -1000, 905, 638, -1000, 1728, -1000, -1000,
	116, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8883,
	8883, 8883, 8883, 8883, 517, 435, 299, 8883, 8883, 849,
	-1000, 685, -1000, -1000, 627, 12824, 12824, -1000, 12824, 885,
	-1000, 299, 299, 12824, 299, 13068, -1000, -1000, 299, 685,
	685, 12824, 12824, 12824, 9886, -1000, 149, 12824, -1000, 510,
	-1000, 189, -1000, -83, 154, -1000, 154, 554, 545, -1000,
	685, 628, -1000, 262, 12824, 902, 892, -1000, -1000, 402,
	402, 402, 402, 27, -1000, -1000, 402, 402, 934, -1000,
	685, -1000, 698, 145, -1000, -1000, -1000, 508, -1000, 11359,
	13312, 496, 496, 496, 196, 149, -1000, 413, 260, 427,
	-1000, 51, 12824, 313, 847, -1000, 846, -1000, -1000, -1000,
	-1000, -1000, 37, 4769, 3439, 493, -1000, 8124, 8124, -1000,
	-1000, -1000, -1000, 517, 43, -180, -1000, -1000, 13312, 625,
	517, 12824, -1000, 511, 517, -1000, -1000, -1000, -1000, -1000,
	-1000, 326, -1000, -1000, 13068, -1000, -1000, 404, -1000, -1000,
	484, -1000, 12824, -1000, -1000, 741, 299, 618, -1000, 797,
	-175, -183, 605, -1000, -1000, -1000, -1000, -1000, 686, -1000,
	-1000, 37, 826, -177, -1000, 771, -1000, 12824, -1000, 34,
	-1000, -178, 480, 30, -181, 745, 685, -185, 744, -1000,
	917, 8377, -1000, -1000, 930, 197, 197, 402, 517, -1000,
	-1000, -1000, 58, 424, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1197, 58, 477, 1194, 1190, 1188, 1185, 1182, 1180,
	1179, 1177, 1172, 1170, 1161, 1160, 1156, 1155, 1154, 1153,
	1151, 1150, 1149, 1148, 1147, 1146, 111, 1145, 1141, 1140,
	73, 1139, 78, 1138, 1134, 44, 81, 48, 43, 279,
	1132, 26, 14, 47, 1131, 1130, 1129, 16, 1128, 40,
	1123, 1121, 79, 1119, 1115, 50, 1112, 1102, 77, 1101,
	66, 1098, 12, 31, 1097, 1096, 1095, 1094, 76, 782,
	1093, 1090, 28, 1088, 1087, 85, 1085, 60, 7, 19,
	17, 24, 1082, 93, 8, 1081, 53, 1079, 1078, 1077,
	1076, 30, 1075, 62, 1073, 20, 61, 1070, 51, 69,
	37, 22, 6, 80, 70, 1060, 21, 65, 52, 1058,
	1057, 454, 1055, 1053, 57, 1051, 1050, 23, 172, 410,
	1048, 1047, 1046, 1045, 38, 0, 965, 493, 75, 1044,
	1043, 1042, 1834, 42, 55, 15, 25, 54, 163, 41,
	1039, 1037, 35, 1034, 1032, 1025, 1024, 1020, 1017, 1015,
	71, 1013, 985, 984, 18, 56, 983, 982, 63, 27,
	979, 978, 977, 46, 64, 976, 975, 49, 29, 974,
	973, 971, 967, 964, 34, 9, 963, 13, 961, 10,
	960, 33, 959, 4, 956, 11, 953, 3, 952, 5,
	45, 2, 951, 1, 950, 949, 685, 773, 82, 948,
	108,
}
var yyR1 = [...]int{

	0, 194, 195, 195, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 198, 198, 52, 52, 53, 53, 99, 99,
	10, 10, 10, 10, 104, 104, 108, 108, 108, 109,
	109, 109, 109, 140, 140, 11, 11, 11, 11, 11,
	11, 11, 189, 189, 188, 187, 187, 186, 186, 185,
	17, 170, 172, 172, 171, 171, 171, 171, 164, 143,
	143, 143, 143, 146, 146, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 145, 145, 145, 145, 145, 147,
	147, 147, 147, 147, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 149,
	149, 149, 149, 149, 149, 149, 149, 163, 163, 150,
	150, 158, 158, 159, 159, 159, 156, 156, 157, 157,
	160, 160, 160, 152, 152, 153, 153, 161, 161, 154,
	154, 154, 155, 155, 155, 162, 162, 162, 162, 162,
	151, 151, 165, 165, 180, 180, 179, 179, 179, 169,
	169, 176, 176, 176, 176, 176, 167, 167, 168, 168,
	178, 178, 177, 166, 166, 181, 181, 181, 181, 192,
	193, 191, 191, 191, 191, 191, 173, 173, 173, 174,
	174, 174, 175, 175, 175, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 184,
	182, 182, 183, 183, 13, 18, 18, 14, 14, 14,
	14, 14, 15, 15, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 115, 115, 113,
	113, 116, 116, 114, 114, 114, 117, 117, 117, 141,
	141, 141, 21, 21, 23, 23, 24, 25, 22, 22,
	22, 22, 22, 22, 22, 16, 199, 26, 27, 27,
	28, 28, 28, 32, 32, 32, 30, 30, 31, 31,
	37, 37, 36, 36, 38, 38, 38, 38, 129, 129,
	129, 128, 128, 40, 40, 41, 41, 42, 42, 43,
	43, 43, 43, 43, 61, 61, 46, 46, 45, 45,
	47, 48, 48, 48, 98, 98, 100, 100, 44, 44,
	44, 44, 49, 49, 50, 50, 51, 51, 136, 136,
	135, 135, 135, 134, 134, 54, 54, 54, 56, 55,
	55, 55, 55, 57, 57, 59, 59, 58, 58, 60,
	62, 62, 62, 62, 63, 63, 39, 39, 39, 39,
	39, 39, 39, 112, 112, 65, 65, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 76, 76, 76,
	76, 76, 76, 66, 66, 66, 66, 66, 66, 66,
	35, 35, 77, 77, 77, 83, 78, 78, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	73, 73, 73, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 200, 200, 75, 74, 74, 74, 74, 74,
	74, 33, 33, 33, 33, 33, 139, 139, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 87, 87, 34, 34, 85, 85, 86, 88, 88,
	84, 84, 84, 68, 68, 68, 68, 68, 68, 68,
	68, 70, 70, 70, 89, 89, 90, 90, 91, 91,
	92, 92, 93, 94, 94, 94, 95, 95, 95, 95,
	96, 96, 96, 67, 67, 67, 67, 67, 67, 97,
	97, 97, 97, 101, 101, 79, 79, 81, 81, 80,
	82, 102, 102, 106, 103, 103, 107, 107, 107, 107,
	105, 105, 105, 131, 131, 131, 110, 110, 118, 118,
	119, 119, 111, 111, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 121, 121, 121, 122, 122, 123,
	123, 123, 130, 130, 126, 126, 127, 127, 132, 132,
	133, 133, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 196, 197, 137, 138, 138, 138,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 7, 5, 5, 5, 12, 7, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 3, 2, 3, 3, 2,
	3, 4, 3, 7, 5, 4, 2, 4, 2, 2,
	2, 2, 3, 3, 5, 2, 3, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 1, 3, 6, 3, 7, 0, 1, 1, 3,
	3, 1, 4, 4, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 8, 8,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -194, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 116, 117, 119, 118, 151, 120, 144, 50, 164,
	165, 167, 168, 25, 145, 146, 149, 150, 31, 32,
	122, -196, 8, 254, 54, -195, 271, -91, 15, -28,
	5, -26, -199, -26, -26, -26, -26, -26, -170, -172,
	54, 90, -123, 127, 72, 246, 123, 124, 131, -126,
	57, -125, 264, 137, 164, 175, 169, 196, 188, 265,
	138, 186, 189, 233, 216, 228, 66, 167, 242, 147,
	184, 180, 178, 27, 230, 201, 269, 179, 229, 122,
	140, 135, 202, 206, 234, 173, 174, 236, 200, 136,
	33, 266, 35, 155, 237, 204, 199, 195, 198, 172,
	194, 39, 208, 207, 209, 232, 191, 141, 181, 18,
	240, 150, 153, 231, 203, 205, 132, 157, 268, 238,
	177, 142, 154, 149, 241, 143, 168, 218, 235, 244,
	38, 213, 171, 134, 165, 161, 219, 192, 156, 182,
	183, 197, 170, 193, 166, 158, 151, 243, 214, 270,
	190, 187, 162, 159, 160, 220, 221, 222, 223, 224,
	225, 163, 267, 239, 185, 215, -111, 127, 223, 129,
	124, 124, 126, 127, 246, 123, 124, -58, -132, 57,
	-125, 127, 124, 109, 189, 233, 116, 217, 218, 230,
	126, 33, 231, 157, -141, 124, -113, 216, 220, 221,
	222, 225, 223, 163, 57, 235, 234, 226, -132, 166,
	-137, -137, -137, -137, -137, 219, 219, -137, -2, -95,
	17, 16, -5, -3, -196, 6, 20, 21, -32, 40,
	41, -27, -38, 100, -39, -132, -64, 74, -69, 29,
	57, -125, 23, -68, -65, -84, -82, -83, 109, 110,
	111, 98, 99, 106, 75, 112, -73, -71, -72, -74,
	59, 58, 67, 60, 61, 62, 63, 68, 69, 70,
	-126, -80, -196, 44, 45, 255, 256, 257, 258, 263,
	259, 77, 34, 245, 253, 252, 251, 249, 250, 247,
	248, 261, 262, 130, 246, 104, 254, -111, -111, 11,
	-52, -53, -58, -60, -132, -103, -140, 166, -107, 235,
	234, -127, -105, -126, -124, 233, 189, 232, 121, 73,
	22, 24, 211, 76, 109, 16, 77, 108, 255, 116,
	48, 247, 248, 245, 257, 258, 246, 217, 29, 10,
	25, 145, 21, 102, 118, 80, 81, 148, 23, 146,
	70, 19, 51, 11, 13, 14, 130, 129, 92, 126,
	46, 8, 112, 26, 89, 42, 28, 44, 90, 17,
	249, 250, 31, 263, 152, 104, 49, 36, 74, 68,
	71, 52, 72, 15, 47, 91, 119, 254, 45, 123,
	6, 260, 30, 144, 43, 124, 79, 261, 262, 128,
	69, 5, 131, 32, 9, 50, 53, 251, 252, 253,
	34, 78, 12, -171, 90, -164, 57, -58, 126, -58,
	254, -119, 130, -119, -119, 124, -58, 116, 118, 121,
	52, -18, -58, -118, 130, 57, -118, -118, -118, -58,
	113, -58, 57, 30, -138, -196, -127, 246, 57, 157,
	124, 158, 127, -138, -138, -138, -138, -138, 161, 162,
	-138, -116, -115, 228, 229, 219, 227, 12, 219, 160,
	-138, -137, -137, -197, 56, -96, 19, 31, -39, -132,
	-92, -93, -39, -91, -2, -26, 36, -30, 21, 65,
	11, -129, 73, 72, 89, -128, 22, -126, 59, 113,
	-39, -66, 92, 74, 90, 91, 76, 95, 94, 105,
	98, 99, 100, 101, 102, 103, 104, 96, 97, 108,
	82, 83, 84, 85, 86, 87, 88, -112, -196, -83,
	-196, 114, 115, -69, -69, -69, -69, -69, -69, -69,
	-69, -196, -2, -78, -39, -196, -196, -196, -196, -196,
	-196, -196, -196, -196, -87, -39, -196, -200, -75, -196,
	-200, -75, -200, -75, -200, -196, -200, -75, -200, -75,
	-200, -200, -75, -196, -196, -196, -196, -196, -196, -59,
	26, -58, -41, -42, -43, -44, -61, -83, -196, 57,
	-58, -58, -52, -198, 55, 11, 53, -198, 55, 113,
	55, -103, 166, -104, -108, 236, 238, 82, -131, -126,
	59, 29, 30, 56, 55, -58, -143, -146, -148, -147,
	-149, -144, -145, 186, 187, 109, 190, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 30, 147, 182,
	183, 184, 185, 202, 203, 204, 205, 206, 207, 208,
	209, 169, 188, 265, 170, 171, 172, 173, 174, 175,
	177, 178, 179, 180, 181, 57, -138, 127, 57, 74,
	57, -58, -58, -138, 159, 159, 124, 124, -58, 55,
	128, -52, 23, 52, -58, 57, 57, -133, -132, -124,
	-138, -138, -138, -138, -138, -58, -138, -138, -138, -138,
	11, -114, 11, 92, -39, 52, 9, 92, 55, 18,
	113, 55, -94, 24, 25, -95, -197, -32, -70, -126,
	60, 63, -31, 43, -58, -39, -39, -76, 68, 74,
	69, 70, -128, 100, -133, -127, -124, -69, -77, -80,
	-83, 64, 92, 90, 91, 76, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -69, -69, -69, -69, -69,
	-69, -139, 57, 59, 57, -68, -68, -126, -37, 21,
	-36, -38, -197, 55, -197, -2, -36, -36, -39, -39,
	-84, 59, -36, -84, 59, -36, -36, -30, -85, -86,
	78, -84, -126, -132, -197, -69, -126, -126, -36, -37,
	-36, -36, -99, 153, -58, 30, 55, -54, -56, -55,
	-57, 42, 46, 48, 43, 44, 45, 49, -136, 22,
	-41, -196, -196, -135, 153, -134, 22, -132, 59, -99,
	53, -41, -58, -41, -60, -132, 100, -107, -104, 55,
	237, 239, 240, 52, 71, -39, -155, 108, -173, -174,
	-175, -127, 59, 60, -164, -165, -166, -176, 139, -181,
	132, 134, 131, -167, 140, 126, 28, 56, -160, 68,
	74, -156, 214, -150, 54, -150, -150, -150, -150, -154,
	189, -154, -154, -154, 54, 54, -150, -150, -150, -158,
	54, -158, -158, -159, 54, -159, -130, 53, -58, -138,
	23, -138, -120, 121, 118, 119, -184, 117, 211, 189,
	66, 29, 15, 255, 153, 270, 57, 154, -126, -126,
	-58, -58, 121, 118, -58, -58, -58, -138, -58, -117,
	90, 12, -132, -132, -58, 38, -39, -39, -133, -93,
	-96, -110, 19, 11, 34, 34, -36, 68, 69, 70,
	113, -196, -77, -69, -69, -69, -35, 148, 73, -197,
	-197, -36, 55, -39, -197, -197, -197, 55, 53, 22,
	11, 11, -197, 11, 11, -197, -197, -36, -88, -86,
	80, -39, -197, 113, -197, 55, 55, -197, -197, -197,
	-197, -67, 30, 34, -2, -196, -196, -102, -106, -84,
	-42, -43, -43, -42, -43, 42, 42, 42, 47, 42,
	47, 42, -55, -132, -197, -46, -45, -47, -126, -62,
	50, 129, 51, -196, -134, -63, 12, -41, -63, -63,
	113, -108, -109, 241, 238, 244, 57, 59, 55, -175,
	82, 54, 57, 28, -167, -167, -168, 57, -168, 28,
	-152, 29, 68, -157, 215, 60, -154, -154, -155, 30,
	-155, -155, -155, -163, 59, -163, 60, 60, 52, -126,
	-138, -137, -190, 133, 139, 140, 135, 57, 126, 28,
	132, 134, 153, 131, -190, -121, -122, 128, 22, 126,
	28, 153, -189, 53, 159, 159, 128, -138, -114, 59,
	-39, 39, 113, -58, -40, 11, 100, -127, -37, -35,
	73, -69, -69, -197, -38, -142, 109, 186, 147, 184,
	180, 200, 191, 213, 182, 214, -139, -142, -69, -69,
	-69, -69, 264, -91, 81, -39, 79, -127, -69, -69,
	-101, 52, -102, -79, -81, -80, -196, -2, -97, -126,
	-100, -126, -63, 55, 82, -50, -49, 52, 53, -51,
	52, -49, 42, 42, -197, 55, 93, 126, 126, 126,
	-100, -91, -39, -63, 238, 242, 243, -174, -175, -178,
	-177, -126, -181, -168, -168, 54, -153, 52, -69, 56,
	-155, -155, 57, 109, 56, 55, 56, 55, 56, 55,
	-58, -137, -137, -58, -137, -126, -187, 267, -188, 57,
	-126, -126, -58, -117, -63, -41, -197, -69, -197, -150,
	-150, -150, -159, -150, 174, -150, 174, -197, -197, 19,
	19, 19, 19, -196, -34, 260, -39, 55, 55, 27,
	-101, 55, -197, -197, -197, 55, 113, -197, 55, -91,
	-106, -39, -39, 54, -39, -136, -47, -48, -39, 124,
	125, -196, -196, -196, -197, -95, 56, 55, -150, -98,
	-126, -161, 211, 9, -154, 59, -154, 60, 60, -138,
	26, -186, -185, -127, 54, -89, 13, -154, 57, -69,
	-69, -69, -69, -69, -197, 59, -69, -69, 28, -81,
	34, -2, -196, -126, -126, -126, -95, -98, -132, -196,
	-196, -98, -98, -98, -135, -180, -179, 53, 136, 66,
	-177, 56, 55, -162, 132, 28, 131, -72, -155, -155,
	56, 56, -196, 55, 82, -98, -90, 14, 16, -197,
	-197, -197, -197, -33, 92, 267, -197, -197, 9, -79,
	-2, 113, 56, -42, -84, -197, -197, -197, -62, -179,
	57, -169, 82, 59, 142, -126, -151, 66, 28, 28,
	-182, -183, 153, -185, -175, 56, -39, -78, -197, 265,
	49, 268, -102, -197, -126, -197, -197, 60, -58, 59,
	-197, 55, -126, -189, 39, 266, 269, 54, -183, 34,
	-187, 39, -98, 155, 267, 56, 156, 268, -192, -193,
	52, -196, 269, -193, 52, 10, 9, -69, 152, -191,
	143, 138, 141, 30, -191, -197, -197, 137, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 568, 0, 316, 316, 316, 316, 316, 316,
	0, 639, 622, 0, 0, 0, 0, -2, 303, 304,
	0, 306, 307, 864, 864, 864, 864, 864, 0, 0,
	864, 0, 35, 36, 862, 1, 3, 576, 0, 0,
	320, 323, 318, 0, 622, 622, 0, 0, 65, 66,
	0, 0, 0, 848, 0, 620, 620, 620, 640, 641,
	644, 645, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 0, 0, 0, 623,
	0, 618, 0, 618, 618, 618, 0, 253, 397, 648,
	649, 848, 0, 0, 0, 865, 0, 865, 865, 266,
	865, 865, 269, 865, 0, 865, 0, 276, 278, 279,
	280, 281, 0, 285, 865, 300, 301, 290, 302, 305,
	308, 309, 310, 311, 312, 864, 864, 315, 29, 580,
	0, 0, 568, 31, 0, 316, 321, 322, 326, 324,
	325, 317, 0, 334, 338, 0, 406, 0, 411, 413,
	-2, -2, 0, 448, 449, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 477, 478, 479,
	553, 554, 555, 556, 557, 558, 559, 560, 415, 416,
	550, 600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 0, 512, 512, 512, 512, 512, 512, 512,
	512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 46, 397, 50, 0, 839, 604, -2,
	-2, 0, 0, 646, 647, -2, 757, -2, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 0, 0, 84, 0, 82, 0, 865,
	0, 0, 0, 0, 0, 0, 865, 0, 0, 0,
	0, 244, 0, 0, 0, 0, 0, 0, 0, 252,
	0, 254, 865, 865, 257, 866, 867, 865, 865, 865,
	0, 865, 865, 264, 265, 267, 268, 270, 865, 865,
	272, 0, 293, 291, 292, 287, 288, 0, 282, 283,
	286, 313, 314, 30, 863, 24, 0, 0, 577, 0,
	569, 570, 573, 576, 29, 323, 0, 328, 327, 319,
	0, 335, 0, 0, 0, 339, 0, 341, 342, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	433, 434, 435, 436, 437, 438, 439, 412, 0, 426,
	0, 0, 0, 468, 469, 470, 471, 472, 473, 474,
	0, 330, 29, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 542, 0, 496, 504, 0,
	497, 505, 498, 506, 499, 0, 500, 507, 501, 508,
	502, 503, 509, 0, 0, 0, 330, 0, 0, 48,
	0, 396, 0, 345, 347, 348, 349, -2, 0, 648,
	380, -2, 0, 0, 0, 42, 43, 0, 0, 0,
	0, 51, 839, 53, 54, 0, 0, 0, 162, 613,
	614, 615, 611, 206, 0, 0, 150, 146, 90, 91,
	92, 139, 94, 139, 139, 139, 139, 159, 159, 159,
	159, 122, 123, 124, 125, 126, 0, 0, 109, 139,
	139, 139, 113, 129, 130, 131, 132, 133, 134, 135,
	136, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	141, 141, 141, 143, 143, 642, 68, 0, 865, 0,
	865, 80, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 247, 619, 0, 865, 250, 251, 398, 650, 651,
	255, 256, 258, 259, 260, 261, 262, 263, 271, 275,
	0, 296, 0, 0, 277, 0, 581, 0, 0, 0,
	0, 0, 572, 574, 575, 580, 32, 326, 0, 561,
	0, 0, 0, 329, 27, 407, 408, 410, 427, 0,
	429, 431, 340, 336, 0, 551, -2, 417, 418, 442,
	443, 444, 0, 0, 0, 0, 440, 422, 0, 453,
	454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
	464, 467, 526, 527, 0, 465, 466, 475, 0, 0,
	331, 332, 445, 0, 599, 29, 0, 0, 0, 0,
	450, 553, 0, 450, 553, 0, 0, 0, 548, 545,
	0, 0, 550, 0, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 0, 0, 0,
	0, 385, 0, 0, 388, 0, 0, 0, 0, 379,
	0, 0, 356, 400, 807, 381, 0, 383, 384, 404,
	0, 404, 45, 404, 47, 0, 399, 605, 52, 0,
	0, 57, 58, 606, 607, 608, 609, 0, 81, 207,
	209, 212, 213, 214, 85, 86, 87, 0, 0, 194,
	0, 0, 188, 188, 0, 186, 187, 83, 153, 151,
	0, 148, 147, 93, 0, 159, 159, 116, 117, 162,
	0, 162, 162, 162, 0, 0, 110, 111, 112, 104,
	0, 105, 106, 107, 0, 108, 0, 0, 865, 70,
	621, 71, 864, 0, 0, 634, 221, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 0, 72, 223,
	225, 224, 0, 0, 0, 245, 865, 249, 293, 274,
	0, 0, 294, 295, 284, 0, 578, 579, 0, 571,
	25, 0, 616, 617, 562, 563, 343, 428, 430, 432,
	0, 330, 419, 440, 423, 0, 420, 0, 0, 414,
	480, 0, 0, 447, -2, 483, 484, 0, 0, 0,
	0, 0, 519, 0, 0, 520, 0, 568, 0, 546,
	0, 0, 495, 0, 514, 0, 0, 515, 516, 517,
	518, 593, 0, 0, -2, 0, 0, 404, 601, 0,
	346, 374, 376, 0, 371, 386, 387, 389, 0, 391,
	0, 393, 394, 350, 352, 0, 357, 358, 0, 354,
	0, 0, 0, 0, 382, 568, 0, 404, 40, 41,
	0, 55, 56, 0, 0, 62, 163, 164, 0, 210,
	0, 0, 0, 181, 188, 188, 184, 189, 185, 0,
	155, 0, 152, 89, 149, 0, 162, 162, 118, 0,
	119, 120, 121, 0, 137, 0, 0, 0, 0, 643,
	69, 215, 864, 228, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 864, 0, 864, 635, 636, 637,
	638, 0, 75, 0, 0, 0, 0, 248, 296, 297,
	298, 582, 0, 26, 404, 0, 337, 552, 0, 421,
	0, 441, 424, 481, 333, 0, 139, 139, 531, 139,
	143, 534, 139, 536, 139, 539, 0, 0, 0, 0,
	0, 0, 0, 543, 494, 549, 0, 551, 0, 0,
	33, 0, 593, 583, 595, 597, 0, 29, 0, 589,
	0, 366, 568, 0, 0, 368, 375, 0, 0, 369,
	0, 370, 390, 392, 378, 0, 0, 0, 0, 0,
	0, 576, 405, 39, 59, 60, 61, 208, 211, 0,
	190, 139, 193, 182, 183, 0, 157, 0, 154, 140,
	114, 115, 160, 161, 159, 0, 159, 0, 144, 0,
	865, 216, 217, 218, 219, 0, 222, 0, 73, 74,
	0, 227, 246, 273, 564, 344, 482, 425, 485, 528,
	159, 532, 533, 535, 537, 538, 540, 487, 486, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 0, 0,
	34, 0, 598, -2, 0, 0, 0, 49, 0, 576,
	602, 603, 372, 0, 377, 0, 359, 360, 361, 0,
	0, 0, 0, 0, 380, 38, 173, 0, 192, 0,
	364, 165, 158, 0, 162, 138, 162, 0, 0, 67,
	0, 76, 77, 0, 0, 566, 0, 529, 530, 0,
	0, 0, 0, 521, 493, 544, 0, 0, 0, 596,
	0, -2, 0, 591, 590, 367, 37, 0, 353, 0,
	0, 0, 0, 0, 400, 172, 174, 0, 179, 0,
	191, 0, 0, 170, 0, 167, 169, 156, 127, 128,
	142, 145, 0, 0, 0, 0, 28, 0, 0, 488,
	490, 489, 491, 0, 0, 0, 510, 511, 0, 586,
	29, 0, 373, 0, 0, 401, 402, 403, 355, 175,
	176, 0, 180, 178, 0, 365, 88, 0, 166, 168,
	0, 240, 0, 78, 79, 72, 567, 565, 492, 0,
	0, 0, 594, -2, 592, 362, 363, 177, 0, 171,
	239, 0, 0, 75, 522, 0, 525, 0, 241, 0,
	226, 523, 0, 0, 0, 195, 0, 0, 196, 197,
	0, 0, 524, 198, 0, 0, 0, 0, 0, 199,
	201, 202, 0, 0, 200, 242, 243, 203, 204, 205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 103, 95, 3,
	54, 56, 100, 98, 55, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 271,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:328
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:333
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:334
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:338
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:360
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:366
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:378
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:384
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:401
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:411
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:418
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:430
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:462
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:470
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:475
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:476
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:480
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:484
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:490
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:494
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:499
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:503
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:513
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:517
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:521
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:527
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:531
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:545
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:551
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:555
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:559
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:569
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:579
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:584
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:590
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:603
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:607
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:612
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:616
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:622
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:627
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:632
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:638
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:643
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:649
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:655
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:662
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:669
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:673
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:684
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:692
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:698
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:925
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:930
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:934
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:939
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:943
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:951
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:955
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:961
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:969
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:973
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:988
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:992
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1001
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1010
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1014
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1028
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1032
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1036
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1041
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1054
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1058
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1075
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1079
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1085
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1089
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1095
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1099
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1109
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1114
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1120
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1124
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1134
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1146
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1156
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1165
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1181
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1187
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1198
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1202
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1206
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1210
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1216
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1222
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1232
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1236
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1240
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1244
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1265
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1269
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1273
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1293
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1297
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1301
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1305
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1310
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1323
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1337
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1341
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1345
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1383
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1389
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1393
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1399
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1403
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1415
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1419
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1427
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1435
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1440
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1452
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1473
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1547
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1552
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1570
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1596
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1620
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1624
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1630
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1634
		{
			yyVAL.str = "full "
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1640
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1650
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1654
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1658
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1664
		{
			yyVAL.showFilter = nil
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1668
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1672
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1678
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1682
		{
			yyVAL.str = SessionStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1686
		{
			yyVAL.str = GlobalStr
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &Begin{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Begin{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &Commit{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &Rollback{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &OtherRead{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1740
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1744
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1748
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1754
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1758
		{
			setAllowComments(yylex, true)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1762
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1768
		{
			yyVAL.bytes2 = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1772
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1778
		{
			yyVAL.str = UnionStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1782
		{
			yyVAL.str = UnionAllStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1786
		{
			yyVAL.str = UnionDistinctStr
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1799
		{
			yyVAL.str = SQLCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = DistinctStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = StraightJoinHint
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1822
		{
			yyVAL.selectExprs = nil
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1832
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1836
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1842
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1846
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1850
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1854
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1859
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1867
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1874
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1879
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1883
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1889
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1893
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1907
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1917
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1921
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1927
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1931
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1936
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1940
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1950
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Name: yyDollar[1].colIdent, Value: yyDollar[3].tableValuedFunctionArgumentValue}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.tableValuedFunctionArgumentValue = &ExprTableValuedFunctionArgumentValue{Expr: yyDollar[1].expr}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1966
		{
			yyVAL.tableValuedFunctionArgumentValue = &TableDescriptorTableValuedFunctionArgumentValue{Table: yyDollar[3].tableExpr}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1970
		{
			yyVAL.tableValuedFunctionArgumentValue = &FieldDescriptorTableValuedFunctionArgumentValue{Field: yyDollar[3].colName}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1976
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1980
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1990
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2003
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2007
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2011
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2015
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2021
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2023
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2027
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2033
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2035
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2038
		{
			yyVAL.empty = struct{}{}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.empty = struct{}{}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2043
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2047
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2058
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = JoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2068
		{
			yyVAL.str = JoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = JoinStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2078
		{
			yyVAL.str = StraightJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2084
		{
			yyVAL.str = LeftJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.str = LeftJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2092
		{
			yyVAL.str = RightJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2096
		{
			yyVAL.str = RightJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = NaturalJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2116
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2130
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2136
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2141
		{
			yyVAL.indexHints = nil
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2145
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2149
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2153
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = nil
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2162
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2172
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2184
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2192
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.str = IsNullStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.str = IsNotNullStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2268
		{
			yyVAL.str = IsTrueStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2272
		{
			yyVAL.str = IsNotTrueStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2276
		{
			yyVAL.str = IsFalseStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			yyVAL.str = IsNotFalseStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.str = EqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.str = LessThanStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.str = GreaterThanStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.str = LessEqualStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.str = GreaterEqualStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.str = NotEqualStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2310
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2315
		{
			yyVAL.expr = nil
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2319
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2325
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2329
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2333
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2339
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2345
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2455
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 492:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 493:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = ""
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2691
		{
			yyVAL.str = BooleanModeStr
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2695
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2699
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2703
		{
			yyVAL.str = QueryExpansionStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2709
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2719
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2723
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2727
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2731
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2735
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2739
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = nil
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2783
		{
			yyVAL.str = string("")
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2787
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2797
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2803
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = nil
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2818
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2822
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2826
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2852
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &NullVal{}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2884
		{
			yyVAL.exprs = nil
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2888
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2902
		{
			yyVAL.orderBy = nil
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2906
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2916
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2922
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2927
		{
			yyVAL.str = AscScr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2931
		{
			yyVAL.str = AscScr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2935
		{
			yyVAL.str = DescScr
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2940
		{
			yyVAL.limit = nil
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2944
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2948
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2952
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2957
		{
			yyVAL.str = ""
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2961
		{
			yyVAL.str = ForUpdateStr
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2965
		{
			yyVAL.str = ShareModeStr
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2986
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2991
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2995
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2999
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3006
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3010
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3014
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3018
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3023
		{
			yyVAL.updateExprs = nil
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3027
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3037
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3047
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3053
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3059
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3073
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3079
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3089
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3095
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3099
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3103
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3107
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3114
		{
			yyVAL.bytes = []byte("charset")
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.expr = &Default{}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3138
		{
			yyVAL.byt = 0
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3140
		{
			yyVAL.byt = 1
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3143
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3145
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3148
		{
			yyVAL.str = ""
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.str = IgnoreStr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3166
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3168
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3170
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3172
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3175
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3177
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3185
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3188
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3195
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3197
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3212
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3474
		{
			decNesting(yylex)
		}
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3479
		{
			skipToEnd(yylex)
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3484
		{
			skipToEnd(yylex)
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3488
		{
			skipToEnd(yylex)
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3492
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
